[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Array/index.js",
    "content": "import { safeGet, deepClone, deepEquals } from '../Object';\nimport { getType, isString, isNumber } from '../Type';\nimport { partial, compose } from '../Function';\nimport { EMPTY } from '../Constants/common';\nimport * as TypeConstants from '../Constants/types';\n\n/**\n * @desc Sorts array of objects by given properties with priorities.\n * @example\n *  let given = [\n *    { 'name': 'fred',   'age': 48 },\n *    { 'name': 'barney', 'age': 36 },\n *    { 'name': 'fred',   'age': 32 },\n *    { 'name': 'barney', 'age': 34 }\n *  ];\n *\n *  sortBy(given, ['name', 'age']);\n *  //  [\n *  //    { name: 'barney', age: 34 },\n *  //    { name: 'barney', age: 36 },\n *  //    { name: 'fred', age: 32 },\n *  //    { name: 'fred', age: 48 }\n *  //  ]\n * @param {Array<object>} source Source which requires sorting.\n * @param {Array<string>} propList Sorting property list.\n * @returns {Array<object>} Sorted array of objects.\n */\nexport function sortBy(source, propList) {\n  let sourceClone = deepClone(source)\n    , priorityProj = (first, second) => propName =>\n    numAndStrComparator(first, second, propName);\n\n  return sourceClone.sort((a, b) =>\n    compose(\n      head,\n      compact,\n      partial(map, EMPTY, priorityProj(a, b))\n    )(propList) || 0);\n};\n\n/**\n * @desc Will group objects in array by property.\n * @example\n * let actualObjArr = [\n *   { name: 'John', age: 21 },\n *   { name: 'Liza', age: 23 },\n *   { name: 'John', age: 23 }\n * ];\n *\n * groupBy(['one', 'two', 'three'], 'length');\n * // { '3': ['one', 'two'], '5': ['three'] }\n *\n * groupBy(actualObjArr, 'name');\n * // {\n * //   John: [ { name: 'John', age: 21 }, { name: 'John', age: 23 } ],\n * //   Liza: [ { name: 'Liza', age: 23 } ]\n * // }\n *\n * groupBy(actualObjArr, 'age');\n * // {\n * //   '21': [ { name: 'John', age: 21 } ],\n * //   '23': [ { name: 'Liza', age: 23 }, { name: 'John', age: 23 } ]\n * // };\n * @param {Array<object>} source Source which should be used for grouping.\n * @param  {string} groupVal Name which should be used for grouping.\n * @returns {object} Grouped object.\n */\nexport function groupByProp(source, groupVal) {\n  return source.reduce((acc, val) =>\n    Object.assign({}, acc, {\n      [val[groupVal]]: acc[val[groupVal]]\n      ? [...acc[val[groupVal]], val]\n      : [val]\n    }), {});\n};\n\n/**\n * @desc Will group objects in array by function.\n * @example\n * groupByFn([6.1, 4.2, 6.3], Math.floor)\n * // { '4': [4.2], '6': [6.1, 6.3] }\n *\n * groupByFn([\n *   { name: 'John', age: 21 },\n *   { name: 'Liza', age: 23 },\n *   { name: 'John', age: 23 }\n * ], item => `name_${item.name}`);\n * // {\n * //   name_John: [ { name: 'John', age: 21 }, { name: 'John', age: 23 } ],\n * //   name_Liza: [ { name: 'Liza', age: 23 } ]\n * // }\n * @param {Array<object>} source Source which should be used for grouping.\n * @param {Function} groupFn Function which will define names for groups.\n * @returns {object} Grouped object.\n */\nexport function groupByFn(source, groupFn) {\n  return source.reduce((acc, val) => {\n    let propName = groupFn(val);\n    return Object.assign({}, acc, {\n      [propName]: acc[propName]\n        ? [...acc[propName], val]\n        : [val]\n    });\n  }, {});\n};\n\n/**\n * @desc Will group objects in array by object path.\n * @example\n * groupByPath([\n *   { name: { first: 'John', last: 'aaa' }, age: 21 },\n *   { name: { first: 'Liza', last: 'bbb'}, age: 23 },\n *   { name: { first: 'John', last: 'ccc'}, age: 23 } ], ['name', 'first']);\n *\n * // {\n * //   John: [\n * //     { name: { first: 'John', last: 'aaa' }, age: 21 },\n * //     { name: { first: 'John', last: 'ccc' }, age: 23 }\n * //   ],\n * //   Liza: [\n * //     { name :{ first: 'Liza', last: 'bbb' }, age: 23 }\n * //   ]\n * // }\n * @param {Array<object>} source Source which should be used for grouping.\n * @param {*} groupPath Path which should be used as name for groups.\n * @returns {object} Grouped object.\n */\nexport function groupByPath(source, groupPath) {\n  return source.reduce((acc, val) => {\n    let propName = safeGet(val, ...groupPath);\n    return Object.assign({}, acc, {\n      [propName]: acc[propName]\n        ? [...acc[propName], val]\n        : [val]\n    });\n  }, {});\n};\n\n/**\n * @desc Will group objects in array by given property,\n * function or path.\n * @example\n * let actualObjArr = [\n *   { name: 'John', age: 21 },\n *   { name: 'Liza', age: 23 },\n *   { name: 'John', age: 23 }\n * ];\n *\n * groupBy(['one', 'two', 'three'], 'length');\n * // { '3': ['one', 'two'], '5': ['three'] });\n *\n * groupBy(actualObjArr, 'name');\n * // {\n * //   John: [ { name: 'John', age: 21 }, { name: 'John', age: 23 } ],\n * //   Liza: [ { name: 'Liza', age: 23 } ]\n * // }\n *\n * groupBy(actualObjArr, 'age');\n * // {\n * //   '21': [ { name: 'John', age: 21 } ],\n * //   '23': [ { name: 'Liza', age: 23 }, { name: 'John', age: 23 } ]\n * // };\n *\n * groupBy([6.1, 4.2, 6.3], Math.floor)\n * // { '4': [4.2], '6': [6.1, 6.3] }\n *\n * groupBy([\n *   { name: 'John', age: 21 },\n *   { name: 'Liza', age: 23 },\n *   { name: 'John', age: 23 }\n * ], item => `name_${item.name}`);\n * // {\n * //   name_John: [ { name: 'John', age: 21 }, { name: 'John', age: 23 } ],\n * //   name_Liza: [ { name: 'Liza', age: 23 } ]\n * // }\n *\n * groupBy([\n *   { name: { first: 'John', last: 'aaa' }, age: 21 },\n *   { name: { first: 'Liza', last: 'bbb'}, age: 23 },\n *   { name: { first: 'John', last: 'ccc'}, age: 23 } ], ['name', 'first']);\n * // {\n * //   John: [\n * //     { name: { first: 'John', last: 'aaa' }, age:21 },\n * //     { name: { first: 'John', last: 'ccc' }, age:23 }\n * //   ],\n * //   Liza: [\n * //     { name :{ first: 'Liza', last: 'bbb' }, age: 23 }\n * //   ]\n * // }\n * @param  {...any} args grouping arguments.\n * @returns {object} Grouped object.\n */\nexport function groupBy(...args) {\n  return ({\n    [TypeConstants.STRING]: groupByProp,\n    [TypeConstants.FUNCTION]: groupByFn,\n    [TypeConstants.ARRAY]: groupByPath,\n  })[getType(tail(args))](...args);\n};\n\n/**\n * @desc Will create clone of given array.\n * @example\n * cloneArray([1,2,3]); // [1,2,3]\n *\n * cloneArray([{name: 'John'}, {name: 'Liza'}]); // [{name: 'John'}, {name: 'Liza'}]\n *\n * @param {Array<T>} source Array that\n * should be cloned.\n * @returns {Array<T>} Cloned array.\n */\nexport function cloneArray(source) {\n  return source.slice();\n};\n\n/**\n * @desc Returns an array without match item.\n * @example\n * let numberArray = without([1, 2, 3], 1);\n * numberArray // => [2, 3]\n *\n * @param {Array<T>} source Array from where to remove\n * match item.\n * @param {T} matchItem item that should not\n * be included in result array.\n * @returns {Array<T>} Array without matched element.\n */\nexport function without(source, matchItem) {\n  return source.filter(elem => elem !== matchItem);\n};\n\n/**\n * @desc Creates an array with all falsey values removed.\n * The values false, null, 0, \"\", undefined, and NaN are falsey.\n * @example\n * let dataArray = [0, -3, 'Hello', '', false, true, {}, [], null, undefined];\n *\n * compact(dataArray, 3); // [-3, 'Hello', true, {}, []]\n *\n * @param {Array<T>} source Array to compact.\n * truthly values\n * @return {Array<T>} Returns the new array of filtered values.\n */\nexport function compact(source) {\n  return source.filter(elem => elem);\n};\n\n/**\n * @desc The opposite of filter; this method returns the elements of\n * collection that predicate does not return truthy for.\n * @example\n *  let numberArray = [1, 2, 3]\n *    , objectArray = [{ name: 'John' }, { name: 'Liza' }];\n *\n *  reject(numberArray, item => item < 3) // [3]\n *  reject(objectArray, user => user.name === 'Liza') // [{ name: 'John' }]\n *\n * @param {Array<T>} source Array that should checked.\n * @param {Function} fn Opposite filter function.\n * @return {Array<T>} Returns the new filtered array.\n */\nexport function reject(source, fn) {\n  return source.reduce((accumulator, sourceValue) => {\n    if (!fn(sourceValue)) accumulator.push(sourceValue);\n    return accumulator;\n  }, []);\n};\n\n/**\n * @desc Will shuffle elements in array.\n * @example\n * shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n * // [ 1, 5, 3, 4, 2, 6, 10, 7, 8, 9 ]\n *\n * shuffle([\n *   { name: 'name1' },\n *   { name: 'name2' },\n *   { name: 'name3' },\n *   { name: 'name4' },\n *   { name: 'name5' },\n *   { name: 'name6' },\n *   { name: 'name7' },\n *   { name: 'name8' },\n *   { name: 'name9' },\n *   { name: 'name10' }\n * ]);\n * // [\n * //   { name: 'name2' },\n * //   { name: 'name3' },\n * //   { name: 'name4' },\n * //   { name: 'name1' },\n * //   { name: 'name9' },\n * //   { name: 'name6' },\n * //   { name: 'name8' },\n * //   { name: 'name7' },\n * //   { name: 'name10' },\n * //   { name: 'name5' }\n * // ]\n *\n * @param {Array<T>} source Array to shuffle.\n * @returns {Array<T>} Array that is shuffled out.\n */\nexport function shuffle(source) {\n  let arrCopy = source.slice();\n  return arrCopy.sort(() => Math.random() - 0.5);\n};\n\n/**\n * @desc Will return first n elements.\n * @example\n * let numberArray = [1, 2, 3]\n *   , objectArray = [{ name: 'John' }, { name: 'Liza' }];\n *\n * take(numberArray); // [1]\n * take(objectArray); // [{ name: 'John' }]\n *\n * take(numberArray, 2); // [1, 2]\n * take(objectArray, 2); // [{ name: 'John' }, { name: 'Liza' }]\n *\n * @param {Array<T>} source Array to slice.\n * @param {number} [sourceLength=1] Number of first n elements\n * that should be returned back.\n * @return {Array<T>} First n elements from Array.\n */\nexport function take(source, sourceLength = 1) {\n  return source.slice(0, sourceLength);\n};\n\n/**\n * @desc Will return last n elements from an array.\n * @param {Array<T>} source Array to slice.\n * @param {number} [numberOfLastElements=1] Number of last n elements\n * that should be returned back.\n * @return {Array<T>} Last n elements from Array.\n */\nexport function takeRight(source, numberOfLastElements = 1) {\n  return source.slice(-numberOfLastElements);\n};\n\n/**\n * @desc Creates a slice of array with elements taken from\n * the beginning. Elements are taken until predicate returns\n * falsey.\n * @param {Array<T>} [source=[]] The array to query.\n * @param {Function} whileFn The function invoked per iteration.\n * @return {Array<T>} First n elements from Array before match.\n */\nexport function takeWhile(source = [], whileFn) {\n  let indexOfСoincidence = source.findIndex(whileFn)\n    , indexOfCutting = indexOfСoincidence > -1\n        ? indexOfСoincidence : source.length;\n  return source.slice(0, indexOfCutting);\n};\n\n/**\n * @desc Creates a slice of array with elements taken from\n * the end. Elements are taken until predicate returns\n * falsey.\n * @param {Array<T>} [source=[]] The array to query.\n * @param {Function} rightWhileFn The function invoked\n * per iteration.\n * @return {Array<T>} Last n elements from Array before match.\n */\nexport function takeRightWhile(source = [], rightWhileFn) {\n  let indexOfСoincidence = source.findIndex(rightWhileFn)\n    , indexOfCutting = indexOfСoincidence > -1\n        ? indexOfСoincidence  + 1 : 0;\n  return source.slice(indexOfCutting, source.length);\n};\n\n/**\n * @desc Will return array of selected properties.\n * @param {Array<Object>} [source=[]] Array for propjection.\n * @param {string} propName Name of the property from\n * that should be included in Array.\n * @return {Array<T>} Packed array of selected properties.\n */\nexport function pluck(source = [], propName) {\n  return source.map(item => item[propName]);\n};\n\n/**\n * @desc Will fill array by given value.\n * @param {T} source Fill value.\n * @param {number} number Number of filled elements in Array.\n * @return {Array<T>} Array with n elements filled by T.\n */\nexport function fill(source, number) {\n  return Array.from({ length: number }, i => source);\n}\n\n/**\n * @desc Will fill array in the end for n elements and add\n * given array from begining.\n * @param {T} value Fill Value.\n * @param {number} number Number of elements that should be filled\n * in the end of returned an array.\n * @param {Array<T|D>} [source=[]] Fill Value.\n * @return {Array<T|D>} Returns combination from given\n * and filled array.\n */\nexport function fillRight(value, number, source = []) {\n  return [...source, ...fill(value, number)];\n}\n\n/**\n * @desc Will fill array in the begining for n elements and add\n * given array in the end.\n * @param {T} value Fill Value.\n * @param {number} number Number of elements that should be filled\n * in the begining of returned an array.\n * @param {Array<T|D>} [source=[]] Fill Value.\n * @return {Array<T|D>} Returns combination from given\n * and filled array.\n */\nexport function fillLeft(value, number, source = []) {\n  return [...fill(value, number), ...source];\n}\n\n/**\n * @desc Will return random element from array.\n * @param {Array<T>} source Array from where should be\n * choosen random element.\n * @return {T} Random element.\n */\nexport function sample(source) {\n  var randomIndex = Math.floor(Math.random() * (source.length));\n  return source[randomIndex];\n};\n\n/**\n * @desc Invokes the iteratee n times, returning an array of the results\n * of each invocation.\n * @param {number} iterationNumber Number of iterations.\n * @param {Function} fn Function that should be invoked\n * with each iteration.\n * @return {Array<T>} Result array.\n */\nexport function times(iterationNumber, fn) {\n  return Array.apply(null, Array(iterationNumber)).map((elem, index) => fn(index));\n};\n\n/**\n * @desc Checks if predicate returns truthy for all elements of collection.\n * Iteration is stopped once predicate returns falsey.\n * @param {Array<T>} [source=[]] Array to check.\n * @param {Function} fn Predicate function.\n * @return {boolean} true if all items will be returned by\n * predicate function.\n */\nexport function every(source = [], fn) {\n  return source.filter(fn).length === source.length;\n};\n\n/**\n * @desc Iterates over elements of collection, returning the first\n * element predicate returns truthy for.\n * @param {Array<T>} [source=[]] Array where check.\n * @param {Function} fn Predicate function.\n * @return {T} Item if it was found by function predicate.\n */\nexport function find(source = [], fn) {\n  return source.find(fn);\n};\n\n/**\n * @desc Flattens array.\n * @param {Array<T>} source Array that should be flatten.\n * @return Returns the new flattened array.\n */\nexport function flatten(source) {\n  let result = []\n    , splitArray = (arr, result) => {\n      return arr.reduce((accumulator, item) => {\n        (item instanceof Array) ? splitArray(item, accumulator) : accumulator.push(item);\n        return accumulator;\n      }, result);\n    };\n\n  return splitArray(source, result)\n};\n\n/**\n * @desc Will zip multiple Arrays using projection function.\n * Takes arguments ArrayLike object that should include n number of arrays with\n * same length and in the end should be projection function.\n * @return {Array<D>} Projected Array.\n */\nexport function zipWithProjection() {\n  let argumentsArray = Array.from(arguments)\n    , projectionFn = argumentsArray.pop()\n    , sizeArray = argumentsArray.map(arrayItem => arrayItem.length)\n    , minArrayLength = Math.min(...sizeArray);\n\n  return times(minArrayLength, index =>\n    projectionFn(...argumentsArray.map(arrayItem => arrayItem[index])));\n};\n\n/**\n * @desc Will project array object.\n * @param {Array<T>} [source] Array that should use projection function.\n * @param {Function} fn Projection function.\n * @return {Array<D>} Projection Array.\n */\nexport function map(source, fn) {\n  return source.map(fn);\n};\n\n/**\n * @desc Will filter an array.\n * @param {Array<T>} [source=[]] Array that should use filtered function.\n * @param {Function} fn Predicate function.\n * @return {Array<T>} Filtered Array.\n */\nexport function filter(source = [], fn) {\n  return source.filter(fn);\n};\n\n/**\n * @desc Creates an array of grouped elements, the first of which\n * contains the first elements of the given arrays, the second of\n * which contains the second elements of the given arrays, and so on.\n * @param {...Array<T>} source Array to zip.\n * @return {Array<D>} Zipped Array.\n */\nexport function zip(...source) {\n  let sizeArray = source.map(arrayItem => arrayItem.length)\n    , minArrayLength = Math.min(...sizeArray);\n\n  return times(minArrayLength, index =>\n    source.map(arrayItem => arrayItem[index]));\n};\n\n/**\n * @desc Checks if predicate returns truthy for any element of collection.\n * Iteration is stopped once predicate returns truthy. Is analog of any(*) function.\n * @param {Array<T>} [source=[]] The collection to iterate over.\n * @param {Function} fn The collection to iterate over.\n * @return {boolean} Returns true if any element passes the predicate check, else false.\n */\nexport function some(source = [], fn) {\n  return !!source.filter(fn).length;\n};\n\n/**\n * @desc Checks if predicate returns truthy for any element of collection.\n * Iteration is stopped once predicate returns truthy. Is analog some(*) function.\n * @param {Array<T>} [source=[]] The collection to iterate over.\n * @param {Function} fn The collection to iterate over.\n * @return {boolean} Returns true if any element passes the predicate check, else false.\n */\nexport function any(source = [], fn) {\n  return some(source, fn);\n};\n\n/**\n * @desc Will return last element from array. Is analog of tail(*) function.\n * @param {Array<T>} [source=[]] Array where to check for last element.\n * @return {T} Returns last element from Array.\n */\nexport function last(source = []) {\n  return source[source.length-1];\n};\n\n/**\n * @desc Will return last element from array. Is analog of last(*) function.\n * @param {Array<T>} [source=[]] Array where to check for last element.\n * @return {T} Returns last element from Array.\n */\nexport function tail(source) {\n  return last(source);\n}\n\n/**\n * @desc Will return first element from array. Is analog of first(*) function.\n * @param {Array<T>} [source=[]] Array where to check for first element.\n * @return {T} Returns first element from Array.\n */\nexport function head(source = []) {\n  return source[0];\n};\n\n/**\n * @desc Will return first element from array. Is analog of head(*) function.\n * @param {Array<T>} [source=[]] Array where to check for first element.\n * @return {T} Returns first element from Array.\n */\nexport function first(source = []) {\n  return head(source);\n};\n\n/**\n * @desc Will return element from array by given index.\n * @example\n * nth([51,35,23], 1) // 35\n *\n * @param {Array<T>} source Source where should be taken element by given index.\n * @param {number} index Index of element which should be returned.\n * @return {T} Returns nth element from Array.\n */\nexport function nth(source, index) {\n  return source[index];\n};\n\n/**\n * @desc Casts values as an array if it's not one.\n * @param {...T} valueToCast All values will be included in array that\n * will be returned back.\n * @return {Array<T>} Return array that will include all arguments.\n */\nexport function castArray(...valueToCast) {\n  return valueToCast;\n};\n\n/**\n * @desc Returns array with changed order.\n * @param {Array<T>} source Array that should change the order.\n * @param {Array<number>} order Order Array.\n * @return {Array<T>} Array with changed order.\n */\nexport function changeOrder(source, order) {\n  return order.reduce((accumulator, value) =>\n    [...accumulator, source[value]], []);\n};\n\n/**\n * @desc number or string comparator. Can be used in sort function.\n * @example\n * let given = [\n *   { 'name': 'fred',   'age': 48 },\n *   { 'name': 'barney', 'age': 36 }\n * ];\n *\n * numAndStrComparator(given[0], given[1], 'name'); // 1\n * numAndStrComparator(given[1], given[0],'name'); // -1\n * numAndStrComparator(given[0], given[1],'age'); // 1\n * numAndStrComparator(given[1], given[0],'age'); // -1\n *\n * @param {string|number} first First argumnet for comparation.\n * @param {string|number} second Second argumnet for comparation.\n * @param {string} prop Compare property.\n * @returns {number} Comparation result.\n */\nexport function numAndStrComparator(first, second, prop) {\n  let valueArr = [first[prop], second[prop]];\n  if(valueArr.every(isString) || valueArr.every(isNumber)) {\n    if(first[prop] === second[prop]) return 0;\n    return (first[prop] < second[prop]) ? -1 : 1;\n  }\n};\n\n/**\n * @desc returns new array only with uniq elements\n * @example\n * uniq(\n *   [\n *     { id: 1, firstName: 'Jon', lastName: 'Snow', location: 'Winterfell' },\n *     { id: 2, firstName: 'Eddard', lastName: 'Stark', location: 'Winterfell' },\n *     { id: 3, firstName: 'Catelyn', lastName: 'Stark', location: 'Winterfell' },\n *     { id: 4, firstName: 'Roose', lastName: 'Bolton', location: 'Dreadfort' },\n *     { id: 4, firstName: 'Roose', lastName: 'Bolton', location: 'Dreadfort' },\n *     { id: 5, firstName: 'Ramsay', lastName: 'Snow', location: 'Dreadfort' }\n *   ]);\n * // [\n * //   { id: 1, firstName: 'Jon', lastName: 'Snow', location: 'Winterfell' },\n * //   { id: 2, firstName: 'Eddard', lastName: 'Stark', location: 'Winterfell' },\n * //   { id: 3, firstName: 'Catelyn', lastName: 'Stark', location: 'Winterfell' },\n * //   { id: 4, firstName: 'Roose', lastName: 'Bolton', location: 'Dreadfort' },\n * //   { id: 5, firstName: 'Ramsay', lastName: 'Snow', location: 'Dreadfort' }\n * // ]\n *\n * @param {Array<any>} source Source for uniqueness.\n * @returns {Array<any>} New array only with unique elements.\n */\nexport function uniq(source) {\n  return source.reduce((acc, val) => {\n    return acc.find(item => deepEquals(item, val))\n      ? acc : [...acc, val];\n  }, []);\n}\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Array/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "sortBy",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~sortBy",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{sortBy}",
    "description": "Sorts array of objects by given properties with priorities.",
    "examples": [
      " let given = [\n   { 'name': 'fred',   'age': 48 },\n   { 'name': 'barney', 'age': 36 },\n   { 'name': 'fred',   'age': 32 },\n   { 'name': 'barney', 'age': 34 }\n ];\n\n sortBy(given, ['name', 'age']);\n //  [\n //    { name: 'barney', age: 34 },\n //    { name: 'barney', age: 36 },\n //    { name: 'fred', age: 32 },\n //    { name: 'fred', age: 48 }\n //  ]"
    ],
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<object>} Sorted array of objects."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<object>"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Source which requires sorting."
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "propList",
        "description": "Sorting property list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<object>"
      ],
      "spread": false,
      "description": "Sorted array of objects."
    }
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "groupByProp",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~groupByProp",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{groupByProp}",
    "description": "Will group objects in array by property.",
    "examples": [
      "let actualObjArr = [\n  { name: 'John', age: 21 },\n  { name: 'Liza', age: 23 },\n  { name: 'John', age: 23 }\n];\n\ngroupBy(['one', 'two', 'three'], 'length');\n// { '3': ['one', 'two'], '5': ['three'] }\n\ngroupBy(actualObjArr, 'name');\n// {\n//   John: [ { name: 'John', age: 21 }, { name: 'John', age: 23 } ],\n//   Liza: [ { name: 'Liza', age: 23 } ]\n// }\n\ngroupBy(actualObjArr, 'age');\n// {\n//   '21': [ { name: 'John', age: 21 } ],\n//   '23': [ { name: 'Liza', age: 23 }, { name: 'John', age: 23 } ]\n// };"
    ],
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} Grouped object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<object>"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Source which should be used for grouping."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "groupVal",
        "description": "Name which should be used for grouping."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Grouped object."
    }
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "groupByFn",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~groupByFn",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{groupByFn}",
    "description": "Will group objects in array by function.",
    "examples": [
      "groupByFn([6.1, 4.2, 6.3], Math.floor)\n// { '4': [4.2], '6': [6.1, 6.3] }\n\ngroupByFn([\n  { name: 'John', age: 21 },\n  { name: 'Liza', age: 23 },\n  { name: 'John', age: 23 }\n], item => `name_${item.name}`);\n// {\n//   name_John: [ { name: 'John', age: 21 }, { name: 'John', age: 23 } ],\n//   name_Liza: [ { name: 'Liza', age: 23 } ]\n// }"
    ],
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} Grouped object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<object>"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Source which should be used for grouping."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "groupFn",
        "description": "Function which will define names for groups."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Grouped object."
    }
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "groupByPath",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~groupByPath",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{groupByPath}",
    "description": "Will group objects in array by object path.",
    "examples": [
      "groupByPath([\n  { name: { first: 'John', last: 'aaa' }, age: 21 },\n  { name: { first: 'Liza', last: 'bbb'}, age: 23 },\n  { name: { first: 'John', last: 'ccc'}, age: 23 } ], ['name', 'first']);\n\n// {\n//   John: [\n//     { name: { first: 'John', last: 'aaa' }, age: 21 },\n//     { name: { first: 'John', last: 'ccc' }, age: 23 }\n//   ],\n//   Liza: [\n//     { name :{ first: 'Liza', last: 'bbb' }, age: 23 }\n//   ]\n// }"
    ],
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} Grouped object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<object>"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Source which should be used for grouping."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "groupPath",
        "description": "Path which should be used as name for groups."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Grouped object."
    }
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "groupBy",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~groupBy",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{groupBy}",
    "description": "Will group objects in array by given property,\nfunction or path.",
    "examples": [
      "let actualObjArr = [\n  { name: 'John', age: 21 },\n  { name: 'Liza', age: 23 },\n  { name: 'John', age: 23 }\n];\n\ngroupBy(['one', 'two', 'three'], 'length');\n// { '3': ['one', 'two'], '5': ['three'] });\n\ngroupBy(actualObjArr, 'name');\n// {\n//   John: [ { name: 'John', age: 21 }, { name: 'John', age: 23 } ],\n//   Liza: [ { name: 'Liza', age: 23 } ]\n// }\n\ngroupBy(actualObjArr, 'age');\n// {\n//   '21': [ { name: 'John', age: 21 } ],\n//   '23': [ { name: 'Liza', age: 23 }, { name: 'John', age: 23 } ]\n// };\n\ngroupBy([6.1, 4.2, 6.3], Math.floor)\n// { '4': [4.2], '6': [6.1, 6.3] }\n\ngroupBy([\n  { name: 'John', age: 21 },\n  { name: 'Liza', age: 23 },\n  { name: 'John', age: 23 }\n], item => `name_${item.name}`);\n// {\n//   name_John: [ { name: 'John', age: 21 }, { name: 'John', age: 23 } ],\n//   name_Liza: [ { name: 'Liza', age: 23 } ]\n// }\n\ngroupBy([\n  { name: { first: 'John', last: 'aaa' }, age: 21 },\n  { name: { first: 'Liza', last: 'bbb'}, age: 23 },\n  { name: { first: 'John', last: 'ccc'}, age: 23 } ], ['name', 'first']);\n// {\n//   John: [\n//     { name: { first: 'John', last: 'aaa' }, age:21 },\n//     { name: { first: 'John', last: 'ccc' }, age:23 }\n//   ],\n//   Liza: [\n//     { name :{ first: 'Liza', last: 'bbb' }, age: 23 }\n//   ]\n// }"
    ],
    "lineNumber": 193,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} Grouped object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "grouping arguments."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Grouped object."
    }
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "cloneArray",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~cloneArray",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{cloneArray}",
    "description": "Will create clone of given array.",
    "examples": [
      "cloneArray([1,2,3]); // [1,2,3]\n\ncloneArray([{name: 'John'}, {name: 'Liza'}]); // [{name: 'John'}, {name: 'Liza'}]"
    ],
    "lineNumber": 212,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<T>} Cloned array."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Array that\nshould be cloned."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<T>"
      ],
      "spread": false,
      "description": "Cloned array."
    }
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "without",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~without",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{without}",
    "description": "Returns an array without match item.",
    "examples": [
      "let numberArray = without([1, 2, 3], 1);\nnumberArray // => [2, 3]"
    ],
    "lineNumber": 228,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<T>} Array without matched element."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Array from where to remove\nmatch item."
      },
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "matchItem",
        "description": "item that should not\nbe included in result array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<T>"
      ],
      "spread": false,
      "description": "Array without matched element."
    }
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "compact",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~compact",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{compact}",
    "description": "Creates an array with all falsey values removed.\nThe values false, null, 0, \"\", undefined, and NaN are falsey.",
    "examples": [
      "let dataArray = [0, -3, 'Hello', '', false, true, {}, [], null, undefined];\n\ncompact(dataArray, 3); // [-3, 'Hello', true, {}, []]"
    ],
    "lineNumber": 244,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Array to compact.\ntruthly values"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<T>"
      ],
      "spread": false,
      "description": "Returns the new array of filtered values."
    }
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "reject",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~reject",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{reject}",
    "description": "The opposite of filter; this method returns the elements of\ncollection that predicate does not return truthy for.",
    "examples": [
      " let numberArray = [1, 2, 3]\n   , objectArray = [{ name: 'John' }, { name: 'Liza' }];\n\n reject(numberArray, item => item < 3) // [3]\n reject(objectArray, user => user.name === 'Liza') // [{ name: 'John' }]"
    ],
    "lineNumber": 262,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Array that should checked."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Opposite filter function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<T>"
      ],
      "spread": false,
      "description": "Returns the new filtered array."
    }
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "shuffle",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~shuffle",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{shuffle}",
    "description": "Will shuffle elements in array.",
    "examples": [
      "shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n// [ 1, 5, 3, 4, 2, 6, 10, 7, 8, 9 ]\n\nshuffle([\n  { name: 'name1' },\n  { name: 'name2' },\n  { name: 'name3' },\n  { name: 'name4' },\n  { name: 'name5' },\n  { name: 'name6' },\n  { name: 'name7' },\n  { name: 'name8' },\n  { name: 'name9' },\n  { name: 'name10' }\n]);\n// [\n//   { name: 'name2' },\n//   { name: 'name3' },\n//   { name: 'name4' },\n//   { name: 'name1' },\n//   { name: 'name9' },\n//   { name: 'name6' },\n//   { name: 'name8' },\n//   { name: 'name7' },\n//   { name: 'name10' },\n//   { name: 'name5' }\n// ]"
    ],
    "lineNumber": 303,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<T>} Array that is shuffled out."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Array to shuffle."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<T>"
      ],
      "spread": false,
      "description": "Array that is shuffled out."
    }
  },
  {
    "__docId__": 59,
    "kind": "function",
    "name": "take",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~take",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{take}",
    "description": "Will return first n elements.",
    "examples": [
      "let numberArray = [1, 2, 3]\n  , objectArray = [{ name: 'John' }, { name: 'Liza' }];\n\ntake(numberArray); // [1]\ntake(objectArray); // [{ name: 'John' }]\n\ntake(numberArray, 2); // [1, 2]\ntake(objectArray, 2); // [{ name: 'John' }, { name: 'Liza' }]"
    ],
    "lineNumber": 325,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Array to slice."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "sourceLength",
        "description": "Number of first n elements\nthat should be returned back."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<T>"
      ],
      "spread": false,
      "description": "First n elements from Array."
    }
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "takeRight",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~takeRight",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{takeRight}",
    "description": "Will return last n elements from an array.",
    "lineNumber": 336,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Array to slice."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "numberOfLastElements",
        "description": "Number of last n elements\nthat should be returned back."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<T>"
      ],
      "spread": false,
      "description": "Last n elements from Array."
    }
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "takeWhile",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~takeWhile",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{takeWhile}",
    "description": "Creates a slice of array with elements taken from\nthe beginning. Elements are taken until predicate returns\nfalsey.",
    "lineNumber": 348,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "source",
        "description": "The array to query."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "whileFn",
        "description": "The function invoked per iteration."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<T>"
      ],
      "spread": false,
      "description": "First n elements from Array before match."
    }
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "takeRightWhile",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~takeRightWhile",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{takeRightWhile}",
    "description": "Creates a slice of array with elements taken from\nthe end. Elements are taken until predicate returns\nfalsey.",
    "lineNumber": 364,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "source",
        "description": "The array to query."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "rightWhileFn",
        "description": "The function invoked\nper iteration."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<T>"
      ],
      "spread": false,
      "description": "Last n elements from Array before match."
    }
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "pluck",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~pluck",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{pluck}",
    "description": "Will return array of selected properties.",
    "lineNumber": 378,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "source",
        "description": "Array for propjection."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "propName",
        "description": "Name of the property from\nthat should be included in Array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<T>"
      ],
      "spread": false,
      "description": "Packed array of selected properties."
    }
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "fill",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~fill",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{fill}",
    "description": "Will fill array by given value.",
    "lineNumber": 388,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Fill value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Number of filled elements in Array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<T>"
      ],
      "spread": false,
      "description": "Array with n elements filled by T."
    }
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "fillRight",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~fillRight",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{fillRight}",
    "description": "Will fill array in the end for n elements and add\ngiven array from begining.",
    "lineNumber": 402,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Fill Value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Number of elements that should be filled\nin the end of returned an array."
      },
      {
        "nullable": null,
        "types": [
          "Array<T|D>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "source",
        "description": "Fill Value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<T|D>"
      ],
      "spread": false,
      "description": "Returns combination from given\nand filled array."
    }
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "fillLeft",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~fillLeft",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{fillLeft}",
    "description": "Will fill array in the begining for n elements and add\ngiven array in the end.",
    "lineNumber": 416,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Fill Value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Number of elements that should be filled\nin the begining of returned an array."
      },
      {
        "nullable": null,
        "types": [
          "Array<T|D>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "source",
        "description": "Fill Value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<T|D>"
      ],
      "spread": false,
      "description": "Returns combination from given\nand filled array."
    }
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "sample",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~sample",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{sample}",
    "description": "Will return random element from array.",
    "lineNumber": 426,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Array from where should be\nchoosen random element."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "T"
      ],
      "spread": false,
      "description": "Random element."
    }
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "times",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~times",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{times}",
    "description": "Invokes the iteratee n times, returning an array of the results\nof each invocation.",
    "lineNumber": 439,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "iterationNumber",
        "description": "Number of iterations."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Function that should be invoked\nwith each iteration."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<T>"
      ],
      "spread": false,
      "description": "Result array."
    }
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "every",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~every",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{every}",
    "description": "Checks if predicate returns truthy for all elements of collection.\nIteration is stopped once predicate returns falsey.",
    "lineNumber": 451,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "source",
        "description": "Array to check."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Predicate function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if all items will be returned by\npredicate function."
    }
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "find",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~find",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{find}",
    "description": "Iterates over elements of collection, returning the first\nelement predicate returns truthy for.",
    "lineNumber": 462,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "source",
        "description": "Array where check."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Predicate function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "T"
      ],
      "spread": false,
      "description": "Item if it was found by function predicate."
    }
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "flatten",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~flatten",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{flatten}",
    "description": "Flattens array.",
    "lineNumber": 471,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Array that should be flatten."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Returns the new flattened array."
    }
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "zipWithProjection",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~zipWithProjection",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{zipWithProjection}",
    "description": "Will zip multiple Arrays using projection function.\nTakes arguments ArrayLike object that should include n number of arrays with\nsame length and in the end should be projection function.",
    "lineNumber": 489,
    "return": {
      "nullable": null,
      "types": [
        "Array<D>"
      ],
      "spread": false,
      "description": "Projected Array."
    },
    "params": []
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "map",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~map",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{map}",
    "description": "Will project array object.",
    "lineNumber": 505,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": true,
        "name": "source",
        "description": "Array that should use projection function."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Projection function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<D>"
      ],
      "spread": false,
      "description": "Projection Array."
    }
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "filter",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~filter",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{filter}",
    "description": "Will filter an array.",
    "lineNumber": 515,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "source",
        "description": "Array that should use filtered function."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Predicate function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<T>"
      ],
      "spread": false,
      "description": "Filtered Array."
    }
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "zip",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~zip",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{zip}",
    "description": "Creates an array of grouped elements, the first of which\ncontains the first elements of the given arrays, the second of\nwhich contains the second elements of the given arrays, and so on.",
    "lineNumber": 526,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Array<T>"
        ],
        "spread": true,
        "optional": false,
        "name": "source",
        "description": "Array to zip."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<D>"
      ],
      "spread": false,
      "description": "Zipped Array."
    }
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "some",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~some",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{some}",
    "description": "Checks if predicate returns truthy for any element of collection.\nIteration is stopped once predicate returns truthy. Is analog of any(*) function.",
    "lineNumber": 541,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "source",
        "description": "The collection to iterate over."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The collection to iterate over."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if any element passes the predicate check, else false."
    }
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "any",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~any",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{any}",
    "description": "Checks if predicate returns truthy for any element of collection.\nIteration is stopped once predicate returns truthy. Is analog some(*) function.",
    "lineNumber": 552,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "source",
        "description": "The collection to iterate over."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The collection to iterate over."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if any element passes the predicate check, else false."
    }
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "last",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~last",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{last}",
    "description": "Will return last element from array. Is analog of tail(*) function.",
    "lineNumber": 561,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "source",
        "description": "Array where to check for last element."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "T"
      ],
      "spread": false,
      "description": "Returns last element from Array."
    }
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "tail",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~tail",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{tail}",
    "description": "Will return last element from array. Is analog of last(*) function.",
    "lineNumber": 570,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "source",
        "description": "Array where to check for last element."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "T"
      ],
      "spread": false,
      "description": "Returns last element from Array."
    }
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "head",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~head",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{head}",
    "description": "Will return first element from array. Is analog of first(*) function.",
    "lineNumber": 579,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "source",
        "description": "Array where to check for first element."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "T"
      ],
      "spread": false,
      "description": "Returns first element from Array."
    }
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "first",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~first",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{first}",
    "description": "Will return first element from array. Is analog of head(*) function.",
    "lineNumber": 588,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "source",
        "description": "Array where to check for first element."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "T"
      ],
      "spread": false,
      "description": "Returns first element from Array."
    }
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "nth",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~nth",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{nth}",
    "description": "Will return element from array by given index.",
    "examples": [
      "nth([51,35,23], 1) // 35"
    ],
    "lineNumber": 601,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Source where should be taken element by given index."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "Index of element which should be returned."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "T"
      ],
      "spread": false,
      "description": "Returns nth element from Array."
    }
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "castArray",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~castArray",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{castArray}",
    "description": "Casts values as an array if it's not one.",
    "lineNumber": 611,
    "params": [
      {
        "nullable": null,
        "types": [
          "...T"
        ],
        "spread": true,
        "optional": false,
        "name": "valueToCast",
        "description": "All values will be included in array that\nwill be returned back."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<T>"
      ],
      "spread": false,
      "description": "Return array that will include all arguments."
    }
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "changeOrder",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~changeOrder",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{changeOrder}",
    "description": "Returns array with changed order.",
    "lineNumber": 621,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Array that should change the order."
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "order",
        "description": "Order Array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<T>"
      ],
      "spread": false,
      "description": "Array with changed order."
    }
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "numAndStrComparator",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~numAndStrComparator",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{numAndStrComparator}",
    "description": "number or string comparator. Can be used in sort function.",
    "examples": [
      "let given = [\n  { 'name': 'fred',   'age': 48 },\n  { 'name': 'barney', 'age': 36 }\n];\n\nnumAndStrComparator(given[0], given[1], 'name'); // 1\nnumAndStrComparator(given[1], given[0],'name'); // -1\nnumAndStrComparator(given[0], given[1],'age'); // 1\nnumAndStrComparator(given[1], given[0],'age'); // -1"
    ],
    "lineNumber": 644,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Comparation result."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "first",
        "description": "First argumnet for comparation."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "second",
        "description": "Second argumnet for comparation."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prop",
        "description": "Compare property."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Comparation result."
    }
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "uniq",
    "memberof": "src/Array/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Array/index.js~uniq",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Array/index.js",
    "importStyle": "{uniq}",
    "description": "returns new array only with uniq elements",
    "examples": [
      "uniq(\n  [\n    { id: 1, firstName: 'Jon', lastName: 'Snow', location: 'Winterfell' },\n    { id: 2, firstName: 'Eddard', lastName: 'Stark', location: 'Winterfell' },\n    { id: 3, firstName: 'Catelyn', lastName: 'Stark', location: 'Winterfell' },\n    { id: 4, firstName: 'Roose', lastName: 'Bolton', location: 'Dreadfort' },\n    { id: 4, firstName: 'Roose', lastName: 'Bolton', location: 'Dreadfort' },\n    { id: 5, firstName: 'Ramsay', lastName: 'Snow', location: 'Dreadfort' }\n  ]);\n// [\n//   { id: 1, firstName: 'Jon', lastName: 'Snow', location: 'Winterfell' },\n//   { id: 2, firstName: 'Eddard', lastName: 'Stark', location: 'Winterfell' },\n//   { id: 3, firstName: 'Catelyn', lastName: 'Stark', location: 'Winterfell' },\n//   { id: 4, firstName: 'Roose', lastName: 'Bolton', location: 'Dreadfort' },\n//   { id: 5, firstName: 'Ramsay', lastName: 'Snow', location: 'Dreadfort' }\n// ]"
    ],
    "lineNumber": 675,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<any>} New array only with unique elements."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Source for uniqueness."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<any>"
      ],
      "spread": false,
      "description": "New array only with unique elements."
    }
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "src/Constants/common.js",
    "content": "export const EMPTY = undefined;\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Constants/common.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "EMPTY",
    "memberof": "src/Constants/common.js",
    "static": true,
    "longname": "src/Constants/common.js~EMPTY",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Constants/common.js",
    "importStyle": "{EMPTY}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "src/Constants/index.js",
    "content": "export * from './types';\nexport * from './common';\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Constants/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/Constants/types.js",
    "content": "export const DATE = 'date';\nexport const UNDEFINED = 'undefined';\nexport const NUMBER = 'number';\nexport const BOOLEAN = 'boolean';\nexport const OBJECT = 'object';\nexport const STRING = 'string';\nexport const SYMBOL = 'symbol';\nexport const REG_EXP = 'regexp';\nexport const ARRAY = 'array';\nexport const FUNCTION = 'function';\nexport const NULL = 'null';\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Constants/types.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "DATE",
    "memberof": "src/Constants/types.js",
    "static": true,
    "longname": "src/Constants/types.js~DATE",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Constants/types.js",
    "importStyle": "{DATE}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "UNDEFINED",
    "memberof": "src/Constants/types.js",
    "static": true,
    "longname": "src/Constants/types.js~UNDEFINED",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Constants/types.js",
    "importStyle": "{UNDEFINED}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "NUMBER",
    "memberof": "src/Constants/types.js",
    "static": true,
    "longname": "src/Constants/types.js~NUMBER",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Constants/types.js",
    "importStyle": "{NUMBER}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "BOOLEAN",
    "memberof": "src/Constants/types.js",
    "static": true,
    "longname": "src/Constants/types.js~BOOLEAN",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Constants/types.js",
    "importStyle": "{BOOLEAN}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "OBJECT",
    "memberof": "src/Constants/types.js",
    "static": true,
    "longname": "src/Constants/types.js~OBJECT",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Constants/types.js",
    "importStyle": "{OBJECT}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "STRING",
    "memberof": "src/Constants/types.js",
    "static": true,
    "longname": "src/Constants/types.js~STRING",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Constants/types.js",
    "importStyle": "{STRING}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "SYMBOL",
    "memberof": "src/Constants/types.js",
    "static": true,
    "longname": "src/Constants/types.js~SYMBOL",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Constants/types.js",
    "importStyle": "{SYMBOL}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "REG_EXP",
    "memberof": "src/Constants/types.js",
    "static": true,
    "longname": "src/Constants/types.js~REG_EXP",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Constants/types.js",
    "importStyle": "{REG_EXP}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "ARRAY",
    "memberof": "src/Constants/types.js",
    "static": true,
    "longname": "src/Constants/types.js~ARRAY",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Constants/types.js",
    "importStyle": "{ARRAY}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "FUNCTION",
    "memberof": "src/Constants/types.js",
    "static": true,
    "longname": "src/Constants/types.js~FUNCTION",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Constants/types.js",
    "importStyle": "{FUNCTION}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "NULL",
    "memberof": "src/Constants/types.js",
    "static": true,
    "longname": "src/Constants/types.js~NULL",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Constants/types.js",
    "importStyle": "{NULL}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "src/Context/index.js",
    "content": "/**\n * @desc Will invoke list of functions with given context.\n * @param {...Function} fns List of functions that should\n * be invoked with given context.\n * @return {object} object that will have a using(*) function. In using\n * function should be passed context object.\n */\nexport function invoke(...fns) {\n  return {\n    using: ctx => {\n      fns.forEach(function(fn) {\n        fn.call(ctx);\n      });\n    }\n  }\n};\n\n/**\n * @desc Is opposite to invoke function.\n * @param {object} ctx Context for all functions that should be invoked.\n * @return {object} Object that will have a invoke(*) function. In invoke\n * function should be passed functions that should be invoked with\n * current context.\n */\nexport function using(ctx) {\n  return {\n    invoke: function(...fns) {\n      fns.forEach(function(fn) {\n        fn.call(ctx);\n      });\n    }\n  }\n};\n\n/**\n * @desc Will invoke list of functions with given context in single invokation.\n * @param {object} ctx Contecxt for all functions that should be invoked.\n * @param {...Function} fns List of functions that should\n * be invoked with given context.\n * @return {void} -\n */\nexport function invokeWithCtx(ctx, ...fns) {\n  using(ctx).invoke(...fns);\n};\n\n/**\n * @desc Will take function, arguments and return function\n * that will invoke given function with given arguments.\n * @param {Function} fn Function that\n * should be wrapped.\n * @param {...T} args List of arguments that should be invoked with given function.\n * @return {void} -\n */\nexport function wrap(fn, ...args) {\n  return function() {\n    fn.call(this, ...args);\n  }\n};\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Context/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "invoke",
    "memberof": "src/Context/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Context/index.js~invoke",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Context/index.js",
    "importStyle": "{invoke}",
    "description": "Will invoke list of functions with given context.",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Function"
        ],
        "spread": true,
        "optional": false,
        "name": "fns",
        "description": "List of functions that should\nbe invoked with given context."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "object that will have a using(*) function. In using\nfunction should be passed context object."
    }
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "using",
    "memberof": "src/Context/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Context/index.js~using",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Context/index.js",
    "importStyle": "{using}",
    "description": "Is opposite to invoke function.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "Context for all functions that should be invoked."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Object that will have a invoke(*) function. In invoke\nfunction should be passed functions that should be invoked with\ncurrent context."
    }
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "invokeWithCtx",
    "memberof": "src/Context/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Context/index.js~invokeWithCtx",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Context/index.js",
    "importStyle": "{invokeWithCtx}",
    "description": "Will invoke list of functions with given context in single invokation.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "Contecxt for all functions that should be invoked."
      },
      {
        "nullable": null,
        "types": [
          "...Function"
        ],
        "spread": true,
        "optional": false,
        "name": "fns",
        "description": "List of functions that should\nbe invoked with given context."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "wrap",
    "memberof": "src/Context/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Context/index.js~wrap",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Context/index.js",
    "importStyle": "{wrap}",
    "description": "Will take function, arguments and return function\nthat will invoke given function with given arguments.",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Function that\nshould be wrapped."
      },
      {
        "nullable": null,
        "types": [
          "...T"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "List of arguments that should be invoked with given function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "src/Data-Structures/index.js",
    "content": "export * from './safe-tuple-builder';\nexport * from './tuple';\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Data-Structures/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/Data-Structures/safe-tuple-builder.js",
    "content": "import { isNull, isUndefined, typeCheck } from '../Type';\n\n/**\n * @desc Creates safe type tuple.\n * @example\n * const expected = ['Barkley', 'Rosser']\n *     , StringPair = SafeTupleBuilder.of(String, String)\n *     , name = new StringPair(...expected)\n *     , [first, last] = name.getAll();\n *\n *    first // Barkley\n *    last // Rosser\n *\n *    name.unpack((first, last) => {\n *      first // Barkley\n *      last // Rosser\n *    });\n *\n *    name.get(0); // Barkley\n *    name.get(1) // Rosser\n *\n */\nexport class SafeTupleBuilder {\n  /**\n   * @desc Creates Safe Type Tuple.\n   * @example\n   * const StringPair = SafeTupleBuilder.of(String, String);\n   *\n   * @param  {...any} types Types which will be checked in newly created tuples.\n   * @returns {Tuple} Returns Safe Tuple.\n   */\n  static of(...types) {\n    return class {\n      constructor(...values) {\n        if (values.some(v => [isNull, isUndefined].some(f => f(v))))\n          throw new ReferenceError('Tuples may not have any null values');\n\n        if (values.length !== types.length)\n          throw new TypeError('Tuple arity does not match its prototype');\n\n        values.forEach((val, index) => {\n          this[`_${index + 1}`] = typeCheck(types[index], val);\n        });\n      }\n      getAll() {\n        return Object.keys(this).map(k => this[k], this);\n      };\n\n      unpack(cb) {\n        cb(...this.getAll());\n      };\n\n      get(index) {\n        return this.getAll()[index];\n      };\n\n      toString() {\n        return `(${this.getAll().join(', ')})`\n      };\n\n      inspect() {\n        return this.toString();\n      };\n    }\n  }\n};\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Data-Structures/safe-tuple-builder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "class",
    "name": "SafeTupleBuilder",
    "memberof": "src/Data-Structures/safe-tuple-builder.js",
    "static": true,
    "longname": "src/Data-Structures/safe-tuple-builder.js~SafeTupleBuilder",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Data-Structures/safe-tuple-builder.js",
    "importStyle": "{SafeTupleBuilder}",
    "description": "Creates safe type tuple.",
    "examples": [
      "const expected = ['Barkley', 'Rosser']\n    , StringPair = SafeTupleBuilder.of(String, String)\n    , name = new StringPair(...expected)\n    , [first, last] = name.getAll();\n\n   first // Barkley\n   last // Rosser\n\n   name.unpack((first, last) => {\n     first // Barkley\n     last // Rosser\n   });\n\n   name.get(0); // Barkley\n   name.get(1) // Rosser"
    ],
    "lineNumber": 23,
    "interface": false
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "of",
    "memberof": "src/Data-Structures/safe-tuple-builder.js~SafeTupleBuilder",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Data-Structures/safe-tuple-builder.js~SafeTupleBuilder.of",
    "access": "public",
    "description": "Creates Safe Type Tuple.",
    "examples": [
      "const StringPair = SafeTupleBuilder.of(String, String);"
    ],
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Tuple} Returns Safe Tuple."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "types",
        "description": "Types which will be checked in newly created tuples."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Tuple"
      ],
      "spread": false,
      "description": "Returns Safe Tuple."
    }
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "src/Data-Structures/tuple.js",
    "content": "/**\n * @desc Tuple implementation.\n * @example\n * let tuple = new Tuple(1, 3);\n *\n */\nexport class Tuple {\n\n  /**\n   * @param  {...any} values Tuple values.\n   */\n  constructor(...values) {\n    values.forEach((val, index) => {\n      this[`_${index + 1}`] = val;\n    });\n  }\n\n  /**\n   * @desc Returns all values.\n   * @example\n   * const expected = ['Barkley', 'Rosser']\n   *     , name = new Tuple(...expected)\n   *     , [first, last] = name.getAll();\n   *\n   * first // Barkley\n   * last // Rosser\n   * @returns {Array<any>} All values.\n   */\n  getAll() {\n    return Object.keys(this).map(k => this[k], this);\n  };\n\n  /**\n   * @desc Invokes callback with all values.\n   * @param {Function} cb Callback which accepts all arguments from\n   * current tuple.\n   * @example\n   * const expected = ['Barkley', 'Rosser']\n   *     , name = new Tuple(...expected);\n\n   * name.unpack((first, last) => {\n   *    first // Barkley\n   *    last // Rosser\n   * });\n   */\n  unpack(cb) {\n    cb(...this.getAll());\n  };\n\n  /**\n   * @desc Returns value from tuple by index.\n   * @param {number} index Index of tuple argument.\n   * @example\n   * const expected = ['Barkley', 'Rosser']\n   *     , name = new Tuple(...expected);\n   *\n   * name.get(0); // Barkley\n   * name.get(1); // Rosser\n   * @returns {any} Value by index from tuple.\n   */\n  get(index) {\n    return this.getAll()[index];\n  };\n\n  /**\n   * @desc Returns string representation of tuple.\n   * @example\n   * const expected = ['Barkley', 'Rosser']\n   *     , name = new Tuple(...expected);\n   *\n   * name // (Barkley, Rosser)\n   *\n   * @returns {string} String representation.\n   */\n  toString() {\n    return `(${this.getAll().join(', ')})`\n  };\n\n  /**\n   * @desc Returns string representation of tuple.\n   * NodeJS analog.\n   * @example\n   * const expected = ['Barkley', 'Rosser']\n   *     , name = new Tuple(...expected);\n   *\n   * name // (Barkley, Rosser)\n   *\n   * @returns {string} String representation.\n   */\n  inspect() {\n    return this.toString();\n  };\n}\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Data-Structures/tuple.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "class",
    "name": "Tuple",
    "memberof": "src/Data-Structures/tuple.js",
    "static": true,
    "longname": "src/Data-Structures/tuple.js~Tuple",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Data-Structures/tuple.js",
    "importStyle": "{Tuple}",
    "description": "Tuple implementation.",
    "examples": [
      "let tuple = new Tuple(1, 3);"
    ],
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 113,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Data-Structures/tuple.js~Tuple",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Data-Structures/tuple.js~Tuple#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "values",
        "description": "Tuple values."
      }
    ]
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "[`_${index + 1}`]",
    "memberof": "src/Data-Structures/tuple.js~Tuple",
    "static": false,
    "longname": "src/Data-Structures/tuple.js~Tuple#[`_${index + 1}`]",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "getAll",
    "memberof": "src/Data-Structures/tuple.js~Tuple",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Data-Structures/tuple.js~Tuple#getAll",
    "access": "public",
    "description": "Returns all values.",
    "examples": [
      "const expected = ['Barkley', 'Rosser']\n    , name = new Tuple(...expected)\n    , [first, last] = name.getAll();\n\nfirst // Barkley\nlast // Rosser"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<any>} All values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<any>"
      ],
      "spread": false,
      "description": "All values."
    },
    "params": []
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "unpack",
    "memberof": "src/Data-Structures/tuple.js~Tuple",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Data-Structures/tuple.js~Tuple#unpack",
    "access": "public",
    "description": "Invokes callback with all values.",
    "examples": [
      "const expected = ['Barkley', 'Rosser']\n    , name = new Tuple(...expected);\n\nname.unpack((first, last) => {\n   first // Barkley\n   last // Rosser\n});"
    ],
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "Callback which accepts all arguments from\ncurrent tuple."
      }
    ],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "get",
    "memberof": "src/Data-Structures/tuple.js~Tuple",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Data-Structures/tuple.js~Tuple#get",
    "access": "public",
    "description": "Returns value from tuple by index.",
    "examples": [
      "const expected = ['Barkley', 'Rosser']\n    , name = new Tuple(...expected);\n\nname.get(0); // Barkley\nname.get(1); // Rosser"
    ],
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any} Value by index from tuple."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "Index of tuple argument."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "Value by index from tuple."
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Data-Structures/tuple.js~Tuple",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Data-Structures/tuple.js~Tuple#toString",
    "access": "public",
    "description": "Returns string representation of tuple.",
    "examples": [
      "const expected = ['Barkley', 'Rosser']\n    , name = new Tuple(...expected);\n\nname // (Barkley, Rosser)"
    ],
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} String representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String representation."
    },
    "params": []
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "inspect",
    "memberof": "src/Data-Structures/tuple.js~Tuple",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Data-Structures/tuple.js~Tuple#inspect",
    "access": "public",
    "description": "Returns string representation of tuple.\nNodeJS analog.",
    "examples": [
      "const expected = ['Barkley', 'Rosser']\n    , name = new Tuple(...expected);\n\nname // (Barkley, Rosser)"
    ],
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} String representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String representation."
    },
    "params": []
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "src/Error/incorrect-args-type-error.js",
    "content": "export class IncorrectArgsTypeError {\n  constructor() {\n    this.message = 'Incorrect arguments were passed';\n    this.name = 'IncorrectArgumentTypeError';\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Error/incorrect-args-type-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "class",
    "name": "IncorrectArgsTypeError",
    "memberof": "src/Error/incorrect-args-type-error.js",
    "static": true,
    "longname": "src/Error/incorrect-args-type-error.js~IncorrectArgsTypeError",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Error/incorrect-args-type-error.js",
    "importStyle": "{IncorrectArgsTypeError}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 122,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Error/incorrect-args-type-error.js~IncorrectArgsTypeError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Error/incorrect-args-type-error.js~IncorrectArgsTypeError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "message",
    "memberof": "src/Error/incorrect-args-type-error.js~IncorrectArgsTypeError",
    "static": false,
    "longname": "src/Error/incorrect-args-type-error.js~IncorrectArgsTypeError#message",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "name",
    "memberof": "src/Error/incorrect-args-type-error.js~IncorrectArgsTypeError",
    "static": false,
    "longname": "src/Error/incorrect-args-type-error.js~IncorrectArgsTypeError#name",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Error/incorrect-args-type-error.js~IncorrectArgsTypeError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Error/incorrect-args-type-error.js~IncorrectArgsTypeError#toString",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "src/Error/index.js",
    "content": "import { IncorrectArgsTypeError } from './incorrect-args-type-error';\n\n\n/**\n * @desc Throws IncorrectArgsTypeError if at least one of conditions is positive.\n * @throws {IncorrectArgsTypeError} throw error when one of conditions is true.\n * @param {...boolean} conditions Conditions which should be negative in order\n * to not throw IncorrectArgsTypeError error.\n */\nexport function throwIncorrectArgsTypeErrorIfSomeOf(...conditions) {\n  if(conditions.some(condition => condition)) throw new IncorrectArgsTypeError();\n}\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Error/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "throwIncorrectArgsTypeErrorIfSomeOf",
    "memberof": "src/Error/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Error/index.js~throwIncorrectArgsTypeErrorIfSomeOf",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Error/index.js",
    "importStyle": "{throwIncorrectArgsTypeErrorIfSomeOf}",
    "description": "Throws IncorrectArgsTypeError if at least one of conditions is positive.",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "...boolean"
        ],
        "spread": true,
        "optional": false,
        "name": "conditions",
        "description": "Conditions which should be negative in order\nto not throw IncorrectArgsTypeError error."
      }
    ],
    "throws": [
      {
        "types": [
          "IncorrectArgsTypeError"
        ],
        "description": "throw error when one of conditions is true."
      }
    ],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "file",
    "name": "src/Fantasy-Land/either.js",
    "content": "/**\n * @desc Either implementation.\n * @example\n * Either.right(3); // Either.Right(3)\n * Either.left(3);  // Either.Left(3)\n * Either.of(3); // Either.Right(3)\n * Either.fromNullable(null); // Either.Left(null)\n * Either.fromNullable(3); // Either.Right(3)\n */\nexport function Either() {};\n\n/**\n * @desc Creates new Left with given value.\n * @example\n * Either.left(3); // Either.Left(3)\n *\n * @returns {Left} Newly created Left with given value.\n */\nEither.left = value => Left(value);\n\n/**\n * @desc Creates new Right with given value.\n * @example\n * Either.right(3); // Either.Right(3)\n *\n * @returns {Right} Newly created Right with given value.\n */\nEither.right = value => Right(value);\n\n/**\n * @desc Checks value and returns Right or Left.\n * @example\n * Either.fromNullable(null); // Either.Left(null)\n * Either.fromNullable(3); // Either.Right(3)\n *\n * @returns {Right|Left} Newly created Right or Left.\n */\nEither.fromNullable = value => value != null ? Either.right(value) : Either.left(value);\n\n/**\n * @desc Creates new Right with given value.\n * @example\n * Either.of(3); // Either.Right(3)\n *\n * @returns {Right} Newly created Right with given value.\n */\nEither.of = value => Either.right(value);\n\n/**\n * @desc Checks is given function throws error and\n * returns Right or Left.\n * @example\n * Either.tryCatch(() => JSON.parse('{\"port\": 8888}'))\n *    .map(c => c.port)\n *    .getOrElse(3000); // 8888\n *\n * Either.tryCatch(() => JSON.parse('incorrect json'))\n *    .map(c => Either.tryCatch(JSON.parse('another incorrect json')))\n *    .getOrElse(3000); // 3000\n *\n * @returns {Right|Left} Result of function with correct container.\n */\nEither.tryCatch = f => {\n  try {\n    return Right(f());\n  } catch (e) {\n    return Left(e);\n  };\n}\n\n/**\n * @desc Right Implementation.\n * @example\n * Either.right(3); // Either.Right(3)\n *\n * @param {any} value Right with given value.\n * @returns {Right} Newly created Right with given value.\n */\nexport function Right(value) {\n  return {\n    getValue: () => value,\n    map: f => Either.of(f(value)),\n    get: () => value,\n    getOrElse: elseValue => value,\n    getOrElseThrow: err => value,\n    orElse: f => Either.of(value),\n    filter: f => Either.fromNullable(f(value) ? value : null),\n    chain: f => f(value),\n    toString: () => `Either.Right(${value})`,\n    inspect: () => `Either.Right(${value})`,\n    isLeft: false,\n    isRight: true\n  }\n}\n\n/**\n * @desc Left Implementation.\n * @example\n * Either.left(3); // Either.Left(3)\n *\n * @param {any} value Left with given value.\n * @returns {Left} Newly created Left with given value.\n */\nexport function Left(value) {\n  return {\n    getValue: () => value,\n    map: f => Left(value),\n    get: () => { throw new TypeError(\"Can't extract the value of a Left.\") },\n    getOrElse: elseValue => elseValue,\n    getOrElseThrow: err => { throw new Error(err) },\n    orElse: f => f(value),\n    filter: f => Left(value),\n    chain: f => Left(value),\n    toString: () => `Either.Left(${value})`,\n    inspect: () => `Either.Left(${value})`,\n    isLeft: true,\n    isRight: false\n  }\n}\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Fantasy-Land/either.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "Either",
    "memberof": "src/Fantasy-Land/either.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/either.js~Either",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Fantasy-Land/either.js",
    "importStyle": "{Either}",
    "description": "Either implementation.",
    "examples": [
      "Either.right(3); // Either.Right(3)\nEither.left(3);  // Either.Left(3)\nEither.of(3); // Either.Right(3)\nEither.fromNullable(null); // Either.Left(null)\nEither.fromNullable(3); // Either.Right(3)"
    ],
    "lineNumber": 10,
    "params": [],
    "return": null
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "Right",
    "memberof": "src/Fantasy-Land/either.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/either.js~Right",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Fantasy-Land/either.js",
    "importStyle": "{Right}",
    "description": "Right Implementation.",
    "examples": [
      "Either.right(3); // Either.Right(3)"
    ],
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Right} Newly created Right with given value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Right with given value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Right"
      ],
      "spread": false,
      "description": "Newly created Right with given value."
    }
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "Left",
    "memberof": "src/Fantasy-Land/either.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/either.js~Left",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Fantasy-Land/either.js",
    "importStyle": "{Left}",
    "description": "Left Implementation.",
    "examples": [
      "Either.left(3); // Either.Left(3)"
    ],
    "lineNumber": 104,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Left} Newly created Left with given value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Left with given value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Left"
      ],
      "spread": false,
      "description": "Newly created Left with given value."
    }
  },
  {
    "__docId__": 132,
    "kind": "file",
    "name": "src/Fantasy-Land/index.js",
    "content": "const fold = x => f => f(x);\nconst apGet = x => v => x(v);\nconst inspect = (x, container) => () => `${container.name}(${x})`;\nconst toString = (x, container) => () => `${container.name}(${x})`;\nconst map = (x, container) => f => container(f(x));\nconst lazyMap = (g, container) => f => container(() => f(g()));\nconst lazyFold = g => f => f(g());\nconst ap = (x, container) => v => container(x(v));\nconst apChain = (f, container) => v => container(f(v.join()));\nconst get = (x) => () => x;\nconst chain = x => f => f(x);\nconst join = x => () => x;\nconst tap = (x, container) => f => {\n  f(x);\n  return container(x);\n};\n\nconst construct = (x, container, ...fns) => {\n  return fns.reduce((acc, fn) =>\n    (Object.assign(acc, { [fn.name]: fn(x, container) })), {});\n}\n\n/**\n * @desc Functor implementation.\n * @example\n * let sideEffectVar = 0\n *   , functor = Functor('  64  ')\n *      .map(s => s.trim())\n *      .map(r => parseInt(r))\n *      .tap(v => sideEffectVar = 3)\n *      .map(i => i + 1)\n *      .map(i => String.fromCharCode(i));\n *\n *  functor.fold(identity); // 'A'\n *  functor.get(); // 'A'\n *  sideEffectVar; // 3\n *  functor.toString(); // 'Functor(A)'\n *  functor.inspect(); // 'Functor(A)'\n *\n * @param {any} x Functor value.\n * @returns {Functor} Functor with current value.\n */\nexport function Functor(x) {\n  return construct(x, Functor, map, inspect, toString, tap, fold, get);\n};\n\n/**\n * @desc LazyFunctor implementation.\n * @example\n * let wasInvoked = false;\n * let multiplyWithInvokeUpdate = x => {\n *    wasInvoked = true;\n *    return x * x;\n * }\n *\n * isNotNumber(\n *    LazyFunctor(() => 7)\n *       .lazyMap(multiplyWithInvokeUpdate)\n *       .lazyMap(x => x  * 100)\n * );\n *\n * wasInvoked; // false\n *\n * isNumber(\n *    LazyFunctor(() => 7)\n *       .lazyMap(multiplyWithInvokeUpdate)\n *       .lazyMap(x => x  * 100)\n *       .lazyFold(identity)\n * );\n *\n * wasInvoked; // true\n *\n *  LazyFunctor(() => 7)\n *    .lazyMap(multiplyWithInvokeUpdate)\n *    .lazyMap(x => x  * 10)\n *    .lazyFold(identity); // 490\n *\n * @param {any} x LazyFunctor value.\n * @returns {LazyFunctor} LazyFunctor with current value.\n */\nexport function LazyFunctor(x) {\n  return construct(x, LazyFunctor, lazyMap, lazyFold)\n}\n\n/**\n * @desc Apply implementation.\n * @example\n * let sideEffectVar = 0\n *   , curry2Add = x => y => x + y\n *   , apply = Apply(curry2Add)\n *      .tap(() => sideEffectVar = 3);\n *\n *  sideEffectVar; // 3\n *  isFunction(apply.get()); // true\n *  isFunction(apply.fold(identity)); // true\n *  isFunction(apply.ap(2).get()); // true\n *  apply.ap(2).ap(3).get(); // 5\n *  apply.ap(2).apGet(3); // 5\n *  apply.ap(2).ap(3).toString(); // 'Apply(5)'\n *  apply.ap(2).ap(3).inspect(); // 'Apply(5)');\n *  apply\n *    .ap(2)\n *    .ap(3)\n *    .map(n => `Number is ${n}`)\n *    .get(); // 'Number is 5'\n *\n * @param {any} f Apply value.\n * @returns {Apply} Apply with current value.\n */\nexport function Apply(f) {\n  return construct(f, Apply, map, inspect, toString, tap, fold, get, apGet, ap);\n};\n\n/**\n * @desc Appicative implementation.\n * @example\n * @example\n * let sideEffectVar = 0\n *   , curry2Add = x => y => x + y\n *   , applicative = Applicative.of(curry2Add)\n *      .tap(() => sideEffectVar = 3);\n *\n *  sideEffectVar; // 3\n *  isFunction(applicative.get()); // true\n *  isFunction(applicative.fold(identity)); // true\n *  isFunction(applicative.ap(2).get()); // true\n *  applicative.ap(2).ap(3).get(); // 5\n *  applicative.ap(2).apGet(3); // 5\n *  applicative.ap(2).ap(3).toString(); // 'Apply(5)'\n *  applicative.ap(2).ap(3).inspect(); // 'Apply(5)');\n *  applicative\n *    .ap(2)\n *    .ap(3)\n *    .map(n => `Number is ${n}`)\n *    .get(); // 'Number is 5'\n *\n * @param {any} f Appicative value.\n * @returns {Appicative} Appicative with current value.\n */\nexport function Applicative(f) {\n  return construct(f, Applicative, map, inspect, toString, tap, fold, get, apGet, ap);\n};\n\n/**\n * @desc Creates Appicative container.\n * @example\n * let applicative = Applicative.of(curry2Add);\n *\n * @param {any} f Appicative value.\n * @returns {Appicative} Appicative with current value.\n */\nApplicative.of = x => Applicative(x);\n\n/**\n * @desc Monad implementation.\n * @example\n * let sideEffectVar = 0\n *   , curry2Add = x => y => x + y\n *   , monad = Monad.of(curry2Add)\n *      .tap(() => sideEffectVar = 3);\n *\n * sideEffectVar; // 3\n * isFunction(monad.get()); // true\n * isFunction(monad.fold(identity)); // true\n * isFunction(monad.ap(2).get()); // true\n * monad.ap(2).ap(3).get(); // 5\n * monad.ap(2).apGet(3); // 5\n * monad.ap(2).ap(3).toString() // 'Monad(5)'\n * monad.ap(2).ap(3).inspect(); // 'Monad(5)'\n *\n * monad\n *   .ap(2)\n *   .ap(3)\n *   .map(n => `Number is ${n}`)\n *   .get(); // 'Number is 5'\n *\n * monad\n *   .ap(2)\n *   .ap(3)\n *   .chain(v => Monad.of(v * v))\n *   .get(); // 25\n *\n * monad\n *   .ap(2)\n *   .ap(3)\n *   .map(v => Monad.of(v * v))\n *   .join()\n *   .get(); // 25\n *\n * monad\n *   .ap(3)\n *   .apChain(Monad.of(2))\n *   .get(); // 5\n *\n * @param {any} x Monad value.\n * @returns {Monad} Monad with current value.\n */\nexport function Monad(x) {\n  return construct(x, Monad, map, inspect, toString, tap, fold, get, apGet, ap, apChain, chain, join);\n}\n\n/**\n * @desc Creates Monad container.\n * @example\n * let monad = Monad.of(3);\n *\n * @param {any} x Monad value.\n * @returns {Monad} Monad with current value.\n */\nMonad.of = x => Monad(x);\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Fantasy-Land/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 133,
    "kind": "function",
    "name": "fold",
    "memberof": "src/Fantasy-Land/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/index.js~fold",
    "access": "public",
    "export": false,
    "importPath": "js-helpers/src/Fantasy-Land/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "apGet",
    "memberof": "src/Fantasy-Land/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/index.js~apGet",
    "access": "public",
    "export": false,
    "importPath": "js-helpers/src/Fantasy-Land/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "function",
    "name": "inspect",
    "memberof": "src/Fantasy-Land/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/index.js~inspect",
    "access": "public",
    "export": false,
    "importPath": "js-helpers/src/Fantasy-Land/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "container",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "toString",
    "memberof": "src/Fantasy-Land/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/index.js~toString",
    "access": "public",
    "export": false,
    "importPath": "js-helpers/src/Fantasy-Land/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "container",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "function",
    "name": "map",
    "memberof": "src/Fantasy-Land/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/index.js~map",
    "access": "public",
    "export": false,
    "importPath": "js-helpers/src/Fantasy-Land/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "container",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "lazyMap",
    "memberof": "src/Fantasy-Land/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/index.js~lazyMap",
    "access": "public",
    "export": false,
    "importPath": "js-helpers/src/Fantasy-Land/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "g",
        "types": [
          "*"
        ]
      },
      {
        "name": "container",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 139,
    "kind": "function",
    "name": "lazyFold",
    "memberof": "src/Fantasy-Land/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/index.js~lazyFold",
    "access": "public",
    "export": false,
    "importPath": "js-helpers/src/Fantasy-Land/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "g",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "function",
    "name": "ap",
    "memberof": "src/Fantasy-Land/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/index.js~ap",
    "access": "public",
    "export": false,
    "importPath": "js-helpers/src/Fantasy-Land/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "container",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "apChain",
    "memberof": "src/Fantasy-Land/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/index.js~apChain",
    "access": "public",
    "export": false,
    "importPath": "js-helpers/src/Fantasy-Land/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      },
      {
        "name": "container",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "get",
    "memberof": "src/Fantasy-Land/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/index.js~get",
    "access": "public",
    "export": false,
    "importPath": "js-helpers/src/Fantasy-Land/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "chain",
    "memberof": "src/Fantasy-Land/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/index.js~chain",
    "access": "public",
    "export": false,
    "importPath": "js-helpers/src/Fantasy-Land/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "join",
    "memberof": "src/Fantasy-Land/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/index.js~join",
    "access": "public",
    "export": false,
    "importPath": "js-helpers/src/Fantasy-Land/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "tap",
    "memberof": "src/Fantasy-Land/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/index.js~tap",
    "access": "public",
    "export": false,
    "importPath": "js-helpers/src/Fantasy-Land/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "container",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "construct",
    "memberof": "src/Fantasy-Land/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/index.js~construct",
    "access": "public",
    "export": false,
    "importPath": "js-helpers/src/Fantasy-Land/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "container",
        "types": [
          "*"
        ]
      },
      {
        "name": "fns",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 147,
    "kind": "function",
    "name": "Functor",
    "memberof": "src/Fantasy-Land/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/index.js~Functor",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Fantasy-Land/index.js",
    "importStyle": "{Functor}",
    "description": "Functor implementation.",
    "examples": [
      "let sideEffectVar = 0\n  , functor = Functor('  64  ')\n     .map(s => s.trim())\n     .map(r => parseInt(r))\n     .tap(v => sideEffectVar = 3)\n     .map(i => i + 1)\n     .map(i => String.fromCharCode(i));\n\n functor.fold(identity); // 'A'\n functor.get(); // 'A'\n sideEffectVar; // 3\n functor.toString(); // 'Functor(A)'\n functor.inspect(); // 'Functor(A)'"
    ],
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Functor} Functor with current value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Functor value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Functor"
      ],
      "spread": false,
      "description": "Functor with current value."
    }
  },
  {
    "__docId__": 148,
    "kind": "function",
    "name": "LazyFunctor",
    "memberof": "src/Fantasy-Land/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/index.js~LazyFunctor",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Fantasy-Land/index.js",
    "importStyle": "{LazyFunctor}",
    "description": "LazyFunctor implementation.",
    "examples": [
      "let wasInvoked = false;\nlet multiplyWithInvokeUpdate = x => {\n   wasInvoked = true;\n   return x * x;\n}\n\nisNotNumber(\n   LazyFunctor(() => 7)\n      .lazyMap(multiplyWithInvokeUpdate)\n      .lazyMap(x => x  * 100)\n);\n\nwasInvoked; // false\n\nisNumber(\n   LazyFunctor(() => 7)\n      .lazyMap(multiplyWithInvokeUpdate)\n      .lazyMap(x => x  * 100)\n      .lazyFold(identity)\n);\n\nwasInvoked; // true\n\n LazyFunctor(() => 7)\n   .lazyMap(multiplyWithInvokeUpdate)\n   .lazyMap(x => x  * 10)\n   .lazyFold(identity); // 490"
    ],
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{LazyFunctor} LazyFunctor with current value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "LazyFunctor value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "LazyFunctor"
      ],
      "spread": false,
      "description": "LazyFunctor with current value."
    }
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "Apply",
    "memberof": "src/Fantasy-Land/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/index.js~Apply",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Fantasy-Land/index.js",
    "importStyle": "{Apply}",
    "description": "Apply implementation.",
    "examples": [
      "let sideEffectVar = 0\n  , curry2Add = x => y => x + y\n  , apply = Apply(curry2Add)\n     .tap(() => sideEffectVar = 3);\n\n sideEffectVar; // 3\n isFunction(apply.get()); // true\n isFunction(apply.fold(identity)); // true\n isFunction(apply.ap(2).get()); // true\n apply.ap(2).ap(3).get(); // 5\n apply.ap(2).apGet(3); // 5\n apply.ap(2).ap(3).toString(); // 'Apply(5)'\n apply.ap(2).ap(3).inspect(); // 'Apply(5)');\n apply\n   .ap(2)\n   .ap(3)\n   .map(n => `Number is ${n}`)\n   .get(); // 'Number is 5'"
    ],
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Apply} Apply with current value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "Apply value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Apply"
      ],
      "spread": false,
      "description": "Apply with current value."
    }
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "Applicative",
    "memberof": "src/Fantasy-Land/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/index.js~Applicative",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Fantasy-Land/index.js",
    "importStyle": "{Applicative}",
    "description": "Appicative implementation.",
    "examples": [
      "",
      "let sideEffectVar = 0\n  , curry2Add = x => y => x + y\n  , applicative = Applicative.of(curry2Add)\n     .tap(() => sideEffectVar = 3);\n\n sideEffectVar; // 3\n isFunction(applicative.get()); // true\n isFunction(applicative.fold(identity)); // true\n isFunction(applicative.ap(2).get()); // true\n applicative.ap(2).ap(3).get(); // 5\n applicative.ap(2).apGet(3); // 5\n applicative.ap(2).ap(3).toString(); // 'Apply(5)'\n applicative.ap(2).ap(3).inspect(); // 'Apply(5)');\n applicative\n   .ap(2)\n   .ap(3)\n   .map(n => `Number is ${n}`)\n   .get(); // 'Number is 5'"
    ],
    "lineNumber": 140,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Appicative} Appicative with current value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "Appicative value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Appicative"
      ],
      "spread": false,
      "description": "Appicative with current value."
    }
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "Monad",
    "memberof": "src/Fantasy-Land/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/index.js~Monad",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Fantasy-Land/index.js",
    "importStyle": "{Monad}",
    "description": "Monad implementation.",
    "examples": [
      "let sideEffectVar = 0\n  , curry2Add = x => y => x + y\n  , monad = Monad.of(curry2Add)\n     .tap(() => sideEffectVar = 3);\n\nsideEffectVar; // 3\nisFunction(monad.get()); // true\nisFunction(monad.fold(identity)); // true\nisFunction(monad.ap(2).get()); // true\nmonad.ap(2).ap(3).get(); // 5\nmonad.ap(2).apGet(3); // 5\nmonad.ap(2).ap(3).toString() // 'Monad(5)'\nmonad.ap(2).ap(3).inspect(); // 'Monad(5)'\n\nmonad\n  .ap(2)\n  .ap(3)\n  .map(n => `Number is ${n}`)\n  .get(); // 'Number is 5'\n\nmonad\n  .ap(2)\n  .ap(3)\n  .chain(v => Monad.of(v * v))\n  .get(); // 25\n\nmonad\n  .ap(2)\n  .ap(3)\n  .map(v => Monad.of(v * v))\n  .join()\n  .get(); // 25\n\nmonad\n  .ap(3)\n  .apChain(Monad.of(2))\n  .get(); // 5"
    ],
    "lineNumber": 198,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Monad} Monad with current value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Monad value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Monad"
      ],
      "spread": false,
      "description": "Monad with current value."
    }
  },
  {
    "__docId__": 152,
    "kind": "file",
    "name": "src/Fantasy-Land/maybe.js",
    "content": "/**\n * @desc Maybe implementation.\n * @example\n * Maybe.just(3); // Maybe.Just(3)\n * Maybe.nothing(3);  // Maybe.Nothing()\n * Maybe.of(3); // Maybe.Just(3)\n * Maybe.fromNullable(null); // Maybe.Nothing()\n * Maybe.fromNullable(3); // Maybe.Just(3)\n */\nexport function Maybe() {}\n\n/**\n * @desc Creates new Just with given value.\n * @example\n * Maybe.just(3); // Maybe.Just(3)\n *\n * @returns {Just} Newly created Just with given value.\n */\nMaybe.just = v => Just(v);\n\n/**\n * @desc Creates new Nothing.\n * @example\n * Maybe.nothing(); // Maybe.Nothing()\n *\n * @returns {Nothing} Newly created Nothing.\n */\nMaybe.nothing = v => Nothing(v);\n\n/**\n * @desc Checks value and returns Just or Nothing.\n * @example\n * Maybe.fromNullable(null); // Maybe.Nothing()\n * Maybe.fromNullable(3); // Maybe.Just(3)\n *\n * @returns {Just|Nothing} Newly created Just or Nothing.\n */\nMaybe.fromNullable = v => v != null ? Maybe.just(v) : Maybe.nothing(v);\n\n/**\n * @desc Creates new Just with given value.\n * @example\n * Maybe.of(3); // Maybe.Just(3)\n *\n * @returns {Just} Newly created Just with given value.\n */\nMaybe.of = v => Maybe.just(v);\n\n/**\n * @desc Just Implementation.\n * @example\n * Maybe.just(3); // Maybe.Just(3)\n *\n * @param {any} value Just with given value.\n * @returns {Just} Newly created Just with given value.\n */\nexport function Just(value) {\n  return {\n    getValue: () => value,\n    map: f => Maybe.fromNullable(f(value)),\n    get: () => value,\n    getOrElse: elseValue => value,\n    filter: f => Maybe.fromNullable(f(value) ? value : null),\n    chain: f => f(value),\n    toString: () => `Maybe.Just(${value})`,\n    inspect: () => `Maybe.Just(${value})`,\n    isNothing: false,\n    isJust: true\n  }\n}\n\n/**\n * @desc Creates new Nothing.\n * @example\n * Maybe.nothing(); // Maybe.Nothing()\n *\n * @param {any} value Nothing value.\n * @returns {Nothing} Newly created Nothing.\n */\nexport function Nothing(value) {\n  return {\n    getValue: () => value,\n    map: f => Nothing(value),\n    get: () => { throw new TypeError(\"Can't extract the value of a Nothing.\") },\n    getOrElse: (elseValue) => elseValue,\n    filter: f => Nothing(value),\n    chain: f => Nothing(value),\n    toString: () => `Maybe.Nothing()`,\n    inspect: () => `Maybe.Nothing()`,\n    isNothing: true,\n    isJust: false\n  }\n}\n\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Fantasy-Land/maybe.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "Maybe",
    "memberof": "src/Fantasy-Land/maybe.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/maybe.js~Maybe",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Fantasy-Land/maybe.js",
    "importStyle": "{Maybe}",
    "description": "Maybe implementation.",
    "examples": [
      "Maybe.just(3); // Maybe.Just(3)\nMaybe.nothing(3);  // Maybe.Nothing()\nMaybe.of(3); // Maybe.Just(3)\nMaybe.fromNullable(null); // Maybe.Nothing()\nMaybe.fromNullable(3); // Maybe.Just(3)"
    ],
    "lineNumber": 10,
    "params": [],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "Just",
    "memberof": "src/Fantasy-Land/maybe.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/maybe.js~Just",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Fantasy-Land/maybe.js",
    "importStyle": "{Just}",
    "description": "Just Implementation.",
    "examples": [
      "Maybe.just(3); // Maybe.Just(3)"
    ],
    "lineNumber": 57,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Just} Newly created Just with given value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Just with given value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Just"
      ],
      "spread": false,
      "description": "Newly created Just with given value."
    }
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "Nothing",
    "memberof": "src/Fantasy-Land/maybe.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/maybe.js~Nothing",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Fantasy-Land/maybe.js",
    "importStyle": "{Nothing}",
    "description": "Creates new Nothing.",
    "examples": [
      "Maybe.nothing(); // Maybe.Nothing()"
    ],
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Nothing} Newly created Nothing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Nothing value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Nothing"
      ],
      "spread": false,
      "description": "Newly created Nothing."
    }
  },
  {
    "__docId__": 156,
    "kind": "file",
    "name": "src/Fantasy-Land/setoid.js",
    "content": "import { deepClone } from '../Object';\nimport { isFunction, isBoolean, isObject } from '../Type';\n\n/**\n * @desc Creates Setoid from given function.\n * @example\n * const comparePeopleFn = (p, p2) => p.id === p2.id;\n * const PersonSetoid = toSetoid(comparePeopleFn);\n * const person1 = { id: 1, name: 'Oleh' };\n * const person2 = { id: 1, name: 'Oleh' };\n * const person3 = { id: 7, name: 'Oleh' };\n *\n * PersonSetoid(person1).equals(PersonSetoid(person2))); // true\n * PersonSetoid(person2).equals(PersonSetoid(person1))); // true\n *\n * PersonSetoid(person1).equals(PersonSetoid(person3))); // false\n * PersonSetoid(person2).equals(PersonSetoid(person3))); // false\n *\n * Object.keys(PersonSetoid(person1)); // ['id', 'name'];\n *\n * @param {Function} eqFn Setoid implementation function.\n * @returns {Setoid} New concrete Setoid implementation.\n */\nexport function toSetoid(eqFn) {\n  return x =>\n    Object.defineProperty(deepClone(x), 'equals', {\n      value: x2 => eqFn(x, x2),\n      enumerable: false,\n      writable: false,\n      configurable: false\n    });\n}\n\n/**\n * @desc Checks if passed object implements setoid.\n * @example\n * const comparePeopleFn = (p, p2) => p.id === p2.id;\n * const PersonSetoid = toSetoid(comparePeopleFn);\n * const person1 = { id: 1, name: 'Oleh' }\n * const person2 = {\n *    id: 2,\n *    name: 'Oleh',\n *    equals: p => true\n * };\n *\n * isSetoid(PersonSetoid(person1)); // true\n * isSetoid(person1); // false\n * isSetoid(person2); // false\n *\n * @param {object} obj Object to check.\n * @returns {boolean} true in case is passed object implements Setoid.\n */\nexport function isSetoid(obj) {\n  return isObject(obj) && isFunction(obj.equals) &&\n    obj.equals.length === 1 && isBoolean(obj.equals(obj)) &&\n      obj.equals(obj) && !obj.equals({});\n}\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Fantasy-Land/setoid.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "toSetoid",
    "memberof": "src/Fantasy-Land/setoid.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/setoid.js~toSetoid",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Fantasy-Land/setoid.js",
    "importStyle": "{toSetoid}",
    "description": "Creates Setoid from given function.",
    "examples": [
      "const comparePeopleFn = (p, p2) => p.id === p2.id;\nconst PersonSetoid = toSetoid(comparePeopleFn);\nconst person1 = { id: 1, name: 'Oleh' };\nconst person2 = { id: 1, name: 'Oleh' };\nconst person3 = { id: 7, name: 'Oleh' };\n\nPersonSetoid(person1).equals(PersonSetoid(person2))); // true\nPersonSetoid(person2).equals(PersonSetoid(person1))); // true\n\nPersonSetoid(person1).equals(PersonSetoid(person3))); // false\nPersonSetoid(person2).equals(PersonSetoid(person3))); // false\n\nObject.keys(PersonSetoid(person1)); // ['id', 'name'];"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Setoid} New concrete Setoid implementation."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "eqFn",
        "description": "Setoid implementation function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Setoid"
      ],
      "spread": false,
      "description": "New concrete Setoid implementation."
    }
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "isSetoid",
    "memberof": "src/Fantasy-Land/setoid.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Fantasy-Land/setoid.js~isSetoid",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Fantasy-Land/setoid.js",
    "importStyle": "{isSetoid}",
    "description": "Checks if passed object implements setoid.",
    "examples": [
      "const comparePeopleFn = (p, p2) => p.id === p2.id;\nconst PersonSetoid = toSetoid(comparePeopleFn);\nconst person1 = { id: 1, name: 'Oleh' }\nconst person2 = {\n   id: 2,\n   name: 'Oleh',\n   equals: p => true\n};\n\nisSetoid(PersonSetoid(person1)); // true\nisSetoid(person1); // false\nisSetoid(person2); // false"
    ],
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true in case is passed object implements Setoid."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "Object to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true in case is passed object implements Setoid."
    }
  },
  {
    "__docId__": 159,
    "kind": "file",
    "name": "src/Function/index.js",
    "content": "import * as ArrLib from '../Array';\nimport { isNotFunction } from '../Type';\n\n/**\n * @desc Creates a function that accepts arguments of func and either\n * invokes func returning its result, if at least arity number\n * of arguments have been provided, or returns a function that\n * accepts the remaining func arguments, and so on. The arity\n * of func may be specified if func.length is not sufficient.\n * @param {Function} fn Function for Curring.\n * @return {Function|T} Function that should collect arguments.\n */\nexport function curry(fn) {\n  return function curriedFn(...args) {\n    if(args.length < fn.length) {\n      return function() {\n        return curriedFn.call(null, ...args, ...Array.from(arguments)); };\n      };\n    return fn.apply(null, args);\n  };\n}\n\n/**\n * @desc Creates a function that invokes fn with partials prepended\n * to the arguments it receives.\n * @param {Function} fn The function to partially apply arguments to.\n * @param {...T} partialArgs Arguments that should be applied.\n * @return {Function} Returns the new partially applied function.\n */\nexport function partial(fn, ...partialArgs) {\n  let fnArgsLength = fn.length\n    , fnArgs = partialArgs\n    , canInvokeFn = () =>\n      fnArgs.length >= fnArgsLength && ArrLib.compact(fnArgs).length >= fnArgsLength\n    , getArgs = (...newArgs) => {\n      fnArgs = ArrLib.times(fnArgsLength, index => fnArgs[index] || newArgs.pop());\n      return (canInvokeFn()) ? fn(...fnArgs) : getArgs;\n    }\n\n  return getArgs;\n}\n\n/**\n * @desc This method is like pipe except that it creates a function that\n * invokes the provided functions from right to left.\n * @param {...Function} fns Function that should be invoked with given arguments.\n * @return {Function} Returns the new function.\n */\nexport function compose(...fns) {\n  return val =>\n    fns.reverse().reduce((accumulator, fn) =>\n      fn(accumulator), val);\n}\n\n/**\n * @desc Creates a function that returns the result of invoking the provided f\n * unctions with the this binding of the created function, where each successive\n * invocation is supplied the return value of the previous.\n * @param {...Function} fns Function that should be invoked with given arguments.\n * @return {Function} Returns the new function.\n */\nexport function pipe(...fns) {\n  return (...vals) =>\n    fns.reduce((accumulator, fn) =>\n      fn(accumulator), fns.shift()(...vals));\n}\n\n/**\n * @desc Creates a function that memoizes the result of fn.\n * If resolver is provided, it determines the cache key for storing\n * the result based on the arguments provided to the memoized function.\n * By default, the first argument provided to the memoized function is\n * used as the map cache key.\n * @param {Function} fn Function to memoize.\n * @return {Function} Memoized function.\n */\nexport function memoize(fn) {\n  let lookupTable = {};\n  return arg => (lookupTable[arg] ||\n    (lookupTable[arg] = fn(arg)));\n};\n\n/**\n * @desc Creates a function that is restricted to invoking func once.\n * Repeat calls to the function return undefined.\n * @param {Function} fn Function that should be invoked only once.\n * @return {T|undefined} Returns invocation result of passed function.\n */\nexport function once(fn) {\n  let isDone = false;\n  return () => isDone ? undefined : ((isDone = true), fn.apply(this, arguments));\n};\n\n/**\n * @desc Create funtion that makes same as passed function but newly created\n * function will use only first argument.\n * @param {Function} fn Function that should use only one argument.\n * @return {Function} Same function that was passed but now it uses only\n * first argument.\n */\nexport function unary(fn) {\n  return fn.length === 1\n    ? fn : (arg) => fn(arg);\n};\n\n/**\n * @desc Reorginizes argument order.\n * @param {Function} fn Function that should be invoked with\n * reorganized argument order.\n * @param {Array<number>} order Argument order.\n */\nexport function rearg(fn, order) {\n  return (...values) =>\n    fn(...ArrLib.changeOrder(values, order));\n};\n\n/**\n * Creates a function that invokes fn once it's called n or more times.\n * @param {number} count The number of calls before func is invoked.\n * @param {Function} fn The function to restrict.\n * @returns {Function} Function that invokes fn once it's called n or more times.\n */\nexport function after(count, fn){\n  let runCount = 0;\n  return function() {\n    runCount = runCount + 1;\n    if (runCount >= count) {\n      return fn.apply(this, arguments);\n    }\n  }\n}\n\n/**\n * @desc Creates curry variation of function if some of\n * arguments are missed.\n * @param {Function} fn Function for Curring.\n * @param {ArrayLike|Array<any>} args Arguments which should be invoked woith passed function.\n * @return {Function|T} Function that should collect arguments or result on invokation.\n */\nexport function orCurry(fn, args) {\n  if(isNotFunction(fn)) return orCurry;\n\n  let argsWithoutUndefined = Array.from(args)\n    .filter(i => i !== undefined);\n\n  return fn.length === argsWithoutUndefined.length\n    ? fn(...argsWithoutUndefined)\n    : curry(fn)(...argsWithoutUndefined);\n}\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Function/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "function",
    "name": "curry",
    "memberof": "src/Function/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Function/index.js~curry",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Function/index.js",
    "importStyle": "{curry}",
    "description": "Creates a function that accepts arguments of func and either\ninvokes func returning its result, if at least arity number\nof arguments have been provided, or returns a function that\naccepts the remaining func arguments, and so on. The arity\nof func may be specified if func.length is not sufficient.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Function for Curring."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function",
        "T"
      ],
      "spread": false,
      "description": "Function that should collect arguments."
    }
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "partial",
    "memberof": "src/Function/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Function/index.js~partial",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Function/index.js",
    "importStyle": "{partial}",
    "description": "Creates a function that invokes fn with partials prepended\nto the arguments it receives.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to partially apply arguments to."
      },
      {
        "nullable": null,
        "types": [
          "...T"
        ],
        "spread": true,
        "optional": false,
        "name": "partialArgs",
        "description": "Arguments that should be applied."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Returns the new partially applied function."
    }
  },
  {
    "__docId__": 162,
    "kind": "function",
    "name": "compose",
    "memberof": "src/Function/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Function/index.js~compose",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Function/index.js",
    "importStyle": "{compose}",
    "description": "This method is like pipe except that it creates a function that\ninvokes the provided functions from right to left.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Function"
        ],
        "spread": true,
        "optional": false,
        "name": "fns",
        "description": "Function that should be invoked with given arguments."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Returns the new function."
    }
  },
  {
    "__docId__": 163,
    "kind": "function",
    "name": "pipe",
    "memberof": "src/Function/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Function/index.js~pipe",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Function/index.js",
    "importStyle": "{pipe}",
    "description": "Creates a function that returns the result of invoking the provided f\nunctions with the this binding of the created function, where each successive\ninvocation is supplied the return value of the previous.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Function"
        ],
        "spread": true,
        "optional": false,
        "name": "fns",
        "description": "Function that should be invoked with given arguments."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Returns the new function."
    }
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "memoize",
    "memberof": "src/Function/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Function/index.js~memoize",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Function/index.js",
    "importStyle": "{memoize}",
    "description": "Creates a function that memoizes the result of fn.\nIf resolver is provided, it determines the cache key for storing\nthe result based on the arguments provided to the memoized function.\nBy default, the first argument provided to the memoized function is\nused as the map cache key.",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Function to memoize."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Memoized function."
    }
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "once",
    "memberof": "src/Function/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Function/index.js~once",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Function/index.js",
    "importStyle": "{once}",
    "description": "Creates a function that is restricted to invoking func once.\nRepeat calls to the function return undefined.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Function that should be invoked only once."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "T",
        "undefined"
      ],
      "spread": false,
      "description": "Returns invocation result of passed function."
    }
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "unary",
    "memberof": "src/Function/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Function/index.js~unary",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Function/index.js",
    "importStyle": "{unary}",
    "description": "Create funtion that makes same as passed function but newly created\nfunction will use only first argument.",
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Function that should use only one argument."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Same function that was passed but now it uses only\nfirst argument."
    }
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "rearg",
    "memberof": "src/Function/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Function/index.js~rearg",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Function/index.js",
    "importStyle": "{rearg}",
    "description": "Reorginizes argument order.",
    "lineNumber": 112,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Function that should be invoked with\nreorganized argument order."
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "order",
        "description": "Argument order."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "after",
    "memberof": "src/Function/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Function/index.js~after",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Function/index.js",
    "importStyle": "{after}",
    "description": "Creates a function that invokes fn once it's called n or more times.",
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} Function that invokes fn once it's called n or more times."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "The number of calls before func is invoked."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to restrict."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Function that invokes fn once it's called n or more times."
    }
  },
  {
    "__docId__": 169,
    "kind": "function",
    "name": "orCurry",
    "memberof": "src/Function/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Function/index.js~orCurry",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Function/index.js",
    "importStyle": "{orCurry}",
    "description": "Creates curry variation of function if some of\narguments are missed.",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Function for Curring."
      },
      {
        "nullable": null,
        "types": [
          "ArrayLike",
          "Array<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Arguments which should be invoked woith passed function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function",
        "T"
      ],
      "spread": false,
      "description": "Function that should collect arguments or result on invokation."
    }
  },
  {
    "__docId__": 170,
    "kind": "file",
    "name": "src/Function-Combinators/index.js",
    "content": "import { isFunction } from '../Type';\n\n/**\n * @desc The identity combinator is a function that returns the\n * same value it was provided as an argument.\n * I - combinator implementation.\n * @example\n * identity(2); // 2\n *\n * @param {T} value Argument that should returned back.\n * @return {T} Returns same value which was passed.\n */\nexport function identity(value) {\n  return value;\n};\n\n/**\n * @desc Creates function which will always return passed argument.\n * K - combinator implementation.\n * @example\n * always(2)(); // 2\n *\n * @param {T} value Argument that should returned back from function which was returned.\n * @return {Function} Returns function which will always return first passed argument.\n */\nexport function always(value) {\n  return () => value;\n};\n\n/**\n * @desc Takes function and changes argument order.\n * C - combinator implementation.\n * @example\n * const concat2Words = w1 => w2 => `${w1} ${w2}`;\n *\n * flip(concat2Words)('world')('hello'); // 'hello world'\n *\n * @param {Function} fn Function which will be invoked with fliped arguments.\n * @returns {Function} Function which expects to get first argument,\n * which will be used as a second argument.\n */\nexport function flip(fn) {\n  return a => b => fn(b)(a);\n}\n\n/**\n * @desc Takes argument and returns function which expects to get\n * function which will be invoked with first argument.\n * T - combinator implementation.\n * @example\n * const addWorld = w => `${w} world`;\n *\n * thrush('hello')(addWorld); // 'hello world'\n *\n * @param {any} x Argument which will be passed into a function\n * which is expected as a second argument.\n * @returns {Function} Function which expects to get function\n * where will be passed first argument.\n */\nexport function thrush(x) {\n  return f => f(x);\n}\n\n/**\n * @desc Takes function and invokes it with passed argument two times.\n * @example\n * const add = x => y => x + y;\n *\n * duplication(add)(7); // 14\n *\n * @param {Function} fn Function which will be invoked two times\n * with the same argument.\n * @returns {Function} Function which expects for argument.\n */\nexport function duplication(fn) {\n  return x => fn(x)(x);\n}\n\n/**\n * @desc The fork combinator is useful in cases where you need to process a single resource\n * in two different ways and then combine the results. This combinator takes three functions:\n * a join function and two terminal functions that process the provided input. The result of\n * each forked function is ultimately passed in to a join function of two arguments.\n * @example\n * const calc = fork(multiply, x => x + x, identity);\n * calc(2); // 8\n *\n * @param {Function} join Argument that should returned back from function which was returned.\n * @param {Function} fn1 First terminal function.\n * @param {Function} fn2 Second terminal function.\n * @return {Function} Returns function which expects to get argument that should be passed into terminal\n *  functions.\n */\nexport function fork(join, fn1, fn2) {\n  return val => join(fn1(val), fn2(val));\n}\n\n/**\n * @desc The seq combinator is used to loop over a sequence of functions.\n * @example\n * let result = 0\n *   , addToResult = x => result += x;\n *\n * result; // 0\n *\n * seq(addToResult, addToResult)(4);\n *\n * result; // 8\n *\n * @param {...Function} fns List of functions which will be invoked sequently.\n * @return {Function} Returns a new function, which runs all of them in sequence against the same value.\n */\nexport function seq(...fns) {\n  return (...vals) => {\n    fns.forEach((fn) => {\n      fn(...vals);\n    });\n  };\n}\n\n/**\n * @desc This combinator takes two functions and returns the result of the first one if the value\n * is defined (not false, null, or undefined); otherwise, it returns the result of the second function.\n * @example\n * const calc = alt(identity, x => x + 1);\n * calc(0); // 1\n * calc(2); // 2\n * @param {Function} fn1 First result function.\n * @param {Function} fn2 Second result function.\n * @return {Function} Returns the result of the first one if the value\n * is defined (not false, null, or undefined); otherwise, it returns the result of the second function\n */\nexport function alt(fn1, fn2) {\n  return val => fn1(val) || fn2(val);\n}\n\n/**\n * @desc Helps to check data in chain. Useful for debugging.\n * @example\n * let sayHelloTo = name => `Hello ${name}`\n *   , toUpperCase = str => str.toUpperCase()\n *   , addDollarSign  = str => `$${str}$`\n *   , chainMiddleResult = ''\n *   , tapHandler = data => chainMiddleResult = data\n *   , sayHelloInUpperCase = compose(addDollarSign, sayHelloTo, tap(tapHandler), toUpperCase);\n *\n *  sayHelloInUpperCase('oleh'); // '$Hello OLEH$'\n *  chainMiddleResult; // 'OLEH'\n *\n * @param {Function} fn Middleware function.\n * @return {Function} Returns data that was used for tap functio\n */\nexport function tap(fn) {\n  return data => {\n    if(isFunction(fn)) fn(data);\n    return data;\n  }\n};\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Function-Combinators/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "function",
    "name": "identity",
    "memberof": "src/Function-Combinators/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Function-Combinators/index.js~identity",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Function-Combinators/index.js",
    "importStyle": "{identity}",
    "description": "The identity combinator is a function that returns the\nsame value it was provided as an argument.\nI - combinator implementation.",
    "examples": [
      "identity(2); // 2"
    ],
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Argument that should returned back."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "T"
      ],
      "spread": false,
      "description": "Returns same value which was passed."
    }
  },
  {
    "__docId__": 172,
    "kind": "function",
    "name": "always",
    "memberof": "src/Function-Combinators/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Function-Combinators/index.js~always",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Function-Combinators/index.js",
    "importStyle": "{always}",
    "description": "Creates function which will always return passed argument.\nK - combinator implementation.",
    "examples": [
      "always(2)(); // 2"
    ],
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Argument that should returned back from function which was returned."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Returns function which will always return first passed argument."
    }
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "flip",
    "memberof": "src/Function-Combinators/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Function-Combinators/index.js~flip",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Function-Combinators/index.js",
    "importStyle": "{flip}",
    "description": "Takes function and changes argument order.\nC - combinator implementation.",
    "examples": [
      "const concat2Words = w1 => w2 => `${w1} ${w2}`;\n\nflip(concat2Words)('world')('hello'); // 'hello world'"
    ],
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} Function which expects to get first argument,\nwhich will be used as a second argument."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Function which will be invoked with fliped arguments."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Function which expects to get first argument,\nwhich will be used as a second argument."
    }
  },
  {
    "__docId__": 174,
    "kind": "function",
    "name": "thrush",
    "memberof": "src/Function-Combinators/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Function-Combinators/index.js~thrush",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Function-Combinators/index.js",
    "importStyle": "{thrush}",
    "description": "Takes argument and returns function which expects to get\nfunction which will be invoked with first argument.\nT - combinator implementation.",
    "examples": [
      "const addWorld = w => `${w} world`;\n\nthrush('hello')(addWorld); // 'hello world'"
    ],
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} Function which expects to get function\nwhere will be passed first argument."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Argument which will be passed into a function\nwhich is expected as a second argument."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Function which expects to get function\nwhere will be passed first argument."
    }
  },
  {
    "__docId__": 175,
    "kind": "function",
    "name": "duplication",
    "memberof": "src/Function-Combinators/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Function-Combinators/index.js~duplication",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Function-Combinators/index.js",
    "importStyle": "{duplication}",
    "description": "Takes function and invokes it with passed argument two times.",
    "examples": [
      "const add = x => y => x + y;\n\nduplication(add)(7); // 14"
    ],
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} Function which expects for argument."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Function which will be invoked two times\nwith the same argument."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Function which expects for argument."
    }
  },
  {
    "__docId__": 176,
    "kind": "function",
    "name": "fork",
    "memberof": "src/Function-Combinators/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Function-Combinators/index.js~fork",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Function-Combinators/index.js",
    "importStyle": "{fork}",
    "description": "The fork combinator is useful in cases where you need to process a single resource\nin two different ways and then combine the results. This combinator takes three functions:\na join function and two terminal functions that process the provided input. The result of\neach forked function is ultimately passed in to a join function of two arguments.",
    "examples": [
      "const calc = fork(multiply, x => x + x, identity);\ncalc(2); // 8"
    ],
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "join",
        "description": "Argument that should returned back from function which was returned."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn1",
        "description": "First terminal function."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn2",
        "description": "Second terminal function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Returns function which expects to get argument that should be passed into terminal\n functions."
    }
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "seq",
    "memberof": "src/Function-Combinators/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Function-Combinators/index.js~seq",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Function-Combinators/index.js",
    "importStyle": "{seq}",
    "description": "The seq combinator is used to loop over a sequence of functions.",
    "examples": [
      "let result = 0\n  , addToResult = x => result += x;\n\nresult; // 0\n\nseq(addToResult, addToResult)(4);\n\nresult; // 8"
    ],
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Function"
        ],
        "spread": true,
        "optional": false,
        "name": "fns",
        "description": "List of functions which will be invoked sequently."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Returns a new function, which runs all of them in sequence against the same value."
    }
  },
  {
    "__docId__": 178,
    "kind": "function",
    "name": "alt",
    "memberof": "src/Function-Combinators/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Function-Combinators/index.js~alt",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Function-Combinators/index.js",
    "importStyle": "{alt}",
    "description": "This combinator takes two functions and returns the result of the first one if the value\nis defined (not false, null, or undefined); otherwise, it returns the result of the second function.",
    "examples": [
      "const calc = alt(identity, x => x + 1);\ncalc(0); // 1\ncalc(2); // 2"
    ],
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn1",
        "description": "First result function."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn2",
        "description": "Second result function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Returns the result of the first one if the value\nis defined (not false, null, or undefined); otherwise, it returns the result of the second function"
    }
  },
  {
    "__docId__": 179,
    "kind": "function",
    "name": "tap",
    "memberof": "src/Function-Combinators/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Function-Combinators/index.js~tap",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Function-Combinators/index.js",
    "importStyle": "{tap}",
    "description": "Helps to check data in chain. Useful for debugging.",
    "examples": [
      "let sayHelloTo = name => `Hello ${name}`\n  , toUpperCase = str => str.toUpperCase()\n  , addDollarSign  = str => `$${str}$`\n  , chainMiddleResult = ''\n  , tapHandler = data => chainMiddleResult = data\n  , sayHelloInUpperCase = compose(addDollarSign, sayHelloTo, tap(tapHandler), toUpperCase);\n\n sayHelloInUpperCase('oleh'); // '$Hello OLEH$'\n chainMiddleResult; // 'OLEH'"
    ],
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Middleware function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Returns data that was used for tap functio"
    }
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/Lens/index.js",
    "content": "import { deepClone, safeGet } from '../Object';\nimport { isObject, isArray, isString, isNumber } from '../Type';\nimport { not } from '../Predicate-Combinator';\nimport { throwIncorrectArgsTypeErrorIfSomeOf } from '../Error';\n\n/**\n * @desc Returns value taken by property from source.\n * @example\n * let user = { name: { first: 'Oleh' } };\n * eq({ first: 'Oleh' }, prop('name', user)); // false\n * eq(prop('name', user).first, 'Oleh'); // true\n *\n * @param {string} propName Property name\n * which should be taken within source.\n * @param {object} source Object is source from where should\n * be taken value by property name.\n * @return {T} property value.\n */\nexport function prop(propName, source) {\n  throwIncorrectArgsTypeErrorIfSomeOf(\n      not(isString)(propName),\n      not(isObject)(source));\n\n  return deepClone(source)[propName];\n};\n\n/**\n * @desc Returns value taken by index from source.\n * @param {number} index Index\n * which should be taken within source.\n * @param {Array<T>} source Array is source from where should\n * be taken value by index.\n * @return {T} value by index.\n */\nexport function lensIndex(index, source) {\n  throwIncorrectArgsTypeErrorIfSomeOf(\n      not(isNumber)(index),\n      not(isArray)(source));\n\n  return deepClone(source)[index];\n};\n\n/**\n * @desc Returns a lens whose focus is the specified property.\n * @param {string} propName Property name\n * which should be taken within source.\n * @return {Function} function which expects object to be source.\n */\nexport function lensProp(propName) {\n  throwIncorrectArgsTypeErrorIfSomeOf(\n    not(isString)(propName));\n  return source => {\n    throwIncorrectArgsTypeErrorIfSomeOf(\n      not(isObject)(source));\n\n    return deepClone(source)[propName];\n  }\n};\n\n/**\n * @desc Makes a deep clone of an object, setting or overriding\n * the specified property with the given value.\n * @param {string} propName Property name\n * @param {T} valueToBeSet New value for property\n * @param {object} source Object where should be changed\n * property value.\n * @return {object} Clone of source with changed value.\n */\nexport function assoc(propName, valueToBeSet, source) {\n  throwIncorrectArgsTypeErrorIfSomeOf(\n    not(isString)(propName),\n    not(isObject)(source));\n\n  return Object.assign(deepClone(source), {[propName]: valueToBeSet});\n}\n\n/**\n * @desc Updates Array or Object by given path with given value.\n * @param {Array<String|Number>} path Path to property which should be changed.\n * @param {any} valueToBeSet Value which should be set by path.\n * @param {Object|Array} source Source where should be changed property.\n * @return {Object|Array} Resurns clone of object or array with applied changes.\n */\nexport function assocPath(path, valueToBeSet, source) {\n  let sourceClone = deepClone(source);\n  path.forEach((propName, index) => {\n    let nextIndex = index + 1\n      , chunkToCurrentProp = path.slice(0, nextIndex)\n      , chunkToPreviousProp = path.slice(0, index);\n\n    if(chunkToCurrentProp.length === path.length) {\n        let currentProp = safeGet(sourceClone, ...chunkToPreviousProp);\n        currentProp[path[index]] = valueToBeSet;\n    } else {\n      let ctx = Boolean(chunkToPreviousProp.length)\n        ? safeGet(sourceClone, ...chunkToPreviousProp)\n        : sourceClone;\n\n      if(isNumber(path[nextIndex]) && !isArray(ctx[propName])) ctx[propName] = [];\n\n      if(isString(path[nextIndex]) && !isObject(ctx[propName])) ctx[propName] = {};\n    }\n  });\n\n  return sourceClone;\n}\n\n/**\n * @desc Retrieve the value at a given path.\n * @param {Array<string>} p Path to value.\n * @param {object} source Source to use.\n * @return {any} Value by path.\n */\nexport function path(p, source) {\n  return safeGet(deepClone(source), ...p);\n}\n\n/**\n * @desc Retrieve the value at a given path and compares it with\n * given value.\n * @param {Array<string>} path Path to value.\n * @param {object} source Source to use.\n * @param {any} value Value for comparing.\n * @return {any} Comparation result.\n */\nexport function pathEq(path, source, value) {\n  return safeGet(deepClone(source), ...path) === value;\n}\n\n/**\n * @desc Retrieve the value at a given path and if value is undefined\n * returns orValue.\n * @param {Array<string>} path Path to value.\n * @param {object} source Source to use.\n * @param {any} orValue Value which should be returned in\n * case if path doesn't exist.\n * @return {any} Value by path or orValue.\n */\nexport function pathOr(path, source, orValue) {\n  return safeGet(deepClone(source), ...path) || orValue;\n}\n\n/**\n * @desc Retrieve the value at a given path and returns result\n * of invocation satisfy function with value by path.\n * @param {Array<string>} path Path to value.\n * @param {object} source Source to use.\n * @param {Function} satisfyFn Function which will be invoked with path value.\n * @return {any} Result of invocation satisfy function with value by path.\n */\nexport function pathSatisfies(path, source, satisfyFn) {\n  return satisfyFn(safeGet(deepClone(source), ...path));\n}\n\n\n\n\n\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Lens/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "prop",
    "memberof": "src/Lens/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Lens/index.js~prop",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Lens/index.js",
    "importStyle": "{prop}",
    "description": "Returns value taken by property from source.",
    "examples": [
      "let user = { name: { first: 'Oleh' } };\neq({ first: 'Oleh' }, prop('name', user)); // false\neq(prop('name', user).first, 'Oleh'); // true"
    ],
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "propName",
        "description": "Property name\nwhich should be taken within source."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Object is source from where should\nbe taken value by property name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "T"
      ],
      "spread": false,
      "description": "property value."
    }
  },
  {
    "__docId__": 182,
    "kind": "function",
    "name": "lensIndex",
    "memberof": "src/Lens/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Lens/index.js~lensIndex",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Lens/index.js",
    "importStyle": "{lensIndex}",
    "description": "Returns value taken by index from source.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "Index\nwhich should be taken within source."
      },
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Array is source from where should\nbe taken value by index."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "T"
      ],
      "spread": false,
      "description": "value by index."
    }
  },
  {
    "__docId__": 183,
    "kind": "function",
    "name": "lensProp",
    "memberof": "src/Lens/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Lens/index.js~lensProp",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Lens/index.js",
    "importStyle": "{lensProp}",
    "description": "Returns a lens whose focus is the specified property.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "propName",
        "description": "Property name\nwhich should be taken within source."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "function which expects object to be source."
    }
  },
  {
    "__docId__": 184,
    "kind": "function",
    "name": "assoc",
    "memberof": "src/Lens/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Lens/index.js~assoc",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Lens/index.js",
    "importStyle": "{assoc}",
    "description": "Makes a deep clone of an object, setting or overriding\nthe specified property with the given value.",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "propName",
        "description": "Property name"
      },
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valueToBeSet",
        "description": "New value for property"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Object where should be changed\nproperty value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Clone of source with changed value."
    }
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "assocPath",
    "memberof": "src/Lens/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Lens/index.js~assocPath",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Lens/index.js",
    "importStyle": "{assocPath}",
    "description": "Updates Array or Object by given path with given value.",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<String|Number>"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Path to property which should be changed."
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "valueToBeSet",
        "description": "Value which should be set by path."
      },
      {
        "nullable": null,
        "types": [
          "Object",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Source where should be changed property."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "Array"
      ],
      "spread": false,
      "description": "Resurns clone of object or array with applied changes."
    }
  },
  {
    "__docId__": 186,
    "kind": "function",
    "name": "path",
    "memberof": "src/Lens/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Lens/index.js~path",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Lens/index.js",
    "importStyle": "{path}",
    "description": "Retrieve the value at a given path.",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "Path to value."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Source to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "Value by path."
    }
  },
  {
    "__docId__": 187,
    "kind": "function",
    "name": "pathEq",
    "memberof": "src/Lens/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Lens/index.js~pathEq",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Lens/index.js",
    "importStyle": "{pathEq}",
    "description": "Retrieve the value at a given path and compares it with\ngiven value.",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Path to value."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Source to use."
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Value for comparing."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "Comparation result."
    }
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "pathOr",
    "memberof": "src/Lens/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Lens/index.js~pathOr",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Lens/index.js",
    "importStyle": "{pathOr}",
    "description": "Retrieve the value at a given path and if value is undefined\nreturns orValue.",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Path to value."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Source to use."
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "orValue",
        "description": "Value which should be returned in\ncase if path doesn't exist."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "Value by path or orValue."
    }
  },
  {
    "__docId__": 189,
    "kind": "function",
    "name": "pathSatisfies",
    "memberof": "src/Lens/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Lens/index.js~pathSatisfies",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Lens/index.js",
    "importStyle": "{pathSatisfies}",
    "description": "Retrieve the value at a given path and returns result\nof invocation satisfy function with value by path.",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Path to value."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Source to use."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "satisfyFn",
        "description": "Function which will be invoked with path value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "Result of invocation satisfy function with value by path."
    }
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "src/Math/index.js",
    "content": "/**\n * @desc Compares two small decimal values.\n * @param {number} number1 First number to compare.\n * @param {number} number2 Second number to compare.\n * @return {boolean} true if two number are equal.\n */\nexport function compareDecimalNumbers(number1, number2) {\n  return Math.abs(number1 - number2) < Number.EPSILON;\n};\n\n/**\n * @desc Will generate random integer.\n * @param {number} max Max number that can be returned.\n * @return {number} Random integer.\n */\nexport function getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n};\n\n/**\n * @desc Will generate random integer in passed range.\n * @param {number} min Min number that can be returned.\n * @param {number} max Max number that can be returned.\n * @return {number} Random integer.\n */\nexport function getRandomIntFromTo(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\n/**\n * Subtract numbers.\n * @param {number} minuend The first number in a subtraction.\n * @param {number} subtrahendList  The subtrahend list.\n * @return {number} Returns the difference.\n */\nexport function subtract(minuend, ...subtrahendList) {\n  return subtrahendList.reduce((accumulator, value) => accumulator - value, minuend) || 0;\n};\n\n/**\n * Multiply numbers.\n * @param {number} multiplier The first number in a multiplication.\n * @param {number} multiplicandList The multiplicand list.\n * @return {number} Returns the product.\n */\nexport function multiply(multiplier, ...multiplicandList) {\n  return multiplicandList.reduce((accumulator, value) => accumulator * value, multiplier) || 0;\n};\n\n/**\n * Adds numbers.\n * @param {number} augend The first number in an addition.\n * @param {...number} addendList The addend list.\n * @example\n * add(1, 2, 3, 1); // 7\n * add(1, 3); // 4\n * @return {number} Returns the total.\n */\nexport function add(augend, ...addendList) {\n  return addendList.reduce((accumulator, value) => accumulator + value, augend) || 0;\n};\n\n/**\n * Divide numbers.\n * @param {number} dividend The first number in a division.\n * @param {number} divisorList The divisor list.\n * @return {number} Returns the quotient.\n */\nexport function divide(dividend, ...divisorList) {\n  return divisorList.reduce((accumulator, value) => accumulator / value, dividend) || 0;\n};\n\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Math/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "compareDecimalNumbers",
    "memberof": "src/Math/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/index.js~compareDecimalNumbers",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Math/index.js",
    "importStyle": "{compareDecimalNumbers}",
    "description": "Compares two small decimal values.",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number1",
        "description": "First number to compare."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number2",
        "description": "Second number to compare."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if two number are equal."
    }
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "getRandomInt",
    "memberof": "src/Math/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/index.js~getRandomInt",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Math/index.js",
    "importStyle": "{getRandomInt}",
    "description": "Will generate random integer.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "Max number that can be returned."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Random integer."
    }
  },
  {
    "__docId__": 193,
    "kind": "function",
    "name": "getRandomIntFromTo",
    "memberof": "src/Math/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/index.js~getRandomIntFromTo",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Math/index.js",
    "importStyle": "{getRandomIntFromTo}",
    "description": "Will generate random integer in passed range.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": "Min number that can be returned."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "Max number that can be returned."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Random integer."
    }
  },
  {
    "__docId__": 194,
    "kind": "function",
    "name": "subtract",
    "memberof": "src/Math/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/index.js~subtract",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Math/index.js",
    "importStyle": "{subtract}",
    "description": "Subtract numbers.",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "minuend",
        "description": "The first number in a subtraction."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "subtrahendList",
        "description": "The subtrahend list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Returns the difference."
    }
  },
  {
    "__docId__": 195,
    "kind": "function",
    "name": "multiply",
    "memberof": "src/Math/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/index.js~multiply",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Math/index.js",
    "importStyle": "{multiply}",
    "description": "Multiply numbers.",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "multiplier",
        "description": "The first number in a multiplication."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "multiplicandList",
        "description": "The multiplicand list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Returns the product."
    }
  },
  {
    "__docId__": 196,
    "kind": "function",
    "name": "add",
    "memberof": "src/Math/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/index.js~add",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Math/index.js",
    "importStyle": "{add}",
    "description": "Adds numbers.",
    "examples": [
      "add(1, 2, 3, 1); // 7\nadd(1, 3); // 4"
    ],
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "augend",
        "description": "The first number in an addition."
      },
      {
        "nullable": null,
        "types": [
          "...number"
        ],
        "spread": true,
        "optional": false,
        "name": "addendList",
        "description": "The addend list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Returns the total."
    }
  },
  {
    "__docId__": 197,
    "kind": "function",
    "name": "divide",
    "memberof": "src/Math/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/index.js~divide",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Math/index.js",
    "importStyle": "{divide}",
    "description": "Divide numbers.",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dividend",
        "description": "The first number in a division."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "divisorList",
        "description": "The divisor list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Returns the quotient."
    }
  },
  {
    "__docId__": 198,
    "kind": "file",
    "name": "src/Object/index.js",
    "content": "import { isArray, isNotNull, isPrimitive, isObject } from '../Type';\nimport { and } from '../Predicate-Combinator';\n\n/**\n * @desc Will deep frezee all properties.\n * @param {object} obj Object that should be fully freezed.\n * @return {object} Freezed object.\n */\nexport function deepFreeze(obj) {\n  let propNames = Object.getOwnPropertyNames(obj);\n\n  propNames.forEach(name => {\n    let prop = obj[name];\n\n    if (and(isObject, isNotNull)(prop))\n      deepFreeze(prop);\n  });\n\n  return Object.freeze(obj);\n};\n\n/**\n * @desc Will create object clone.\n * @param {object} objectToClone Object that should be cloned.\n * @return {object} Clone of passed object.\n */\nexport function cloneObject(objectToClone) {\n  return Object.assign({}, objectToClone);\n};\n\n/**\n * @desc Will create an object deep clone.\n * @param {object} objectToDeepClone Object that should be deep cloned.\n * @return {object} Clone of passed object.\n */\nexport function deepClone(objectToDeepClone) {\n  let newObj = objectToDeepClone;\n  if (objectToDeepClone && typeof objectToDeepClone === 'object') {\n      newObj = isArray(objectToDeepClone) ? [] : {};\n      for (let i in objectToDeepClone) {\n          newObj[i] = deepClone(objectToDeepClone[i]);\n      }\n  }\n  return newObj;\n};\n\n/**\n * @desc Will create and return a new object with\n * selected properties from pickArray.\n * @param {object} source Object that should have updated structure.\n * @param {...string} pickArray Properties that should be included in\n * result object.\n * @return {object} Object that includes pickArray property list.\n */\nexport function pick(source, ...pickArray) {\n  return pickArray.reduce((accumulator, sourceKey) => {\n    accumulator[sourceKey] = source[sourceKey]\n    return accumulator;\n  }, {});\n};\n\n/**\n * @desc Will create and return a new object with omited properties from omitArray.\n * @param {object} source Object that should have updated structure.\n * @param {...string} omitArray Properties that should omited in result object.\n * @return {object} Object with excluded properties from omitArray.\n */\nexport function omit(source, ...omitArray) {\n  return Object.keys(source).reduce((accumulator, sourceKey) => {\n    if (!omitArray.includes(sourceKey))\n      accumulator[sourceKey] = source[sourceKey]\n    return accumulator;\n  }, {});\n};\n\n/**\n * @desc Implementation of optional chain operator.\n * @param {object} obj Context object.\n * @param {...string} props Property chain.\n * @return Context value by property chain.\n */\nexport function safeGet(obj, ...props) {\n  let val = obj[props.shift()];\n  return (props.length && val) ? safeGet(val, ...props) : val;\n};\n\n/**\n * @desc Implementation of optional chain operator.\n * @param {object} obj Context object.\n * @param {any} orValue Value which will be returned if obj doesn't\n * contain truthly value.\n * @param {...string} props Property chain.\n * @return {any} Context value by property chain or orValue.\n */\nexport function safeGetOr(obj, orValue, ...props) {\n  return safeGet(obj, ...props) || orValue;\n};\n\n/**\n * @desc Curry version of get function that expects in\n * future to get context.\n * @param {...string} props Property chain.\n * @return {Function} Curry functions that expects to get\n * context object.\n */\nexport function getWithProps(...props) {\n  return obj => safeGet(obj, ...props);\n};\n\n/**\n * @desc Curry version of get function that expects in\n * future to get property list.\n * @param {object} obj Context object.\n * @return {Function} Curry functions that expects to get\n * property list.\n */\nexport function getWithCtx(obj) {\n  return (...props) => safeGet(obj, ...props);\n};\n\n/**\n * @desc Iterates by object properties.\n * @param {object} obj Context object.\n * @param {Function} cb Callback function which will be invoked\n * with key and value argument.\n * @param {Function} skipCb Skip function which allows to skip property\n * by given condition.\n * @return {Array<any>} Returns array projected by Callback function.\n */\nexport function objectProjection(obj, cb, skipCb = (...args) => args) {\n  return Object.entries(obj)\n    .filter(([k, v]) => skipCb(k, v))\n    .map(([key, value]) =>\n      cb(key, value));\n}\n\n/**\n * @desc Checks object properties with set of predicates.\n * @example\n * let given = { b: 1, a: 'Hello' };\n *\n * conformsTo(given, { b: n => n === 1, a: n => n === 'Hello' }); // true\n *\n * conformsTo(given, { b: n => n === 1, a: n => n === 'NOT-Hello' }); // false\n *\n * @param {object} object Object which should be chcked.\n * @param {object} predicateSetModel Predicate set model.\n * @returns {boolean} Returns true if all predicates returns true.\n */\nexport function conformsTo(object, predicateSetModel) {\n  return Object.keys(predicateSetModel)\n    .every(key => predicateSetModel[key](object[key]))\n}\n\n/**\n * @desc Compares two elements.\n * @example\n * deepEquals(\n *   [\n *     { id: 1, firstName: 'Jon', lastName: 'Snow', age: 14, location: 'Winterfell' },\n *     { id: 2, firstName: 'Eddard', lastName: 'Stark', age: 35, location: 'Winterfell' },\n *     { id: 3, firstName: 'Catelyn', lastName: 'Stark', age: 33, location: 'Winterfell' },\n *     { id: 4, firstName: 'Roose', lastName: 'Bolton', age: 40, location: 'Dreadfort' },\n *     { id: 5, firstName: 'Ramsay', lastName: 'Snow', age: 15, location: 'Dreadfort' }\n *   ],\n *   [\n *     { id: 1, firstName: 'Jon', lastName: 'Snow', age: 14, location: 'Winterfell' },\n *     { id: 2, firstName: 'Eddard', lastName: 'Stark', age: 35, location: 'Winterfell' },\n *     { id: 3, firstName: 'Catelyn', lastName: 'Stark', age: 33, location: 'Winterfell' },\n *     { id: 4, firstName: 'Roose', lastName: 'Bolton', age: 40, location: 'Dreadfort' },\n *     { id: 5, firstName: 'Ramsay', lastName: 'Snow', age: 15, location: 'Dreadfort' }\n *   ]\n * ); // true\n *\n * deepEquals(\n *   [\n *     { id: 1, firstName: 'Jon', lastName: 'Snow', age: 14, location: 'Winterfell' },\n *     { id: 2, firstName: 'Eddard', lastName: 'Stark', age: 35, location: 'Winterfell' },\n *     { id: 3, firstName: 'Catelyn', lastName: 'Stark', age: 33, location: 'Winterfell' },\n *     { id: 4, firstName: 'Roose', lastName: 'Bolton', age: 40, location: 'Dreadfort' },\n *     { id: 5, firstName: 'Ramsay', lastName: 'Snow', age: 15, location: 'Dreadfort' }\n *   ],\n *   [\n *     { id: 1, firstName: 'Jon', lastName: 'Snow', age: 14, location: 'Winterfell' },\n *     { id: 2, firstName: 'Eddard', lastName: 'Stark', age: 35, location: 'Winterfell' },\n *     { id: 3, firstName: 'Catelyn', lastName: 'Stark', age: 33, location: 'Winterfell' },\n *     { id: 4, firstName: 'Roose', lastName: 'Bolton', age: 40, location: 'Dreadfort' },\n *     { id: 5, firstName: 'Not the same!', lastName: 'Snow', age: 15, location: 'Dreadfort' }\n *   ]\n * ); // false\n * @param {any} first First element for comparation.\n * @param {any} second Second element for comparation.\n * @returns {boolean} Returns true if two elements are the same.\n */\nexport function deepEquals(first, second) {\n  if (isPrimitive(first) && isPrimitive(second)) return first === second;\n  if (isPrimitive(first) || isPrimitive(second)) return false;\n\n  let firstKeys = Object.keys(first);\n\n  if(firstKeys.length !== Object.keys(second).length) return false;\n\n  return firstKeys.every(key => deepEquals(first[key], second[key]));\n};\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Object/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 199,
    "kind": "function",
    "name": "deepFreeze",
    "memberof": "src/Object/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Object/index.js~deepFreeze",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Object/index.js",
    "importStyle": "{deepFreeze}",
    "description": "Will deep frezee all properties.",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "Object that should be fully freezed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Freezed object."
    }
  },
  {
    "__docId__": 200,
    "kind": "function",
    "name": "cloneObject",
    "memberof": "src/Object/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Object/index.js~cloneObject",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Object/index.js",
    "importStyle": "{cloneObject}",
    "description": "Will create object clone.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "objectToClone",
        "description": "Object that should be cloned."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Clone of passed object."
    }
  },
  {
    "__docId__": 201,
    "kind": "function",
    "name": "deepClone",
    "memberof": "src/Object/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Object/index.js~deepClone",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Object/index.js",
    "importStyle": "{deepClone}",
    "description": "Will create an object deep clone.",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "objectToDeepClone",
        "description": "Object that should be deep cloned."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Clone of passed object."
    }
  },
  {
    "__docId__": 202,
    "kind": "function",
    "name": "pick",
    "memberof": "src/Object/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Object/index.js~pick",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Object/index.js",
    "importStyle": "{pick}",
    "description": "Will create and return a new object with\nselected properties from pickArray.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Object that should have updated structure."
      },
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "pickArray",
        "description": "Properties that should be included in\nresult object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Object that includes pickArray property list."
    }
  },
  {
    "__docId__": 203,
    "kind": "function",
    "name": "omit",
    "memberof": "src/Object/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Object/index.js~omit",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Object/index.js",
    "importStyle": "{omit}",
    "description": "Will create and return a new object with omited properties from omitArray.",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Object that should have updated structure."
      },
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "omitArray",
        "description": "Properties that should omited in result object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Object with excluded properties from omitArray."
    }
  },
  {
    "__docId__": 204,
    "kind": "function",
    "name": "safeGet",
    "memberof": "src/Object/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Object/index.js~safeGet",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Object/index.js",
    "importStyle": "{safeGet}",
    "description": "Implementation of optional chain operator.",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "Context object."
      },
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "props",
        "description": "Property chain."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Context value by property chain."
    }
  },
  {
    "__docId__": 205,
    "kind": "function",
    "name": "safeGetOr",
    "memberof": "src/Object/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Object/index.js~safeGetOr",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Object/index.js",
    "importStyle": "{safeGetOr}",
    "description": "Implementation of optional chain operator.",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "Context object."
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "orValue",
        "description": "Value which will be returned if obj doesn't\ncontain truthly value."
      },
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "props",
        "description": "Property chain."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "Context value by property chain or orValue."
    }
  },
  {
    "__docId__": 206,
    "kind": "function",
    "name": "getWithProps",
    "memberof": "src/Object/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Object/index.js~getWithProps",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Object/index.js",
    "importStyle": "{getWithProps}",
    "description": "Curry version of get function that expects in\nfuture to get context.",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "props",
        "description": "Property chain."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Curry functions that expects to get\ncontext object."
    }
  },
  {
    "__docId__": 207,
    "kind": "function",
    "name": "getWithCtx",
    "memberof": "src/Object/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Object/index.js~getWithCtx",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Object/index.js",
    "importStyle": "{getWithCtx}",
    "description": "Curry version of get function that expects in\nfuture to get property list.",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "Context object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Curry functions that expects to get\nproperty list."
    }
  },
  {
    "__docId__": 208,
    "kind": "function",
    "name": "objectProjection",
    "memberof": "src/Object/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Object/index.js~objectProjection",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Object/index.js",
    "importStyle": "{objectProjection}",
    "description": "Iterates by object properties.",
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "Context object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "Callback function which will be invoked\nwith key and value argument."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "skipCb",
        "description": "Skip function which allows to skip property\nby given condition."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<any>"
      ],
      "spread": false,
      "description": "Returns array projected by Callback function."
    }
  },
  {
    "__docId__": 209,
    "kind": "function",
    "name": "conformsTo",
    "memberof": "src/Object/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Object/index.js~conformsTo",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Object/index.js",
    "importStyle": "{conformsTo}",
    "description": "Checks object properties with set of predicates.",
    "examples": [
      "let given = { b: 1, a: 'Hello' };\n\nconformsTo(given, { b: n => n === 1, a: n => n === 'Hello' }); // true\n\nconformsTo(given, { b: n => n === 1, a: n => n === 'NOT-Hello' }); // false"
    ],
    "lineNumber": 150,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns true if all predicates returns true."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "Object which should be chcked."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "predicateSetModel",
        "description": "Predicate set model."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if all predicates returns true."
    }
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "deepEquals",
    "memberof": "src/Object/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Object/index.js~deepEquals",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Object/index.js",
    "importStyle": "{deepEquals}",
    "description": "Compares two elements.",
    "examples": [
      "deepEquals(\n  [\n    { id: 1, firstName: 'Jon', lastName: 'Snow', age: 14, location: 'Winterfell' },\n    { id: 2, firstName: 'Eddard', lastName: 'Stark', age: 35, location: 'Winterfell' },\n    { id: 3, firstName: 'Catelyn', lastName: 'Stark', age: 33, location: 'Winterfell' },\n    { id: 4, firstName: 'Roose', lastName: 'Bolton', age: 40, location: 'Dreadfort' },\n    { id: 5, firstName: 'Ramsay', lastName: 'Snow', age: 15, location: 'Dreadfort' }\n  ],\n  [\n    { id: 1, firstName: 'Jon', lastName: 'Snow', age: 14, location: 'Winterfell' },\n    { id: 2, firstName: 'Eddard', lastName: 'Stark', age: 35, location: 'Winterfell' },\n    { id: 3, firstName: 'Catelyn', lastName: 'Stark', age: 33, location: 'Winterfell' },\n    { id: 4, firstName: 'Roose', lastName: 'Bolton', age: 40, location: 'Dreadfort' },\n    { id: 5, firstName: 'Ramsay', lastName: 'Snow', age: 15, location: 'Dreadfort' }\n  ]\n); // true\n\ndeepEquals(\n  [\n    { id: 1, firstName: 'Jon', lastName: 'Snow', age: 14, location: 'Winterfell' },\n    { id: 2, firstName: 'Eddard', lastName: 'Stark', age: 35, location: 'Winterfell' },\n    { id: 3, firstName: 'Catelyn', lastName: 'Stark', age: 33, location: 'Winterfell' },\n    { id: 4, firstName: 'Roose', lastName: 'Bolton', age: 40, location: 'Dreadfort' },\n    { id: 5, firstName: 'Ramsay', lastName: 'Snow', age: 15, location: 'Dreadfort' }\n  ],\n  [\n    { id: 1, firstName: 'Jon', lastName: 'Snow', age: 14, location: 'Winterfell' },\n    { id: 2, firstName: 'Eddard', lastName: 'Stark', age: 35, location: 'Winterfell' },\n    { id: 3, firstName: 'Catelyn', lastName: 'Stark', age: 33, location: 'Winterfell' },\n    { id: 4, firstName: 'Roose', lastName: 'Bolton', age: 40, location: 'Dreadfort' },\n    { id: 5, firstName: 'Not the same!', lastName: 'Snow', age: 15, location: 'Dreadfort' }\n  ]\n); // false"
    ],
    "lineNumber": 195,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns true if two elements are the same."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "first",
        "description": "First element for comparation."
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "second",
        "description": "Second element for comparation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if two elements are the same."
    }
  },
  {
    "__docId__": 211,
    "kind": "file",
    "name": "src/Predicate/index.js",
    "content": "import * as PcLib from '../Predicate-Combinator';\n\n/**\n * @desc Saves number1 and returns predicate function that will be checking\n * if number2 is less then number1.\n * @param {number} number1 First number.\n * @return {Function} Predicate Function.\n */\nexport function lt(number1) {\n  return number2 => number2 < number1;\n};\n\n/**\n * @desc Saves number1 and returns predicate function that will be checking\n * if number2 is greater then number1.\n * @param {number} number1 First number.\n * @return {Function} Predicate Function.\n */\nexport function gt(number1) {\n  return number2 => number2 > number1;\n};\n\n/**\n * @desc Saves number1, number2 and returns predicate function that will be checking\n * if future passed number is in range of number1 and number2.\n * @param {number} number1 Min range number.\n * @param {number} number2 Max range number.\n * @return {Function} Predicate Function.\n */\nexport function range(number1, number2) {\n  return number => PcLib.and(\n    gt(number1), lt(number2))(number);\n};\n\n/**\n * @desc Saves number1 and returns predicate function that will be checking\n * if number2 is less then or equal to number1.\n * @param {number} number1 First number.\n * @return {Function} Predicate Function.\n */\nexport function lte(number1) {\n  return number2 => number2 <= number1;\n};\n\n/**\n * @desc Saves number1 and returns predicate function that will be checking\n * if number2 is greater then or equal to number1.\n * @param {number} number1 First number.\n * @return {Function} Predicate Function.\n */\nexport function gte(number1) {\n  return number2 => number2 >= number1;\n};\n\n/**\n * @desc Saves number1, number2 and returns predicate function that will be checking\n * if future passed number is in range of number1 and number2 or equal to number1/number2.\n * @param {number} number1 Min range number.\n * @param {number} number2 Max range number.\n * @return {Function} Predicate Function.\n */\nexport function rangeEqual(number1, number2) {\n  return number => PcLib.and(\n    gte(number1), lte(number2))(number);\n};\n\n/**\n * @desc Checks if two elements are the same\n * @example\n * eq(1)(1) // true\n * eq(1)(2) // false\n *\n * eq('hello')('hello') // true\n * eq('hello')('hello2') // false\n *\n * eq({ greeting: 'hello' })({ greeting: 'hello' }) // false\n *\n * @param {T} elem1 Element which will be compared with other.\n * @returns {Function} Function which take second element for comparation.\n */\nexport function eq(elem1) {\n  return elem2 => elem1 === elem2;\n}\n\n/**\n * @desc Checks if two elements are not the same.\n * @example\n * eq(1)(1) // false\n * eq(1)(2) // true\n *\n * eq('hello')('hello') // false\n * eq('hello')('hello2') // true\n *\n * eq({ greeting: 'hello' })({ greeting: 'hello' }) // true\n *\n * @param {T} elem1 Element which will be compared with other.\n * @returns {Function} Function which take second element for comparation.\n */\nexport function notEq(elem1) {\n  return elem2 => elem1 !== elem2;\n}\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Predicate/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 212,
    "kind": "function",
    "name": "lt",
    "memberof": "src/Predicate/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Predicate/index.js~lt",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Predicate/index.js",
    "importStyle": "{lt}",
    "description": "Saves number1 and returns predicate function that will be checking\nif number2 is less then number1.",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number1",
        "description": "First number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Predicate Function."
    }
  },
  {
    "__docId__": 213,
    "kind": "function",
    "name": "gt",
    "memberof": "src/Predicate/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Predicate/index.js~gt",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Predicate/index.js",
    "importStyle": "{gt}",
    "description": "Saves number1 and returns predicate function that will be checking\nif number2 is greater then number1.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number1",
        "description": "First number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Predicate Function."
    }
  },
  {
    "__docId__": 214,
    "kind": "function",
    "name": "range",
    "memberof": "src/Predicate/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Predicate/index.js~range",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Predicate/index.js",
    "importStyle": "{range}",
    "description": "Saves number1, number2 and returns predicate function that will be checking\nif future passed number is in range of number1 and number2.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number1",
        "description": "Min range number."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number2",
        "description": "Max range number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Predicate Function."
    }
  },
  {
    "__docId__": 215,
    "kind": "function",
    "name": "lte",
    "memberof": "src/Predicate/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Predicate/index.js~lte",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Predicate/index.js",
    "importStyle": "{lte}",
    "description": "Saves number1 and returns predicate function that will be checking\nif number2 is less then or equal to number1.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number1",
        "description": "First number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Predicate Function."
    }
  },
  {
    "__docId__": 216,
    "kind": "function",
    "name": "gte",
    "memberof": "src/Predicate/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Predicate/index.js~gte",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Predicate/index.js",
    "importStyle": "{gte}",
    "description": "Saves number1 and returns predicate function that will be checking\nif number2 is greater then or equal to number1.",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number1",
        "description": "First number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Predicate Function."
    }
  },
  {
    "__docId__": 217,
    "kind": "function",
    "name": "rangeEqual",
    "memberof": "src/Predicate/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Predicate/index.js~rangeEqual",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Predicate/index.js",
    "importStyle": "{rangeEqual}",
    "description": "Saves number1, number2 and returns predicate function that will be checking\nif future passed number is in range of number1 and number2 or equal to number1/number2.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number1",
        "description": "Min range number."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number2",
        "description": "Max range number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Predicate Function."
    }
  },
  {
    "__docId__": 218,
    "kind": "function",
    "name": "eq",
    "memberof": "src/Predicate/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Predicate/index.js~eq",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Predicate/index.js",
    "importStyle": "{eq}",
    "description": "Checks if two elements are the same",
    "examples": [
      "eq(1)(1) // true\neq(1)(2) // false\n\neq('hello')('hello') // true\neq('hello')('hello2') // false\n\neq({ greeting: 'hello' })({ greeting: 'hello' }) // false"
    ],
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} Function which take second element for comparation."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "elem1",
        "description": "Element which will be compared with other."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Function which take second element for comparation."
    }
  },
  {
    "__docId__": 219,
    "kind": "function",
    "name": "notEq",
    "memberof": "src/Predicate/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Predicate/index.js~notEq",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Predicate/index.js",
    "importStyle": "{notEq}",
    "description": "Checks if two elements are not the same.",
    "examples": [
      "eq(1)(1) // false\neq(1)(2) // true\n\neq('hello')('hello') // false\neq('hello')('hello2') // true\n\neq({ greeting: 'hello' })({ greeting: 'hello' }) // true"
    ],
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} Function which take second element for comparation."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "elem1",
        "description": "Element which will be compared with other."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Function which take second element for comparation."
    }
  },
  {
    "__docId__": 220,
    "kind": "file",
    "name": "src/Predicate-Combinator/index.js",
    "content": "/**\n * @desc Takes list of predicates and returns a one predicate, current\n * predicate will return true if at least one of passed predicates\n * returns true.\n * @param {...Function} predicates List of predicates.\n * @return {Function} Predicate function.\n */\nexport function or(...predicates) {\n  return value => predicates.some(predicate => predicate(value));\n};\n\n/**\n * @desc Takes list of predicates and returns a one predicate, current\n * predicate will return true only in case if all passed predicates\n * return true.\n * @param {...Function} predicates List of predicates.\n * @return {Function} Predicate function.\n */\nexport function and(...predicates) {\n  return value => predicates.every(predicate => predicate(value))\n};\n\n/**\n * @desc Takes list of predicates and returns a one predicate, current\n * predicate will return true only in case if all passed predicates\n * return false.\n * @param {...Function} predicates List of predicates.\n * @return {Function} Predicate function.\n */\nexport function not(...predicates) {\n  return value => predicates.every(predicate => !predicate(value))\n}\n\n/**\n * @desc Takes list of predicates and returns a one predicate, current\n * predicate will return true only in the case if none of passed prdicates\n * returns true.\n * @param {...Function} predicates List of predicates.\n * @return {Function} Predicate function.\n */\nexport function notOr(...predicates) {\n  return value => not(or(...predicates))(value);\n}\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Predicate-Combinator/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 221,
    "kind": "function",
    "name": "or",
    "memberof": "src/Predicate-Combinator/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Predicate-Combinator/index.js~or",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Predicate-Combinator/index.js",
    "importStyle": "{or}",
    "description": "Takes list of predicates and returns a one predicate, current\npredicate will return true if at least one of passed predicates\nreturns true.",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Function"
        ],
        "spread": true,
        "optional": false,
        "name": "predicates",
        "description": "List of predicates."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Predicate function."
    }
  },
  {
    "__docId__": 222,
    "kind": "function",
    "name": "and",
    "memberof": "src/Predicate-Combinator/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Predicate-Combinator/index.js~and",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Predicate-Combinator/index.js",
    "importStyle": "{and}",
    "description": "Takes list of predicates and returns a one predicate, current\npredicate will return true only in case if all passed predicates\nreturn true.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Function"
        ],
        "spread": true,
        "optional": false,
        "name": "predicates",
        "description": "List of predicates."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Predicate function."
    }
  },
  {
    "__docId__": 223,
    "kind": "function",
    "name": "not",
    "memberof": "src/Predicate-Combinator/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Predicate-Combinator/index.js~not",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Predicate-Combinator/index.js",
    "importStyle": "{not}",
    "description": "Takes list of predicates and returns a one predicate, current\npredicate will return true only in case if all passed predicates\nreturn false.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Function"
        ],
        "spread": true,
        "optional": false,
        "name": "predicates",
        "description": "List of predicates."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Predicate function."
    }
  },
  {
    "__docId__": 224,
    "kind": "function",
    "name": "notOr",
    "memberof": "src/Predicate-Combinator/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Predicate-Combinator/index.js~notOr",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Predicate-Combinator/index.js",
    "importStyle": "{notOr}",
    "description": "Takes list of predicates and returns a one predicate, current\npredicate will return true only in the case if none of passed prdicates\nreturns true.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Function"
        ],
        "spread": true,
        "optional": false,
        "name": "predicates",
        "description": "List of predicates."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Predicate function."
    }
  },
  {
    "__docId__": 225,
    "kind": "file",
    "name": "src/String/index.js",
    "content": "import * as FnLib from '../Function';\nimport * as ArrLib from '../Array';\n\n/**\n * @desc Works similarly to templates. Sequentially replaces all\n * placeholders ({0}, {1}, {2}...).\n * @param {String} [src='']  Source for replacements.\n * @param {Array<T>} args Values for replacements.\n * @return {String} New String with all replacements.\n */\nexport function buildResource(src = '', ...args) {\n  if (!src || !args.length) return src;\n  return buildResource(src.replace(`{${args.length - 1}}`,\n    args.pop()), ...args);\n};\n\n/**\n * @desc Will replace all occurrences.\n * @param {String} replaceable Source for replacements.\n * @param {String} from Property that should be replaced.\n * @param {T} to Proprty that should be included instead of `from` propperty.\n * @return {String} New String with all replacements.\n */\nexport function replaceAll(replaceable, from, to) {\n  return (includes(replaceable, from))\n    ? replaceAll(replaceable.replace(from, to), from, to)\n    : replaceable;\n};\n\n/**\n * @desc Will replace all different occurrences.\n * @param {String} replaceable Source for replacements.\n * @param {Array<T>} fromList Array of properties that should be replaced.\n * @param {Array<T>} to Array of properties that should be injected to source.\n * @return {String} New String with all replacements.\n */\nexport function replaceAllDifferences(replaceable, fromList, to) {\n  return (fromList.length)\n    ? replaceAllDifferences(\n      replaceAll(replaceable, fromList.pop(), to), fromList, to)\n    : replaceable;\n};\n\n/**\n * @desc Work similary to indexOf method but returns boolean.\n * @param {String} source String source.\n * @param {String|number} includement Searching value.\n * @returns {boolean} Result of searching as boolean.\n */\nexport function includes(source, includement) {\n  return !!(~source.indexOf(includement));\n};\n\n/**\n * @desc Removes leading and trailing whitespace or\n * specified characters from string.\n * @param {String} stringSource The string to trim.\n * @returns Returns the trimmed string.\n */\nexport function trim(stringSource) {\n  return stringSource.replace(/^\\s+|\\s+$/g, '');\n};\n\n/**\n * @desc Will compare two strings with ignore case.\n * @param {String} str1 First string to compare.\n * @param {String} str2 Second string to compare.\n * @returns {boolean} Result of comparison.\n */\nexport function equalsIgnoreCase(str1, str2) {\n  return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();\n};\n\n/**\n * @desc Will make a capital first letter.\n * @param {String} str Source string.\n * @returns {String} Source with first capital letter.\n */\nexport function upperFirst(str = '') {\n  let firstChar = str.charAt(0).toUpperCase()\n    , restOfString = str.substring(1, str.length);\n  return `${firstChar}${str.substring(1, str.length)}`;\n};\n\n/**\n * @desc Will return first upper letter from source.\n * @param {String} source Source for searching.\n * @returns {String} First capital letter.\n */\nexport function getFirstUpperLetter(source) {\n  return source.split('').filter(v => /[A-Z]/.test(v))[0];\n};\n\n/**\n * @desc Will return last upper letter from source.\n * @param {String} source Source for searching.\n * @returns {String} Last capital letter.\n */\nexport function getLastUpperLetter(source) {\n  let allСoincidences = source.split('').filter(v => /[A-Z]/.test(v))\n  return allСoincidences[allСoincidences.length-1];\n};\n\n/**\n * @desc Will return first lower letter from source.\n * @param {String} source Source for searching.\n * @returns {String} First lower letter.\n */\nexport function getFirstLowerLetter(source) {\n  return source.split('').filter(v => /[a-z]/.test(v))[0];\n};\n\n/**\n * @desc Will return last lower letter from source.\n * @param {String} source Source for searching.\n * @returns {String} Last lower letter.\n */\nexport function getLastLowerLetter(source) {\n  let allСoincidences = source.split('').filter(v => /[a-z]/.test(v))\n  return allСoincidences[allСoincidences.length-1];\n};\n\n/**\n * @desc Splits string into an array of its words.\n * @param {String} strValue The string to inspect.\n * @returns {Array<String>} Returns the words of string.\n */\nexport function words(strValue) {\n  let r = (str, ...args) => str.replace(...args);\n  return FnLib.pipe(\n    s => r(s, /[^-a-z-A-Z0-9]+/g, ','),\n    s => r(s, /([a-z])([A-Z])/g, '$1 $2'),\n    s => r(s, /([A-Z])([a-z])/g, ' $1$2'),\n    s => r(s, /\\ +/g, ','),\n    s => s.split(','),\n    ArrLib.compact\n  )(strValue);\n};\n\n/**\n * @desc Converts string to snake case.\n * @param {String} str The string to convert.\n * @returns {String} Returns the snake cased string.\n */\nexport function snakeCase(str) {\n  return words(str).join('_').toLowerCase();\n};\n\n/**\n * @desc Converts string to kebab case.\n * @param {String} str The string to convert.\n * @returns {String} Returns the kebab cased string.\n */\nexport function kebabCase(str) {\n  return words(str).join('-').toLowerCase();\n};\n\n/**\n * @desc Converts string to camel case.\n * @param {String} str The string to convert.\n * @returns {String} Returns the camel cased string.\n */\nexport function camelCase(str) {\n  return words(str).reduce((accumulator, value) =>\n    (accumulator)\n        ? `${accumulator}${upperFirst(value.toLowerCase())}`\n        : value.toLowerCase(), '');\n};\n\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/String/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 226,
    "kind": "function",
    "name": "buildResource",
    "memberof": "src/String/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/String/index.js~buildResource",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/String/index.js",
    "importStyle": "{buildResource}",
    "description": "Works similarly to templates. Sequentially replaces all\nplaceholders ({0}, {1}, {2}...).",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "src",
        "description": "Source for replacements."
      },
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Values for replacements."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "New String with all replacements."
    }
  },
  {
    "__docId__": 227,
    "kind": "function",
    "name": "replaceAll",
    "memberof": "src/String/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/String/index.js~replaceAll",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/String/index.js",
    "importStyle": "{replaceAll}",
    "description": "Will replace all occurrences.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "replaceable",
        "description": "Source for replacements."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "Property that should be replaced."
      },
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "Proprty that should be included instead of `from` propperty."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "New String with all replacements."
    }
  },
  {
    "__docId__": 228,
    "kind": "function",
    "name": "replaceAllDifferences",
    "memberof": "src/String/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/String/index.js~replaceAllDifferences",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/String/index.js",
    "importStyle": "{replaceAllDifferences}",
    "description": "Will replace all different occurrences.",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "replaceable",
        "description": "Source for replacements."
      },
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "fromList",
        "description": "Array of properties that should be replaced."
      },
      {
        "nullable": null,
        "types": [
          "Array<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "Array of properties that should be injected to source."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "New String with all replacements."
    }
  },
  {
    "__docId__": 229,
    "kind": "function",
    "name": "includes",
    "memberof": "src/String/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/String/index.js~includes",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/String/index.js",
    "importStyle": "{includes}",
    "description": "Work similary to indexOf method but returns boolean.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Result of searching as boolean."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "String source."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "includement",
        "description": "Searching value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Result of searching as boolean."
    }
  },
  {
    "__docId__": 230,
    "kind": "function",
    "name": "trim",
    "memberof": "src/String/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/String/index.js~trim",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/String/index.js",
    "importStyle": "{trim}",
    "description": "Removes leading and trailing whitespace or\nspecified characters from string.",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Returns the trimmed string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "stringSource",
        "description": "The string to trim."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Returns the trimmed string."
    }
  },
  {
    "__docId__": 231,
    "kind": "function",
    "name": "equalsIgnoreCase",
    "memberof": "src/String/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/String/index.js~equalsIgnoreCase",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/String/index.js",
    "importStyle": "{equalsIgnoreCase}",
    "description": "Will compare two strings with ignore case.",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Result of comparison."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str1",
        "description": "First string to compare."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str2",
        "description": "Second string to compare."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Result of comparison."
    }
  },
  {
    "__docId__": 232,
    "kind": "function",
    "name": "upperFirst",
    "memberof": "src/String/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/String/index.js~upperFirst",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/String/index.js",
    "importStyle": "{upperFirst}",
    "description": "Will make a capital first letter.",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Source with first capital letter."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "Source string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Source with first capital letter."
    }
  },
  {
    "__docId__": 233,
    "kind": "function",
    "name": "getFirstUpperLetter",
    "memberof": "src/String/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/String/index.js~getFirstUpperLetter",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/String/index.js",
    "importStyle": "{getFirstUpperLetter}",
    "description": "Will return first upper letter from source.",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} First capital letter."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Source for searching."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "First capital letter."
    }
  },
  {
    "__docId__": 234,
    "kind": "function",
    "name": "getLastUpperLetter",
    "memberof": "src/String/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/String/index.js~getLastUpperLetter",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/String/index.js",
    "importStyle": "{getLastUpperLetter}",
    "description": "Will return last upper letter from source.",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Last capital letter."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Source for searching."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Last capital letter."
    }
  },
  {
    "__docId__": 235,
    "kind": "function",
    "name": "getFirstLowerLetter",
    "memberof": "src/String/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/String/index.js~getFirstLowerLetter",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/String/index.js",
    "importStyle": "{getFirstLowerLetter}",
    "description": "Will return first lower letter from source.",
    "lineNumber": 109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} First lower letter."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Source for searching."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "First lower letter."
    }
  },
  {
    "__docId__": 236,
    "kind": "function",
    "name": "getLastLowerLetter",
    "memberof": "src/String/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/String/index.js~getLastLowerLetter",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/String/index.js",
    "importStyle": "{getLastLowerLetter}",
    "description": "Will return last lower letter from source.",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Last lower letter."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Source for searching."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Last lower letter."
    }
  },
  {
    "__docId__": 237,
    "kind": "function",
    "name": "words",
    "memberof": "src/String/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/String/index.js~words",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/String/index.js",
    "importStyle": "{words}",
    "description": "Splits string into an array of its words.",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<String>} Returns the words of string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "strValue",
        "description": "The string to inspect."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<String>"
      ],
      "spread": false,
      "description": "Returns the words of string."
    }
  },
  {
    "__docId__": 238,
    "kind": "function",
    "name": "snakeCase",
    "memberof": "src/String/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/String/index.js~snakeCase",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/String/index.js",
    "importStyle": "{snakeCase}",
    "description": "Converts string to snake case.",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Returns the snake cased string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to convert."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Returns the snake cased string."
    }
  },
  {
    "__docId__": 239,
    "kind": "function",
    "name": "kebabCase",
    "memberof": "src/String/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/String/index.js~kebabCase",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/String/index.js",
    "importStyle": "{kebabCase}",
    "description": "Converts string to kebab case.",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Returns the kebab cased string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to convert."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Returns the kebab cased string."
    }
  },
  {
    "__docId__": 240,
    "kind": "function",
    "name": "camelCase",
    "memberof": "src/String/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/String/index.js~camelCase",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/String/index.js",
    "importStyle": "{camelCase}",
    "description": "Converts string to camel case.",
    "lineNumber": 163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Returns the camel cased string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to convert."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Returns the camel cased string."
    }
  },
  {
    "__docId__": 241,
    "kind": "file",
    "name": "src/Type/index.js",
    "content": "import * as TypeConstants from '../Constants/types';\n\n\n/**\n * @desc Checks if passed value is null.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is null.\n */\nexport function isNull(valToCheck) {\n  return (!valToCheck && typeof valToCheck === TypeConstants.OBJECT);\n};\n\n/**\n * @desc Checks if passed value is not null.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is not null.\n */\nexport function isNotNull(valToCheck) {\n  return !isNull(valToCheck);\n};\n\n/**\n * @desc Checks if passed value is NaN.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is NaN.\n */\nexport function isNaN(valToCheck) {\n  return valToCheck !== valToCheck;\n};\n\n/**\n * @desc Checks if passed value is not NaN.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is not NaN.\n */\nexport function isNotNaN(valToCheck) {\n  return !isNaN(valToCheck);\n};\n\n/**\n * @desc Checks if passed value is negative zero.\n * @param {number} numberToCheck Value to Check.\n * @return {boolean} Returns true is passed value is negative zero.\n */\nexport function isNegativeZero(numberToCheck) {\n  let number = Number(numberToCheck);\n  return (number === 0) && (1 / number === -Infinity);\n};\n\n/**\n * @desc Checks if passed value is not negative zero.\n * @param {number} numberToCheck Value to Check.\n * @return {boolean} Returns true is passed value is not negative zero.\n */\nexport function isNotNegativeZero(numberToCheck) {\n  return !isNegativeZero(numberToCheck);\n};\n\n/**\n * @desc Checks if passed value is undefined.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is undefined.\n */\nexport function isUndefined(valToCheck) {\n  return getType(valToCheck) === TypeConstants.UNDEFINED;\n};\n\n/**\n * @desc Checks if passed value is not undefined.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is not undefined.\n */\nexport function isNotUndefined(valToCheck) {\n  return !isUndefined(valToCheck);\n};\n\n/**\n * @desc Checks if passed value is number.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is number.\n */\nexport function isNumber(valToCheck) {\n  return getType(valToCheck) === TypeConstants.NUMBER;\n};\n\n/**\n * @desc Checks if passed value is not number.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is not number.\n */\nexport function isNotNumber(valToCheck) {\n  return !isNumber(valToCheck);\n};\n\n/**\n * @desc Checks if passed value is boolean.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is boolean.\n */\nexport function isBoolean(valToCheck) {\n  return getType(valToCheck) === TypeConstants.BOOLEAN;\n};\n\n/**\n * @desc Checks if passed value is not boolean.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is not boolean.\n */\nexport function isNotBoolean(valToCheck) {\n  return !isBoolean(valToCheck);\n};\n\n/**\n * @desc Checks if passed value is string.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is string.\n */\nexport function isString(valToCheck) {\n  return getType(valToCheck) === TypeConstants.STRING;\n};\n\n/**\n * @desc Checks if passed value is not string.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is not string.\n */\nexport function isNotString(valToCheck) {\n  return !isString(valToCheck);\n};\n\n/**\n * @desc Checks if passed value is Symbol.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is Symbol.\n */\nexport function isSymbol(valToCheck) {\n  return getType(valToCheck) === TypeConstants.SYMBOL;\n};\n\n/**\n * @desc Checks if passed value is not Symbol.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is not Symbol.\n */\nexport function isNotSymbol(valToCheck) {\n  return !isSymbol(valToCheck);\n};\n\n/**\n * @desc Checks if passed value is Object.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is Object.\n */\nexport function isObject(valToCheck) {\n  return getType(valToCheck) === TypeConstants.OBJECT;\n};\n\n/**\n * @desc Checks if passed value is not Object.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is not Object.\n */\nexport function isNotObject(valToCheck) {\n  return !isObject(valToCheck);\n};\n\n/**\n * @desc Checks if passed value is Date.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is Date.\n */\nexport function isDate(valToCheck) {\n  return getType(valToCheck) === TypeConstants.DATE;\n};\n\n/**\n * @desc Checks if passed value is not Date.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is not Date.\n */\nexport function isNotDate(valToCheck) {\n  return !isDate(valToCheck);\n};\n\n/**\n * @desc Checks if passed value is RegExp.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is RegExp.\n */\nexport function isRegExp(valToCheck) {\n  return getType(valToCheck) === TypeConstants.REG_EXP;\n};\n\n/**\n * @desc Checks if passed value is not RegExp.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is not RegExp.\n */\nexport function isNotRegExp(valToCheck) {\n  return !isRegExp(valToCheck);\n};\n\n/**\n * @desc Checks if passed value is Array.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is Array.\n */\nexport function isArray(valToCheck) {\n  return getType(valToCheck) === TypeConstants.ARRAY;\n};\n\n/**\n * @desc Checks if passed value is not Array.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is not Array.\n */\nexport function isNotArray(valToCheck) {\n  return !isArray(valToCheck);\n};\n\n/**\n * @desc Checks if passed value is Function.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is Function.\n */\nexport function isFunction(valToCheck) {\n  return getType(valToCheck) === TypeConstants.FUNCTION;\n};\n\n/**\n * @desc Checks if passed value is not Function.\n * @param {T} valToCheck Value to Check.\n * @return {boolean} Returns true is passed value is not Function.\n */\nexport function isNotFunction(valToCheck) {\n  return !isFunction(valToCheck);\n};\n\n/**\n * @desc Determine whether a value is a primitive type.\n * @param {T} value Value to Check.\n * @return {boolean} Returns true is passed value is primitive type.\n */\nexport function isPrimitive(value) {\n  return [isNull, isNumber, isBoolean, isString,\n    value => value === void 0].some(fn => fn(value));\n}\n\n/**\n * @desc Determine whether a value is not a primitive type.\n * @param {T} value Value to Check.\n * @return {boolean} Returns true is passed value is not primitive type.\n */\nexport function isNotPrimitive(value) {\n  return !isPrimitive(value);\n}\n\n/**\n * @desc Checks type of passed value.\n * @param {T} valToCheck Value to Check.\n * @return {string} Returns object type.\n */\nexport function getType(valToCheck) {\n  let toString = Object.prototype.toString\n    , valType = toString.call(valToCheck);\n  return valType.replace(/[\\[\\]']+/g,'').split(' ')[1].toLowerCase();\n};\n\n/**\n * @desc Takes expectation and returns predicate function which\n * will be checking if new passed variable equal to expectation.\n * @param {T} expectation Expected value.\n * @return {Function} Returns predicate function.\n */\nexport function toBe(expectation) {\n  return value => Object.is(expectation, value);\n};\n\n/**\n * @desc Takes expectation and returns predicate function which\n * will be checking if new passed variable not equal to expectation.\n * @param {T} expectation Not expected value.\n * @return {Function} Returns predicate function.\n */\nexport function notToBe(expectation) {\n  return value => !Object.is(expectation, value);\n};\n\n/**\n * @desc Returns class name.\n * @example\n * getTypeByClass(String); // string\n * getTypeByClass(RegExp); // regexp\n * getTypeByClass(Object); // object\n * getTypeByClass(Function); // function\n * getTypeByClass(Date); // date\n * getTypeByClass(Boolean); // boolean\n * getTypeByClass(Number); // number\n * getTypeByClass(Array); // array\n * getTypeByClass(Symbol); // symbol\n *\n * class Person {}\n * getTypeByClass(Person); // person\n *\n * @param {T} clazz Source which should be a class.\n * @returns {string} Name of class.\n */\nexport function getTypeByClass(clazz) {\n  return clazz.name.toLowerCase();\n}\n\n/**\n * @desc Checks if type is correct and throws error in negative case.\n * @throws {TypeError} If passed actualType has incorrect type.\n * @example\n * typeCheck(String, ''); // ''\n * typeCheck(RegExp, /ab+c/); // /ab+c/\n * typeCheck(Object, {}); // {}\n * typeCheck(Function, () => {}); // () => {}\n * typeCheck(Date, new Date()); // Sun Nov 04 2018 01:25:43 GMT+0200 (Eastern European Standard Time)\n * typeCheck(Boolean, true); // true\n * typeCheck(Number, 333); // 333\n * typeCheck(Array, []); // []\n * typeCheck(Symbol, Symbol('desc')); // Symbol('desc')\n *\n * typeCheck(String, 777); // TypeError\n * typeCheck(Number, 'hello'); // TypeError\n * typeCheck(Boolean, {}); // TypeError\n * ...\n *\n * @param {T} clazz Expected source which should be a class.\n * @param {any} actualType Value which should be checked.\n * @returns {any} actualType if type is correct else throws error.\n */\nexport function typeCheck(clazz, actualType) {\n  let constrType = getTypeByClass(clazz)\n    , valueType = getType(actualType);\n\n  if (constrType !== valueType)\n      throw new TypeError(`Type mismatch. Expected [${constrType}] but found [${valueType}]`);\n\n  return actualType;\n};\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/Type/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 242,
    "kind": "function",
    "name": "isNull",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isNull",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isNull}",
    "description": "Checks if passed value is null.",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is null."
    }
  },
  {
    "__docId__": 243,
    "kind": "function",
    "name": "isNotNull",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isNotNull",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isNotNull}",
    "description": "Checks if passed value is not null.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is not null."
    }
  },
  {
    "__docId__": 244,
    "kind": "function",
    "name": "isNaN",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isNaN",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isNaN}",
    "description": "Checks if passed value is NaN.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is NaN."
    }
  },
  {
    "__docId__": 245,
    "kind": "function",
    "name": "isNotNaN",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isNotNaN",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isNotNaN}",
    "description": "Checks if passed value is not NaN.",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is not NaN."
    }
  },
  {
    "__docId__": 246,
    "kind": "function",
    "name": "isNegativeZero",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isNegativeZero",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isNegativeZero}",
    "description": "Checks if passed value is negative zero.",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "numberToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is negative zero."
    }
  },
  {
    "__docId__": 247,
    "kind": "function",
    "name": "isNotNegativeZero",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isNotNegativeZero",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isNotNegativeZero}",
    "description": "Checks if passed value is not negative zero.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "numberToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is not negative zero."
    }
  },
  {
    "__docId__": 248,
    "kind": "function",
    "name": "isUndefined",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isUndefined",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isUndefined}",
    "description": "Checks if passed value is undefined.",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is undefined."
    }
  },
  {
    "__docId__": 249,
    "kind": "function",
    "name": "isNotUndefined",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isNotUndefined",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isNotUndefined}",
    "description": "Checks if passed value is not undefined.",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is not undefined."
    }
  },
  {
    "__docId__": 250,
    "kind": "function",
    "name": "isNumber",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isNumber",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isNumber}",
    "description": "Checks if passed value is number.",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is number."
    }
  },
  {
    "__docId__": 251,
    "kind": "function",
    "name": "isNotNumber",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isNotNumber",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isNotNumber}",
    "description": "Checks if passed value is not number.",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is not number."
    }
  },
  {
    "__docId__": 252,
    "kind": "function",
    "name": "isBoolean",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isBoolean",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isBoolean}",
    "description": "Checks if passed value is boolean.",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is boolean."
    }
  },
  {
    "__docId__": 253,
    "kind": "function",
    "name": "isNotBoolean",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isNotBoolean",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isNotBoolean}",
    "description": "Checks if passed value is not boolean.",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is not boolean."
    }
  },
  {
    "__docId__": 254,
    "kind": "function",
    "name": "isString",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isString",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isString}",
    "description": "Checks if passed value is string.",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is string."
    }
  },
  {
    "__docId__": 255,
    "kind": "function",
    "name": "isNotString",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isNotString",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isNotString}",
    "description": "Checks if passed value is not string.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is not string."
    }
  },
  {
    "__docId__": 256,
    "kind": "function",
    "name": "isSymbol",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isSymbol",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isSymbol}",
    "description": "Checks if passed value is Symbol.",
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is Symbol."
    }
  },
  {
    "__docId__": 257,
    "kind": "function",
    "name": "isNotSymbol",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isNotSymbol",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isNotSymbol}",
    "description": "Checks if passed value is not Symbol.",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is not Symbol."
    }
  },
  {
    "__docId__": 258,
    "kind": "function",
    "name": "isObject",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isObject",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isObject}",
    "description": "Checks if passed value is Object.",
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is Object."
    }
  },
  {
    "__docId__": 259,
    "kind": "function",
    "name": "isNotObject",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isNotObject",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isNotObject}",
    "description": "Checks if passed value is not Object.",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is not Object."
    }
  },
  {
    "__docId__": 260,
    "kind": "function",
    "name": "isDate",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isDate",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isDate}",
    "description": "Checks if passed value is Date.",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is Date."
    }
  },
  {
    "__docId__": 261,
    "kind": "function",
    "name": "isNotDate",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isNotDate",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isNotDate}",
    "description": "Checks if passed value is not Date.",
    "lineNumber": 181,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is not Date."
    }
  },
  {
    "__docId__": 262,
    "kind": "function",
    "name": "isRegExp",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isRegExp",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isRegExp}",
    "description": "Checks if passed value is RegExp.",
    "lineNumber": 190,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is RegExp."
    }
  },
  {
    "__docId__": 263,
    "kind": "function",
    "name": "isNotRegExp",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isNotRegExp",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isNotRegExp}",
    "description": "Checks if passed value is not RegExp.",
    "lineNumber": 199,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is not RegExp."
    }
  },
  {
    "__docId__": 264,
    "kind": "function",
    "name": "isArray",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isArray",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isArray}",
    "description": "Checks if passed value is Array.",
    "lineNumber": 208,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is Array."
    }
  },
  {
    "__docId__": 265,
    "kind": "function",
    "name": "isNotArray",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isNotArray",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isNotArray}",
    "description": "Checks if passed value is not Array.",
    "lineNumber": 217,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is not Array."
    }
  },
  {
    "__docId__": 266,
    "kind": "function",
    "name": "isFunction",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isFunction",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isFunction}",
    "description": "Checks if passed value is Function.",
    "lineNumber": 226,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is Function."
    }
  },
  {
    "__docId__": 267,
    "kind": "function",
    "name": "isNotFunction",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isNotFunction",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isNotFunction}",
    "description": "Checks if passed value is not Function.",
    "lineNumber": 235,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is not Function."
    }
  },
  {
    "__docId__": 268,
    "kind": "function",
    "name": "isPrimitive",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isPrimitive",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isPrimitive}",
    "description": "Determine whether a value is a primitive type.",
    "lineNumber": 244,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is primitive type."
    }
  },
  {
    "__docId__": 269,
    "kind": "function",
    "name": "isNotPrimitive",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~isNotPrimitive",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{isNotPrimitive}",
    "description": "Determine whether a value is not a primitive type.",
    "lineNumber": 254,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true is passed value is not primitive type."
    }
  },
  {
    "__docId__": 270,
    "kind": "function",
    "name": "getType",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~getType",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{getType}",
    "description": "Checks type of passed value.",
    "lineNumber": 263,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "valToCheck",
        "description": "Value to Check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns object type."
    }
  },
  {
    "__docId__": 271,
    "kind": "function",
    "name": "toBe",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~toBe",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{toBe}",
    "description": "Takes expectation and returns predicate function which\nwill be checking if new passed variable equal to expectation.",
    "lineNumber": 275,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": "Expected value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Returns predicate function."
    }
  },
  {
    "__docId__": 272,
    "kind": "function",
    "name": "notToBe",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~notToBe",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{notToBe}",
    "description": "Takes expectation and returns predicate function which\nwill be checking if new passed variable not equal to expectation.",
    "lineNumber": 285,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": "Not expected value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Returns predicate function."
    }
  },
  {
    "__docId__": 273,
    "kind": "function",
    "name": "getTypeByClass",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~getTypeByClass",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{getTypeByClass}",
    "description": "Returns class name.",
    "examples": [
      "getTypeByClass(String); // string\ngetTypeByClass(RegExp); // regexp\ngetTypeByClass(Object); // object\ngetTypeByClass(Function); // function\ngetTypeByClass(Date); // date\ngetTypeByClass(Boolean); // boolean\ngetTypeByClass(Number); // number\ngetTypeByClass(Array); // array\ngetTypeByClass(Symbol); // symbol\n\nclass Person {}\ngetTypeByClass(Person); // person"
    ],
    "lineNumber": 308,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Name of class."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "clazz",
        "description": "Source which should be a class."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Name of class."
    }
  },
  {
    "__docId__": 274,
    "kind": "function",
    "name": "typeCheck",
    "memberof": "src/Type/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Type/index.js~typeCheck",
    "access": "public",
    "export": true,
    "importPath": "js-helpers/src/Type/index.js",
    "importStyle": "{typeCheck}",
    "description": "Checks if type is correct and throws error in negative case.",
    "examples": [
      "typeCheck(String, ''); // ''\ntypeCheck(RegExp, /ab+c/); // /ab+c/\ntypeCheck(Object, {}); // {}\ntypeCheck(Function, () => {}); // () => {}\ntypeCheck(Date, new Date()); // Sun Nov 04 2018 01:25:43 GMT+0200 (Eastern European Standard Time)\ntypeCheck(Boolean, true); // true\ntypeCheck(Number, 333); // 333\ntypeCheck(Array, []); // []\ntypeCheck(Symbol, Symbol('desc')); // Symbol('desc')\n\ntypeCheck(String, 777); // TypeError\ntypeCheck(Number, 'hello'); // TypeError\ntypeCheck(Boolean, {}); // TypeError\n..."
    ],
    "lineNumber": 335,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any} actualType if type is correct else throws error."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "clazz",
        "description": "Expected source which should be a class."
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "actualType",
        "description": "Value which should be checked."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "actualType if type is correct else throws error."
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "If passed actualType has incorrect type."
      }
    ]
  },
  {
    "__docId__": 275,
    "kind": "file",
    "name": "src/index.js",
    "content": "export * from './Array';\nexport * from './Lens';\nexport * from './Function';\nexport * from './Function-Combinators';\nexport * from './Fantasy-Land';\nexport * from './Fantasy-Land/maybe';\nexport * from './Fantasy-Land/either';\nexport * from './Fantasy-Land/setoid';\nexport * from './Context';\nexport * from './Math';\nexport * from './Object';\nexport * from './Predicate';\nexport * from './Predicate-Combinator';\nexport * from './String';\nexport * from './Type';\nexport * from './Constants';\nexport * from './Data-Structures';\n\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# JavaScript Utility Library\n\n# Modules\n- Array\n- Context\n- SafeTupleBuilder\n- Tuple\n- Fantasy-Land\n- Function-Combinators\n- Function\n- Lens\n- Math\n- Object\n- Predicate-Combinator\n- Predicate\n- String\n- Type \n\n\n\n# Functions\n- Array\n  - any\n  - castArray\n  - changeOrder\n  - cloneArray\n  - compact\n  - every\n  - fill\n  - fillLeft\n  - fillRight\n  - filter\n  - find\n  - first\n  - flatten\n  - groupBy\n  - groupByFn\n  - groupByPath\n  - groupByProp\n  - head\n  - last\n  - map\n  - nth\n  - numAndStrComparator\n  - pluck\n  - reject\n  - sample\n  - shuffle\n  - some\n  - sortBy\n  - tail\n  - take\n  - takeRight\n  - takeRightWhile\n  - takeWhile\n  - times\n  - uniq\n  - without\n  - zip\n  - zipWithProjection\n- Constants\n  - EMPTY\n  - ARRAY\n  - BOOLEAN\n  - DATE\n  - FUNCTION\n  - NULL\n  - NUMBER\n  - OBJECT\n  - REG_EXP\n  - STRING\n  - SYMBOL\n  - UNDEFINED\n- Context\n  - invoke\n  - invokeWithCtx\n  - using\n  - wrap\n- Data-Structures\n  - SafeTupleBuilder\n  - Tuple\n- Error\n  - IncorrectArgsTypeError\n  - throwIncorrectArgsTypeErrorIfSomeOf\n- Fantasy-Land\n  - Either\n  - Left\n  - Right\n  - Applicative\n  - Apply\n  - Functor\n  - LazyFunctor\n  - Monad\n  - Just\n  - Maybe\n  - Nothing\n  - isSetoid\n  - toSetoid\n- Function\n - after\n - compose\n - curry\n - memoize\n - once\n - orCurry\n - partial\n - pipe\n - rearg\n - unary\n- Function-Combinators\n  - alt\n  - always\n  - duplication\n  - flip\n  - fork\n  - identity\n  - seq\n  - tap\n  - thrush\n- Lens\n  - assoc\n  - assocPath\n  - lensIndex\n  - lensProp\n  - path\n  - pathEq\n  - pathOr\n  - pathSatisfies\n  - prop\n- Math\n  - add\n  - compareDecimalNumbers\n  - divide\n  - getRandomInt\n  - getRandomIntFromTo\n  - multiply\n  - subtract\n- Object\n  - cloneObject\n  - conformsTo\n  - deepClone\n  - deepEquals\n  - deepFreeze\n  - getWithCtx\n  - getWithProps\n  - objectProjection\n  - omit\n  - pick\n  - safeGet\n  - safeGetOr\n- Predicate\n  - eq\n  - gt\n  - gte\n  - lt\n  - lte\n  - notEq\n  - range\n  - rangeEqual\n- Predicate-Combinator\n  - and\n  - not\n  - notOr\n  - or\n- String\n  - buildResource\n  - camelCase\n  - equalsIgnoreCase\n  - getFirstLowerLetter\n  - getFirstUpperLetter\n  - getLastLowerLetter\n  - getLastUpperLetter\n  - includes\n  - kebabCase\n  - replaceAll\n  - replaceAllDifferences\n  - snakeCase\n  - trim\n  - upperFirst\n  - words\n- Type\n  - getType\n  - getTypeByClass\n  - isArray\n  - isBoolean\n  - isDate\n  - isFunction\n  - isNaN\n  - isNegativeZero\n  - isNotArray\n  - isNotBoolean\n  - isNotDate\n  - isNotFunction\n  - isNotNaN\n  - isNotNegativeZero\n  - isNotNull\n  - isNotNumber\n  - isNotObject\n  - isNotPrimitive\n  - isNotRegExp\n  - isNotString\n  - isNotSymbol\n  - isNotUndefined\n  - isNull\n  - isNumber\n  - isObject\n  - isPrimitive\n  - isRegExp\n  - isString\n  - isSymbol\n  - isUndefined\n  - notToBe\n  - toBe\n  - typeCheck\n\n",
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"js-helpers\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"mocha --timeout 30000 --compilers js:babel-core/register \\\"specs/**/*.spec.js\\\"\",\n    \"test-fn-lib\": \"mocha --timeout 30000 --compilers js:babel-core/register ./specs/function.spec.js\",\n    \"test-fnc-lib\": \"mocha --timeout 30000 --compilers js:babel-core/register ./specs/function-combinators.spec.js\",\n    \"test-pc-lib\": \"mocha --timeout 30000 --compilers js:babel-core/register ./specs/predicate-combinator.spec.js\",\n    \"test-arr-lib\": \"mocha --timeout 30000 --compilers js:babel-core/register ./specs/array.spec.js\",\n    \"test-ctx-lib\": \"mocha --timeout 30000 --compilers js:babel-core/register ./specs/context.spec.js\",\n    \"test-mth-lib\": \"mocha --timeout 30000 --compilers js:babel-core/register ./specs/math.spec.js\",\n    \"test-obj-lib\": \"mocha --timeout 30000 --compilers js:babel-core/register ./specs/object.spec.js\",\n    \"test-prd-lib\": \"mocha --timeout 30000 --compilers js:babel-core/register ./specs/predicate.spec.js\",\n    \"test-str-lib\": \"mocha --timeout 30000 --compilers js:babel-core/register ./specs/string.spec.js\",\n    \"test-type-lib\": \"mocha --timeout 30000 --compilers js:babel-core/register ./specs/type.spec.js\",\n    \"test-fl-lib\": \"mocha --timeout 30000 --compilers js:babel-core/register ./specs/fantasy-land.spec.js\",\n    \"test-lens-lib\": \"mocha --timeout 30000 --compilers js:babel-core/register ./specs/lens.spec.js\",\n    \"test-ds-lib\": \"mocha --timeout 30000 --compilers js:babel-core/register ./specs/data-structures.spec.js\",\n    \"compile\": \"./node_modules/.bin/babel  ./src --experimental --source-maps-inline -d ./dist\",\n    \"compile-es6-to-node\": \"./node_modules/.bin/babel ./src --experimental --source-maps-inline -d ./dist\",\n    \"compile-helpers-js-experimental\": \"cp -Rf src/* ../helpers-js-experimental && cd ../helpers-js-experimental\",\n    \"git-push-helpers-js-experimental\": \"cd ../helpers-js-experimental && git add . && git commit -a -m \\\"lib update\\\" && git push\",\n    \"compile-helpers-js\": \"./node_modules/.bin/babel ./src --experimental --source-maps-inline -d ../helpers-js\",\n    \"git-push-helpers-js\": \"cd ../helpers-js && git add . && git commit -a -m \\\"lib update\\\" && git push\",\n    \"git-push-current\": \"git add . && git commit -a -m \\\"lib update\\\" && git push\",\n    \"git-push-all\": \"npm run git-push-current && npm run compile-helpers-js-experimental && npm run git-push-helpers-js-experimental && npm run compile-helpers-js && npm run git-push-helpers-js\",\n    \"build-docs\": \"./node_modules/.bin/esdoc\",\n    \"show-docs\": \"npm run build-docs && open ./docs/index.html\"\n  },\n  \"author\": \"Oleh Baranovskyi\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"babel-cli\": \"6.26.0\",\n    \"babel-core\": \"6.26.0\",\n    \"babel-preset-env\": \"1.6.0\",\n    \"chai\": \"3.5.0\",\n    \"esdoc\": \"1.0.4\",\n    \"esdoc-standard-plugin\": \"1.0.0\",\n    \"mocha\": \"3.1.2\"\n  },\n  \"dependencies\": {\n    \"babel-plugin-transform-class-properties\": \"6.24.1\"\n  }\n}\n",
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 276,
    "kind": "testFile",
    "name": "specs/array.spec.js",
    "content": "import { assert, expect } from 'chai';\n\nimport * as ArrLib from '../src/Array';\n\n/** @test {Array} */\ndescribe('Array Library Tests', () => {\n\n  /** @test {Array#sortBy} */\n  it('test: .sortBy(source, propList)', () => {\n    let given = [\n      { 'name': 'fred',   'age': 48 },\n      { 'name': 'barney', 'age': 36 },\n      { 'name': 'fred',   'age': 32 },\n      { 'name': 'barney', 'age': 34 }\n    ];\n    let actual = ArrLib.sortBy(given, ['name', 'age']);\n\n    assert.deepEqual(actual,\n      [\n        { name: 'barney', age: 34 },\n        { name: 'barney', age: 36 },\n        { name: 'fred', age: 32 },\n        { name: 'fred', age: 48 }\n      ]);\n  });\n\n  /** @test {Array#groupByProp} */\n  it('test: .groupByProp(arr, groupVal)', () => {\n    let actualObjArr = [{name: 'John', age: 21}, {name: 'Liza', age: 23}, {name: 'John', age: 23}]\n      , actualByLength = ArrLib.groupByProp(['one', 'two', 'three'], 'length')\n      , actualByName = ArrLib.groupByProp(actualObjArr, 'name')\n      , actualByAge = ArrLib.groupByProp(actualObjArr, 'age');\n\n      assert.deepEqual(actualByLength, { '3': [ 'one', 'two' ], '5': [ 'three' ] });\n      assert.deepEqual(actualByName, { John: [ { name: 'John', age: 21 }, { name: 'John', age: 23 } ], Liza: [ { name: 'Liza', age: 23 } ] });\n      assert.deepEqual(actualByAge, { '21': [ { name: 'John', age: 21 } ], '23': [ { name: 'Liza', age: 23 }, { name: 'John', age: 23 } ] });\n  });\n\n  /** @test {Array#groupByFn} */\n  it('test: .groupByFn(arr, groupFn)', () => {\n    let actualByMathFloor = ArrLib.groupByFn([6.1, 4.2, 6.3], Math.floor)\n      , actualByCustomName = ArrLib.groupByFn([{name: 'John', age: 21}, {name: 'Liza', age: 23}, {name: 'John', age: 23}], item => `name_${item.name}`);\n\n      assert.deepEqual(actualByMathFloor, { '4': [ 4.2 ], '6': [ 6.1, 6.3 ] });\n      assert.deepEqual(actualByCustomName, { name_John: [ { name: 'John', age: 21 }, { name: 'John', age: 23 } ], name_Liza: [ { name: 'Liza', age: 23 } ] });\n  });\n\n  /** @test {Array#groupByPath} */\n  it('test: .groupByPath(arr, groupPath)', () => {\n    let actualByObject = ArrLib.groupByPath([\n      { name: { first: 'John', last: 'aaa' }, age: 21 },\n      { name: { first: 'Liza', last: 'bbb'}, age: 23 },\n      { name: { first: 'John', last: 'ccc'}, age: 23 } ], ['name', 'first']);\n\n    assert.deepEqual(actualByObject, {John: [{name:{first:'John', last:'aaa'}, age:21},{name: {first:'John', last: 'ccc'}, age:23}], Liza:[{name :{first:'Liza', last:'bbb'}, age:23}]});\n  });\n\n  /** @test {Array#groupBy} */\n  it('test: .groupBy(...args)', () => {\n    let actualObjArr = [{name: 'John', age: 21}, {name: 'Liza', age: 23}, {name: 'John', age: 23}]\n      , actualByLength = ArrLib.groupBy(['one', 'two', 'three'], 'length')\n      , actualByName = ArrLib.groupBy(actualObjArr, 'name')\n      , actualByAge = ArrLib.groupBy(actualObjArr, 'age');\n\n    assert.deepEqual(actualByLength, { '3': [ 'one', 'two' ], '5': [ 'three' ] });\n    assert.deepEqual(actualByName, { John: [ { name: 'John', age: 21 }, { name: 'John', age: 23 } ], Liza: [ { name: 'Liza', age: 23 } ] });\n    assert.deepEqual(actualByAge, { '21': [ { name: 'John', age: 21 } ], '23': [ { name: 'Liza', age: 23 }, { name: 'John', age: 23 } ] });\n\n    let actualByMathFloor = ArrLib.groupBy([6.1, 4.2, 6.3], Math.floor)\n      , actualByCustomName = ArrLib.groupBy([{name: 'John', age: 21}, {name: 'Liza', age: 23}, {name: 'John', age: 23}], item => `name_${item.name}`);\n\n    assert.deepEqual(actualByMathFloor, { '4': [ 4.2 ], '6': [ 6.1, 6.3 ] });\n    assert.deepEqual(actualByCustomName, { name_John: [ { name: 'John', age: 21 }, { name: 'John', age: 23 } ], name_Liza: [ { name: 'Liza', age: 23 } ] });\n\n    let actualByObject = ArrLib.groupBy([\n      { name: { first: 'John', last: 'aaa' }, age: 21 },\n      { name: { first: 'Liza', last: 'bbb'}, age: 23 },\n      { name: { first: 'John', last: 'ccc'}, age: 23 } ], ['name', 'first']);\n\n    assert.deepEqual(actualByObject, { John: [{name:{first:'John', last:'aaa'}, age:21},{name: {first:'John', last: 'ccc'}, age:23}], Liza:[{name :{first:'Liza', last:'bbb'}, age:23}]});\n  });\n\n  /** @test {Array#cloneArray} */\n  it('test: .cloneArray(arrayToClone)', () => {\n    let numberArray = [1,2,3]\n      , numberArrayClone = ArrLib.cloneArray(numberArray)\n\n      , objectArray = [{name: 'John'}, {name: 'Liza'}]\n      , objectArrayClone = ArrLib.cloneArray(objectArray);\n\n    expect(numberArrayClone).to.not.equal(numberArray);\n    expect(numberArrayClone).to.deep.equal(numberArray);\n\n    expect(objectArrayClone).to.not.equal(objectArray);\n    expect(objectArrayClone).to.deep.equal(objectArray);\n  });\n\n  /** @test {Array#without} */\n  it('test: .without(source, item)', () => {\n    let numberArray = [1,2,3];\n    expect(ArrLib.without(numberArray, 3)).to.deep.equal([1,2]);\n  });\n\n  /** @test {Array#compact} */\n  it('test: .compact(source)', () => {\n    let dataArray = [0, -3, 'Hello', '', false, true, {}, [], null, undefined];\n    expect(ArrLib.compact(dataArray, 3)).to.deep.equal([-3, 'Hello', true, {}, []]);\n  });\n\n  /** @test {Array#shuffle} */\n  it('test: .shuffle(arrToShuffle)', () => {\n    let numberArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n      , objectArray = [{name: 'name1'}, {name: 'name2'}, {name: 'name3'}, {name: 'name4'}, {name: 'name5'},\n          {name: 'name6'}, {name: 'name7'}, {name: 'name8'}, {name: 'name9'}, {name: 'name10'}]\n      , shuffleNumberArray = ArrLib.shuffle(numberArray)\n      , shuffleObjectArray = ArrLib.shuffle(objectArray);\n\n    expect(shuffleNumberArray).to.deep.not.equal(numberArray);\n    assert.equal(shuffleNumberArray.size, numberArray.size);\n\n    expect(shuffleObjectArray).to.deep.not.equal(objectArray);\n    assert.equal(shuffleObjectArray.size, objectArray.size);\n  });\n\n  /** @test {Array#reject} */\n  it('test: .reject(source, fn)', () => {\n    let numberArray = [1,2,3]\n      , objectArray = [{name: 'John'}, {name: 'Liza'}];\n\n    expect(ArrLib.reject(numberArray, item => item < 3)).to.deep.equal([3]);\n    expect(ArrLib.reject(objectArray, user => user.name === 'Liza')).to.deep.equal([objectArray[0]]);\n  });\n\n  /** @test {Array#filter} */\n  it('test: .filter(source, fn)', () => {\n    let numberArray = [1,2,3]\n      , objectArray = [{name: 'John'}, {name: 'Liza'}];\n\n    expect(ArrLib.filter(numberArray, item => item < 3)).to.deep.equal([1,2]);\n    expect(ArrLib.filter(objectArray, user => user.name === 'John')).to.deep.equal([objectArray[0]]);\n  });\n\n  /** @test {Array#take} */\n  it('test: .take(array, numberOfLastElements = 1)', () => {\n    let numberArray = [1,2,3]\n      , objectArray = [{name: 'John'}, {name: 'Liza'}];\n\n    expect(ArrLib.take(numberArray)).to.deep.equal([1]);\n    expect(ArrLib.take(objectArray)).to.deep.equal([objectArray[0]]);\n\n    expect(ArrLib.take(numberArray, 2)).to.deep.equal([1,2]);\n    expect(ArrLib.take(objectArray, 2)).to.deep.equal(objectArray);\n  });\n\n  /** @test {Array#takeRight} */\n  it('test: .takeRight(array, numberOfLastElements = 1)', () => {\n    let numberArray = [1,2,3]\n      , objectArray = [{name: 'John'}, {name: 'Liza'}];\n\n    expect(ArrLib.takeRight(numberArray)).to.deep.equal([3]);\n    expect(ArrLib.takeRight(objectArray)).to.deep.equal([objectArray[1]]);\n\n    expect(ArrLib.takeRight(numberArray, 2)).to.deep.equal([2,3]);\n    expect(ArrLib.takeRight(objectArray, 2)).to.deep.equal(objectArray);\n  });\n\n  /** @test {Array#takeWhile} */\n  it('test: .takeWhile(array = [], whileFn)', () => {\n    let items = [\n      { name: 'Edward', value: 21 },\n      { name: 'Sharpe', value: 37 },\n      { name: 'And', value: 45 },\n      { name: 'Zeros', value: 37 }\n    ];\n\n    expect(ArrLib.takeWhile(items, item => item.name === 'Edward')).to.deep.equal([]);\n    expect(ArrLib.takeWhile(items, item => item.name === 'Sharpe')).to.deep.equal([items[0]]);\n    expect(ArrLib.takeWhile(items, item => item.name === 'And')).to.deep.equal([items[0], items[1]]);\n    expect(ArrLib.takeWhile(items, item => item.name === 'NotExisting')).to.deep.equal(items);\n  });\n\n  /** @test {Array#takeRightWhile} */\n  it('test: .takeRightWhile(array = [], rightWhileFn)', () => {\n    let items = [\n      { name: 'Edward', value: 21 },\n      { name: 'Sharpe', value: 37 },\n      { name: 'And', value: 45 },\n      { name: 'Zeros', value: 37 }\n    ];\n\n    expect(ArrLib.takeRightWhile(items, item => item.name === 'Edward')).to.deep.equal([items[1], items[2], items[3]]);\n    expect(ArrLib.takeRightWhile(items, item => item.name === 'Sharpe')).to.deep.equal([items[2], items[3]]);\n    expect(ArrLib.takeRightWhile(items, item => item.name === 'And')).to.deep.equal([items[3]]);\n    expect(ArrLib.takeRightWhile(items, item => item.name === 'NotExisting')).to.deep.equal(items);\n  });\n\n  /** @test {Array#pluck} */\n  it('test: .pluck(array = [], propName)', () => {\n    let users = [{name: 'John'}, {name: 'Liza'}];\n\n    expect(ArrLib.pluck(users, 'name')).to.deep.equal(['John', 'Liza']);\n  });\n\n  /** @test {Array#fill} */\n  it('test: .fill(value, number)', () => {\n    let user = {name: 'Oleh'};\n    expect(ArrLib.fill(user, 3)).to.deep.equal([user,user,user]);\n    expect(ArrLib.fill(1, 5)).to.deep.equal([1,1,1,1,1]);\n  });\n\n  /** @test {Array#fillRight} */\n  it('test: .fillRight(value, number, arr)', () => {\n    let user = {name: 'John'}\n      , user2 = {name: 'Lize'};\n\n    expect(ArrLib.fillRight(user, 3, [user2, user2])).to.deep.equal([user2,user2,user,user,user]);\n    expect(ArrLib.fillRight(1, 5, [4,4])).to.deep.equal([4,4,1,1,1,1,1]);\n  });\n\n  /** @test {Array#fillLeft} */\n  it('test: .fillLeft(value, number, arr)', () => {\n    let user = {name: 'John'}\n      , user2 = {name: 'Lize'};\n\n    expect(ArrLib.fillLeft(user, 3, [user2, user2])).to.deep.equal([user,user,user,user2,user2]);\n    expect(ArrLib.fillLeft(1, 5, [4,4])).to.deep.equal([1,1,1,1,1,4,4]);\n  });\n\n  /** @test {Array#times} */\n  it('test: .times(iterationNumber, fn)', () => {\n    let inc = 0;\n\n    expect(ArrLib.times(5, item => {\n      inc++;\n      return item;\n    })).to.deep.equal([0,1,2,3,4]);\n\n    expect(inc).to.be.equal(5);\n  });\n\n  /** @test {Array#every} */\n  it('test: .every(source = [], fn)', () => {\n    let users = [{name: 'John'}, {name: 'John'}]\n      , users2 = [{name: 'Liza'}, {name: 'John'}]\n\n    assert.isTrue(ArrLib.every(users, user => user.name === 'John'));\n    assert.isFalse(ArrLib.every(users2, user => user.name === 'John'));\n  });\n\n  /** @test {Array#flatten} */\n  it('test: .flatten(arrayToConcat)', () => {\n    let numberArray = [1,[2,[3,[4],5],6],7];\n    expect(ArrLib.flatten(numberArray)).to.deep.equal([1,2,3,4,5,6,7]);\n  });\n\n  /** @test {Array#zipWithProjection} */\n  it('test: .zipWithProjection()', () => {\n    expect(ArrLib.zipWithProjection(['Andriy', 'Ihor'], [23, 21], [true, false],\n        (name, age, isMerried) => ({name, age, isMerried}))).to.deep.equal(\n          [{name: 'Andriy', age: 23, isMerried: true}, {name: 'Ihor', age: 21, isMerried: false}]);\n  });\n\n  /** @test {Array#map} */\n  it('test: .map(arrayToMap, fn)', () => {\n    let users = [{name: 'Andriy', age: 23, isMerried: true}, {name: 'Ihor', age: 21, isMerried: false}];\n    expect(ArrLib.map(users, u => u.name)).to.deep.equal(['Andriy', 'Ihor']);\n  });\n\n  /** @test {Array#zip} */\n  it('test: .zip(...arrayToZip)', () => {\n    expect(ArrLib.zip(['a', 'b'], [1, 2], [true, false])).to.deep.equal([['a',1,true], ['b',2,false]]);\n  });\n\n  /** @test {Array#some} */\n  it('test: .some(source = [], fn) ', () => {\n    let users = [{name: 'Liza'}, {name: 'John'}];\n    assert.isTrue(ArrLib.some(users, u => u.name === 'Liza'));\n    assert.isFalse(ArrLib.some(users, u => u.name === 'NotInArray'));\n  });\n\n  /** @test {Array#any} */\n  it('test: .any(source = [], fn) ', () => {\n    let users = [{name: 'Liza'}, {name: 'John'}];\n    assert.isTrue(ArrLib.any(users, u => u.name === 'Liza'));\n    assert.isFalse(ArrLib.any(users, u => u.name === 'NotInArray'));\n  });\n\n  /** @test {Array#sample} */\n  it('test: .sample(source) ', () => {\n    let users = [{name: 'name1'}, {name: 'name2'}, {name: 'name3'}, {name: 'name4'}, {name: 'name5'},\n          {name: 'name6'}, {name: 'name7'}, {name: 'name8'}, {name: 'name9'}, {name: 'name10'}]\n      , randomUser = ArrLib.sample(users)\n      , existing = ArrLib.find(users, user => user.name === randomUser.name);\n\n    assert.isDefined(existing);\n  });\n\n  /** @test {Array#find} */\n  it('test: .find(source, fn) ', () => {\n    let users = [{name: 'name1'}, {name: 'name2'}, {name: 'name3'}, {name: 'name4'}, {name: 'name5'},\n          {name: 'name6'}, {name: 'name7'}, {name: 'name8'}, {name: 'name9'}, {name: 'name10'}]\n      , findResult = ArrLib.find(users, user => user.name === 'name7');\n\n    assert.isDefined(findResult);\n  });\n\n  /** @test {Array#first} */\n  it('test: .first(array = []) ', () => {\n    assert.equal(ArrLib.first([51,35,23]), 51);\n  });\n\n  /** @test {Array#head} */\n  it('test: .head(array = []) ', () => {\n    assert.equal(ArrLib.head([51,35,23]), 51);\n  });\n\n  /** @test {Array#last} */\n  it('test: .last(array = []) ', () => {\n    assert.equal(ArrLib.last([51,35,23]), 23);\n  });\n\n  /** @test {Array#tail} */\n  it('test: .tail(array = []) ', () => {\n    assert.equal(ArrLib.tail([51,35,23]), 23);\n  });\n\n  /** @test {Array#nth} */\n  it('test: .nth(source, index)', () => {\n    assert.equal(ArrLib.nth([51,35,23], 1), 35);\n  });\n\n  /** @test {Array#castArray} */\n  it('test: .castArray(...valueToCast) ', () => {\n    expect(ArrLib.castArray(51,35,23)).to.deep.equal([51,35,23]);\n    expect(ArrLib.castArray(false)).to.deep.equal([false]);\n    expect(ArrLib.castArray('Hello')).to.deep.equal(['Hello']);\n  });\n\n  /** @test {Array#changeOrder} */\n  it('test: .changeOrder(argsArray, order) ', () => {\n    assert.deepEqual(\n      ArrLib.changeOrder(['b', 'c', 'a'], [2, 0, 1]),\n      ['a', 'b', 'c']);\n  });\n\n  /** @test {Array#numAndStrComparator} */\n  it('test: .numAndStrComparator(first, second, prop)', () => {\n    let given = [\n      { 'name': 'fred',   'age': 48 },\n      { 'name': 'barney', 'age': 36 }\n    ];\n    let byString1 = ArrLib.numAndStrComparator(given[0], given[1], 'name')\n      , byString2 = ArrLib.numAndStrComparator(given[1], given[0],'name')\n      , byNumber1 = ArrLib.numAndStrComparator(given[0], given[1],'age')\n      , byNumber2 = ArrLib.numAndStrComparator(given[1], given[0],'age');\n\n    assert.equal(byString1, 1);\n    assert.equal(byString2, -1);\n    assert.equal(byNumber1, 1);\n    assert.equal(byNumber2, -1);\n  });\n\n  /** @test {Array#uniq}*/\n  it('uniq(source)', () => {\n    assert.deepEqual(ArrLib.uniq(\n      [\n        { id: 1, firstName: 'Jon', lastName: 'Snow', location: 'Winterfell' },\n        { id: 2, firstName: 'Eddard', lastName: 'Stark', location: 'Winterfell' },\n        { id: 3, firstName: 'Catelyn', lastName: 'Stark', location: 'Winterfell' },\n        { id: 4, firstName: 'Roose', lastName: 'Bolton', location: 'Dreadfort' },\n        { id: 4, firstName: 'Roose', lastName: 'Bolton', location: 'Dreadfort' },\n        { id: 5, firstName: 'Ramsay', lastName: 'Snow', location: 'Dreadfort' }\n      ]),\n      [\n        { id: 1, firstName: 'Jon', lastName: 'Snow', location: 'Winterfell' },\n        { id: 2, firstName: 'Eddard', lastName: 'Stark', location: 'Winterfell' },\n        { id: 3, firstName: 'Catelyn', lastName: 'Stark', location: 'Winterfell' },\n        { id: 4, firstName: 'Roose', lastName: 'Bolton', location: 'Dreadfort' },\n        { id: 5, firstName: 'Ramsay', lastName: 'Snow', location: 'Dreadfort' }\n      ]\n    );\n  });\n});\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/specs/array.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 277,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "specs/array.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "specs/array.spec.js~describe0",
    "access": null,
    "description": "Array Library Tests",
    "lineNumber": 6,
    "testTargets": [
      "Array"
    ]
  },
  {
    "__docId__": 278,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it1",
    "access": null,
    "description": "test: .sortBy(source, propList)",
    "lineNumber": 9,
    "testTargets": [
      "Array#sortBy"
    ]
  },
  {
    "__docId__": 279,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it2",
    "access": null,
    "description": "test: .groupByProp(arr, groupVal)",
    "lineNumber": 28,
    "testTargets": [
      "Array#groupByProp"
    ]
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it3",
    "access": null,
    "description": "test: .groupByFn(arr, groupFn)",
    "lineNumber": 40,
    "testTargets": [
      "Array#groupByFn"
    ]
  },
  {
    "__docId__": 281,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it4",
    "access": null,
    "description": "test: .groupByPath(arr, groupPath)",
    "lineNumber": 49,
    "testTargets": [
      "Array#groupByPath"
    ]
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it5",
    "access": null,
    "description": "test: .groupBy(...args)",
    "lineNumber": 59,
    "testTargets": [
      "Array#groupBy"
    ]
  },
  {
    "__docId__": 283,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it6",
    "access": null,
    "description": "test: .cloneArray(arrayToClone)",
    "lineNumber": 84,
    "testTargets": [
      "Array#cloneArray"
    ]
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it7",
    "access": null,
    "description": "test: .without(source, item)",
    "lineNumber": 99,
    "testTargets": [
      "Array#without"
    ]
  },
  {
    "__docId__": 285,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it8",
    "access": null,
    "description": "test: .compact(source)",
    "lineNumber": 105,
    "testTargets": [
      "Array#compact"
    ]
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it9",
    "access": null,
    "description": "test: .shuffle(arrToShuffle)",
    "lineNumber": 111,
    "testTargets": [
      "Array#shuffle"
    ]
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it10",
    "access": null,
    "description": "test: .reject(source, fn)",
    "lineNumber": 126,
    "testTargets": [
      "Array#reject"
    ]
  },
  {
    "__docId__": 288,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it11",
    "access": null,
    "description": "test: .filter(source, fn)",
    "lineNumber": 135,
    "testTargets": [
      "Array#filter"
    ]
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it12",
    "access": null,
    "description": "test: .take(array, numberOfLastElements = 1)",
    "lineNumber": 144,
    "testTargets": [
      "Array#take"
    ]
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it13",
    "access": null,
    "description": "test: .takeRight(array, numberOfLastElements = 1)",
    "lineNumber": 156,
    "testTargets": [
      "Array#takeRight"
    ]
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it14",
    "access": null,
    "description": "test: .takeWhile(array = [], whileFn)",
    "lineNumber": 168,
    "testTargets": [
      "Array#takeWhile"
    ]
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it15",
    "access": null,
    "description": "test: .takeRightWhile(array = [], rightWhileFn)",
    "lineNumber": 183,
    "testTargets": [
      "Array#takeRightWhile"
    ]
  },
  {
    "__docId__": 293,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it16",
    "access": null,
    "description": "test: .pluck(array = [], propName)",
    "lineNumber": 198,
    "testTargets": [
      "Array#pluck"
    ]
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it17",
    "access": null,
    "description": "test: .fill(value, number)",
    "lineNumber": 205,
    "testTargets": [
      "Array#fill"
    ]
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it18",
    "access": null,
    "description": "test: .fillRight(value, number, arr)",
    "lineNumber": 212,
    "testTargets": [
      "Array#fillRight"
    ]
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it19",
    "access": null,
    "description": "test: .fillLeft(value, number, arr)",
    "lineNumber": 221,
    "testTargets": [
      "Array#fillLeft"
    ]
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it20",
    "access": null,
    "description": "test: .times(iterationNumber, fn)",
    "lineNumber": 230,
    "testTargets": [
      "Array#times"
    ]
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it21",
    "access": null,
    "description": "test: .every(source = [], fn)",
    "lineNumber": 242,
    "testTargets": [
      "Array#every"
    ]
  },
  {
    "__docId__": 299,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it22",
    "access": null,
    "description": "test: .flatten(arrayToConcat)",
    "lineNumber": 251,
    "testTargets": [
      "Array#flatten"
    ]
  },
  {
    "__docId__": 300,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it23",
    "access": null,
    "description": "test: .zipWithProjection()",
    "lineNumber": 257,
    "testTargets": [
      "Array#zipWithProjection"
    ]
  },
  {
    "__docId__": 301,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it24",
    "access": null,
    "description": "test: .map(arrayToMap, fn)",
    "lineNumber": 264,
    "testTargets": [
      "Array#map"
    ]
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it25",
    "access": null,
    "description": "test: .zip(...arrayToZip)",
    "lineNumber": 270,
    "testTargets": [
      "Array#zip"
    ]
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it26",
    "access": null,
    "description": "test: .some(source = [], fn) ",
    "lineNumber": 275,
    "testTargets": [
      "Array#some"
    ]
  },
  {
    "__docId__": 304,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it27",
    "access": null,
    "description": "test: .any(source = [], fn) ",
    "lineNumber": 282,
    "testTargets": [
      "Array#any"
    ]
  },
  {
    "__docId__": 305,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it28",
    "access": null,
    "description": "test: .sample(source) ",
    "lineNumber": 289,
    "testTargets": [
      "Array#sample"
    ]
  },
  {
    "__docId__": 306,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it29",
    "access": null,
    "description": "test: .find(source, fn) ",
    "lineNumber": 299,
    "testTargets": [
      "Array#find"
    ]
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it30",
    "access": null,
    "description": "test: .first(array = []) ",
    "lineNumber": 308,
    "testTargets": [
      "Array#first"
    ]
  },
  {
    "__docId__": 308,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it31",
    "access": null,
    "description": "test: .head(array = []) ",
    "lineNumber": 313,
    "testTargets": [
      "Array#head"
    ]
  },
  {
    "__docId__": 309,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it32",
    "access": null,
    "description": "test: .last(array = []) ",
    "lineNumber": 318,
    "testTargets": [
      "Array#last"
    ]
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it33",
    "access": null,
    "description": "test: .tail(array = []) ",
    "lineNumber": 323,
    "testTargets": [
      "Array#tail"
    ]
  },
  {
    "__docId__": 311,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it34",
    "access": null,
    "description": "test: .nth(source, index)",
    "lineNumber": 328,
    "testTargets": [
      "Array#nth"
    ]
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it35",
    "access": null,
    "description": "test: .castArray(...valueToCast) ",
    "lineNumber": 333,
    "testTargets": [
      "Array#castArray"
    ]
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it36",
    "access": null,
    "description": "test: .changeOrder(argsArray, order) ",
    "lineNumber": 340,
    "testTargets": [
      "Array#changeOrder"
    ]
  },
  {
    "__docId__": 314,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it37",
    "access": null,
    "description": "test: .numAndStrComparator(first, second, prop)",
    "lineNumber": 347,
    "testTargets": [
      "Array#numAndStrComparator"
    ]
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "specs/array.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "specs/array.spec.js~describe0.it38",
    "access": null,
    "description": "uniq(source)",
    "lineNumber": 364,
    "testTargets": [
      "Array#uniq"
    ]
  },
  {
    "__docId__": 316,
    "kind": "testFile",
    "name": "specs/context.spec.js",
    "content": "import { assert, expect } from 'chai';\n\nimport * as CtxLib from '../src/Context';\n\n\n/** @test {Context} */\ndescribe('Context Library Tests', () => {\n\n  /** @test {Context#using} */\n  it('test: .using(ctx) ', () => {\n    let contextObj = {counter: 0}\n      , fn1 = function() { this.counter +=1; }\n      , fn2 = function() { this.counter +=2; }\n      , fn3 = function() { this.counter +=3; }\n      , fn4 = function() { this.counter +=4; };\n\n    CtxLib.using(contextObj)\n      .invoke(fn1, fn2, fn3, fn4);\n\n    assert.equal(contextObj.counter, 10);\n  });\n\n  /** @test {Context#using} */\n  it('test: .using(ctx) with class', () => {\n    class A {\n      constructor() {\n        this.counter = 0;\n      }\n    }\n    let contextObj = new A()\n      , fn1 = function() { this.counter +=1; }\n      , fn2 = function() { this.counter +=2; }\n      , fn3 = function() { this.counter +=3; }\n      , fn4 = function() { this.counter +=4; };\n\n    CtxLib.using(contextObj)\n      .invoke(fn1, fn2, fn3, fn4);\n\n    assert.equal(contextObj.counter, 10);\n  });\n\n  /** @test {Context#invoke} */\n  it('test: .invoke(ctx)', () => {\n    let contextObj = {counter: 0}\n      , fn1 = function() { this.counter +=1; }\n      , fn2 = function() { this.counter +=2; }\n      , fn3 = function() { this.counter +=3; }\n      , fn4 = function() { this.counter +=4; };\n\n    CtxLib.invoke(fn1, fn2, fn3, fn4)\n      .using(contextObj);\n\n    assert.equal(contextObj.counter, 10);\n  });\n\n  /** @test {Context#invoke} */\n  it('test: .invoke(ctx) with class', () => {\n    class A {\n      constructor() {\n        this.counter = 0;\n      }\n    }\n    let contextObj = new A()\n      , fn1 = function() { this.counter +=1; }\n      , fn2 = function() { this.counter +=2; }\n      , fn3 = function() { this.counter +=3; }\n      , fn4 = function() { this.counter +=4; };\n\n    CtxLib.invoke(fn1, fn2, fn3, fn4)\n      .using(contextObj);\n\n    assert.equal(contextObj.counter, 10);\n  });\n\n  /** @test {Context#invokeWithCtx} */\n  it('test: .invokeWithCtx(ctx, ...fns)', () => {\n    let contextObj = {counter: 0}\n      , fn1 = function() { this.counter +=1; }\n      , fn2 = function() { this.counter +=2; }\n      , fn3 = function() { this.counter +=3; }\n      , fn4 = function() { this.counter +=4; };\n\n    CtxLib.invokeWithCtx(contextObj, fn1, fn2, fn3, fn4);\n\n    assert.equal(contextObj.counter, 10);\n  });\n\n  /** @test {Context#invokeWithCtx} */\n  it('test: .invokeWithCtx(ctx, ...fns) with class', () => {\n    class A {\n      constructor() {\n        this.counter = 0;\n      }\n    }\n    let contextObj = new A()\n      , fn1 = function() { this.counter +=1; }\n      , fn2 = function() { this.counter +=2; }\n      , fn3 = function() { this.counter +=3; }\n      , fn4 = function() { this.counter +=4; };\n\n    CtxLib.invokeWithCtx(contextObj, fn1, fn2, fn3, fn4);\n\n    assert.equal(contextObj.counter, 10);\n  });\n\n  /** @test {Context#invoke} */\n  it('test: using(ctx) invoke(...fns) with .wrap(fn, ...args)', () => {\n    let contextObj = {counter: 0}\n      , fn1 = function() { this.counter +=1; }\n      , fn2 = function(num) { this.counter = this.counter + 2 + num; };\n\n    CtxLib.using(contextObj)\n      .invoke(fn1, CtxLib.wrap(fn2, 4));\n\n    assert.equal(contextObj.counter, 7);\n  });\n\n  /** @test {Context#invoke} */\n  it('test: using(ctx) invoke(...fns) with .wrap(fn, ...args) with class', () => {\n    class A {\n      constructor() {\n        this.counter = 0;\n      }\n    }\n    let contextObj = new A()\n      , fn1 = function() { this.counter +=1; }\n      , fn2 = function(num) { this.counter = this.counter + 2 + num; };\n\n    CtxLib.using(contextObj)\n      .invoke(fn1, CtxLib.wrap(fn2, 4));\n\n    assert.equal(contextObj.counter, 7);\n  });\n});\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/specs/context.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "describe39",
    "testId": 39,
    "memberof": "specs/context.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "specs/context.spec.js~describe39",
    "access": null,
    "description": "Context Library Tests",
    "lineNumber": 7,
    "testTargets": [
      "Context"
    ]
  },
  {
    "__docId__": 318,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "specs/context.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "specs/context.spec.js~describe39.it40",
    "access": null,
    "description": "test: .using(ctx) ",
    "lineNumber": 10,
    "testTargets": [
      "Context#using"
    ]
  },
  {
    "__docId__": 319,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "specs/context.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "specs/context.spec.js~describe39.it41",
    "access": null,
    "description": "test: .using(ctx) with class",
    "lineNumber": 24,
    "testTargets": [
      "Context#using"
    ]
  },
  {
    "__docId__": 320,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "specs/context.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "specs/context.spec.js~describe39.it42",
    "access": null,
    "description": "test: .invoke(ctx)",
    "lineNumber": 43,
    "testTargets": [
      "Context#invoke"
    ]
  },
  {
    "__docId__": 321,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "specs/context.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "specs/context.spec.js~describe39.it43",
    "access": null,
    "description": "test: .invoke(ctx) with class",
    "lineNumber": 57,
    "testTargets": [
      "Context#invoke"
    ]
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "specs/context.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "specs/context.spec.js~describe39.it44",
    "access": null,
    "description": "test: .invokeWithCtx(ctx, ...fns)",
    "lineNumber": 76,
    "testTargets": [
      "Context#invokeWithCtx"
    ]
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "specs/context.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "specs/context.spec.js~describe39.it45",
    "access": null,
    "description": "test: .invokeWithCtx(ctx, ...fns) with class",
    "lineNumber": 89,
    "testTargets": [
      "Context#invokeWithCtx"
    ]
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "specs/context.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "specs/context.spec.js~describe39.it46",
    "access": null,
    "description": "test: using(ctx) invoke(...fns) with .wrap(fn, ...args)",
    "lineNumber": 107,
    "testTargets": [
      "Context#invoke"
    ]
  },
  {
    "__docId__": 325,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "specs/context.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "specs/context.spec.js~describe39.it47",
    "access": null,
    "description": "test: using(ctx) invoke(...fns) with .wrap(fn, ...args) with class",
    "lineNumber": 119,
    "testTargets": [
      "Context#invoke"
    ]
  },
  {
    "__docId__": 326,
    "kind": "testFile",
    "name": "specs/data-structures.spec.js",
    "content": "import { assert } from 'chai';\n\n\nimport { SafeTupleBuilder } from '../src/Data-Structures/safe-tuple-builder';\nimport { Tuple } from '../src/Data-Structures/tuple';\n\n/** @test {SafeTupleBuilder} */\ndescribe('SafeTupleBuilder Tests', () => {\n\n  /** @test {SafeTupleBuilder#of} */\n  it('test: .of(...args)', () => {\n    const expected = ['Barkley', 'Rosser']\n       , StringPair = SafeTupleBuilder.of(String, String)\n       , name = new StringPair(...expected)\n       , [first, last] = name.getAll();\n\n    assert.equal(first, expected[0]);\n    assert.equal(last, expected[1]);\n\n    name.unpack((first, last) => {\n      assert.equal(first, expected[0]);\n      assert.equal(last, expected[1]);\n    });\n\n    assert.equal(name.get(0), expected[0]);\n    assert.equal(name.get(1), expected[1]);\n  });\n});\n\n/** @test {Tuple} */\ndescribe('Tuple Tests', () => {\n\n  /** @test {Tuple#getAll} */\n  it('test: .getAll()', () => {\n    const expected = ['Barkley', 'Rosser']\n       , name = new Tuple(...expected)\n       , [first, last] = name.getAll();\n\n    assert.equal(first, expected[0]);\n    assert.equal(last, expected[1]);\n  });\n\n    /** @test {Tuple#unpack} */\n    it('test: .unpack()', () => {\n      const expected = ['Barkley', 'Rosser']\n          , name = new Tuple(...expected);\n\n      name.unpack((first, last) => {\n        assert.equal(first, expected[0]);\n        assert.equal(last, expected[1]);\n      });\n    });\n\n    /** @test {Tuple#get} */\n    it('test: .get(index)', () => {\n      const expected = ['Barkley', 'Rosser']\n          , name = new Tuple(...expected);\n\n      assert.equal(name.get(0), expected[0]);\n      assert.equal(name.get(1), expected[1]);\n    });\n});\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/specs/data-structures.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 327,
    "kind": "test",
    "name": "describe48",
    "testId": 48,
    "memberof": "specs/data-structures.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "specs/data-structures.spec.js~describe48",
    "access": null,
    "description": "SafeTupleBuilder Tests",
    "lineNumber": 8,
    "testTargets": [
      "SafeTupleBuilder"
    ]
  },
  {
    "__docId__": 328,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "specs/data-structures.spec.js~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "specs/data-structures.spec.js~describe48.it49",
    "access": null,
    "description": "test: .of(...args)",
    "lineNumber": 11,
    "testTargets": [
      "SafeTupleBuilder#of"
    ]
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "describe50",
    "testId": 50,
    "memberof": "specs/data-structures.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "specs/data-structures.spec.js~describe50",
    "access": null,
    "description": "Tuple Tests",
    "lineNumber": 31,
    "testTargets": [
      "Tuple"
    ]
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "specs/data-structures.spec.js~describe50",
    "testDepth": 1,
    "static": true,
    "longname": "specs/data-structures.spec.js~describe50.it51",
    "access": null,
    "description": "test: .getAll()",
    "lineNumber": 34,
    "testTargets": [
      "Tuple#getAll"
    ]
  },
  {
    "__docId__": 331,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "specs/data-structures.spec.js~describe50",
    "testDepth": 1,
    "static": true,
    "longname": "specs/data-structures.spec.js~describe50.it52",
    "access": null,
    "description": "test: .unpack()",
    "lineNumber": 44,
    "testTargets": [
      "Tuple#unpack"
    ]
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "specs/data-structures.spec.js~describe50",
    "testDepth": 1,
    "static": true,
    "longname": "specs/data-structures.spec.js~describe50.it53",
    "access": null,
    "description": "test: .get(index)",
    "lineNumber": 55,
    "testTargets": [
      "Tuple#get"
    ]
  },
  {
    "__docId__": 333,
    "kind": "testFile",
    "name": "specs/fantasy-land.spec.js",
    "content": "import * as chai from 'chai';\nimport { assert, expect } from 'chai';\n\nimport { Functor, Apply, Applicative, Monad, LazyFunctor } from '../src/Fantasy-Land';\nimport { Maybe } from '../src/Fantasy-Land/maybe';\nimport { Either } from '../src/Fantasy-Land/either';\nimport { toSetoid, isSetoid } from '../src/Fantasy-Land/setoid';\nimport { identity } from '../src/Function-Combinators';\n\n\n/** @test {Fantasy-Land} */\ndescribe('Fantasy Land Library Tests', () => {\n\n  /** @test {Fantasy-Land#Functor} */\n  it('test: Functor', () => {\n    let sideEffectVar = 0\n      , functor = Functor('  64  ')\n        .map(s => s.trim())\n        .map(r => parseInt(r))\n        .tap(v => sideEffectVar = 3)\n        .map(i => i + 1)\n        .map(i => String.fromCharCode(i))\n\n\n    assert.equal(functor.fold(identity), 'A');\n    assert.equal(functor.get(), 'A');\n    assert.equal(sideEffectVar, 3);\n    assert.equal(functor.toString(), 'Functor(A)');\n    assert.equal(functor.inspect(), 'Functor(A)');\n  });\n\n  /** @test {Fantasy-Land#Apply} */\n  it('test: Apply', () => {\n    let sideEffectVar = 0\n      , curry2Add = x => y => x + y\n      , apply = Apply(curry2Add)\n        .tap(() => sideEffectVar = 3)\n\n    assert.equal(sideEffectVar, 3);\n    assert.isFunction(apply.get());\n    assert.isFunction(apply.fold(identity));\n    assert.isFunction(apply.ap(2).get());\n    assert.equal(apply.ap(2).ap(3).get(), 5);\n    assert.equal(apply.ap(2).apGet(3), 5);\n    assert.equal(apply.ap(2).ap(3).toString(), 'Apply(5)');\n    assert.equal(apply.ap(2).ap(3).inspect(), 'Apply(5)');\n    assert.equal(\n      apply\n        .ap(2)\n        .ap(3)\n        .map(n => `Number is ${n}`)\n        .get()\n      , 'Number is 5');\n  });\n\n  /** @test {Fantasy-Land#Applicative */\n  it('test: Applicative', () => {\n    let sideEffectVar = 0\n      , curry2Add = x => y => x + y\n      , applicative = Applicative.of(curry2Add)\n        .tap(() => sideEffectVar = 3)\n\n    assert.equal(sideEffectVar, 3);\n    assert.isFunction(applicative.get());\n    assert.isFunction(applicative.fold(identity));\n    assert.isFunction(applicative.ap(2).get());\n    assert.equal(applicative.ap(2).ap(3).get(), 5);\n    assert.equal(applicative.ap(2).apGet(3), 5);\n    assert.equal(applicative.ap(2).ap(3).toString(), 'Applicative(5)');\n    assert.equal(applicative.ap(2).ap(3).inspect(), 'Applicative(5)');\n    assert.equal(\n      applicative\n        .ap(2)\n        .ap(3)\n        .map(n => `Number is ${n}`)\n        .get()\n      , 'Number is 5');\n  });\n\n  /** @test {Fantasy-Land#Monad} */\n  it('test: Monad', () => {\n    let sideEffectVar = 0\n      , curry2Add = x => y => x + y\n      , monad = Monad.of(curry2Add)\n        .tap(() => sideEffectVar = 3)\n\n    assert.equal(sideEffectVar, 3);\n    assert.isFunction(monad.get());\n    assert.isFunction(monad.fold(identity));\n    assert.isFunction(monad.ap(2).get());\n    assert.equal(monad.ap(2).ap(3).get(), 5);\n    assert.equal(monad.ap(2).apGet(3), 5);\n    assert.equal(monad.ap(2).ap(3).toString(), 'Monad(5)');\n    assert.equal(monad.ap(2).ap(3).inspect(), 'Monad(5)');\n    assert.equal(\n      monad\n        .ap(2)\n        .ap(3)\n        .map(n => `Number is ${n}`)\n        .get()\n      , 'Number is 5');\n\n    assert.equal(\n      monad\n        .ap(2)\n        .ap(3)\n        .chain(v => Monad.of(v * v))\n        .get()\n      , 25);\n\n    assert.equal(\n      monad\n        .ap(2)\n        .ap(3)\n        .map(v => Monad.of(v * v))\n        .join()\n        .get()\n      , 25);\n\n    assert.equal(\n      monad\n        .ap(3)\n        .apChain(Monad.of(2))\n        .get()\n      , 5);\n  });\n\n  /** @test {Fantasy-Land#LazyFunctor} */\n  it('test: LazyFunctor', () => {\n    let wasInvoked = false;\n    let multiplyWithInvokeUpdate = x => {\n      wasInvoked = true;\n      return x * x;\n    }\n\n    assert.isNotNumber(\n      LazyFunctor(() => 7)\n        .lazyMap(multiplyWithInvokeUpdate)\n        .lazyMap(x => x * 100)\n    );\n    assert.isFalse(wasInvoked);\n\n    assert.isNumber(\n      LazyFunctor(() => 7)\n        .lazyMap(multiplyWithInvokeUpdate)\n        .lazyMap(x => x * 100)\n        .lazyFold(identity)\n    );\n    assert.isTrue(wasInvoked);\n\n    assert.equal(\n      LazyFunctor(() => 7)\n        .lazyMap(multiplyWithInvokeUpdate)\n        .lazyMap(x => x * 10)\n        .lazyFold(identity),\n      490\n    );\n  });\n\n  /** @test {Fantasy-Land#Maybe} */\n  describe('test: Maybe', () => {\n\n    /** @test {Fantasy-Land#Maybe#fromNullable} */\n    it('test: Maybe.fromNullable', () => {\n      let positiveMaybe = Maybe.fromNullable('hello')\n        , negativeMaybe = Maybe.fromNullable(undefined)\n\n      assert.isTrue(positiveMaybe.isJust);\n      assert.isFalse(positiveMaybe.isNothing);\n\n      assert.isFalse(negativeMaybe.isJust);\n      assert.isTrue(negativeMaybe.isNothing);\n    });\n\n    /** @test {Fantasy-Land#Maybe#of} */\n    it('test: Maybe.of', () => {\n      let positiveMaybe = Maybe.of('hello');\n\n      assert.isTrue(positiveMaybe.isJust);\n      assert.isFalse(positiveMaybe.isNothing);\n    });\n\n    /** @test {Fantasy-Land#Maybe#just} */\n    it('test: Maybe.just', () => {\n      let positiveMaybe = Maybe.just('hello');\n\n      assert.isTrue(positiveMaybe.isJust);\n      assert.isFalse(positiveMaybe.isNothing);\n    });\n\n    /** @test {Fantasy-Land#Maybe#nothing} */\n    it('test: Maybe.nothing', () => {\n      let positiveMaybe = Maybe.nothing('hello');\n\n      assert.isFalse(positiveMaybe.isJust);\n      assert.isTrue(positiveMaybe.isNothing);\n    });\n\n    /** @test {Fantasy-Land#Maybe#map} */\n    it('test: Maybe.Just/Maybe.Nothing#map(f)', () => {\n      let positiveMaybe = Maybe.fromNullable('hello')\n        , negativeMaybe = Maybe.fromNullable(undefined);\n\n      assert.equal(\n        positiveMaybe\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .toString()\n        , 'Maybe.Just(HELLO WORLD)');\n\n      assert.equal(\n        negativeMaybe\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .toString()\n        , 'Maybe.Nothing()');\n    });\n\n    /** @test {Fantasy-Land#Maybe#getValue} */\n    it('test: Maybe.Just/Maybe.Nothing#getValue()', () => {\n      let positiveMaybe = Maybe.fromNullable('hello')\n        , negativeMaybe = Maybe.fromNullable(undefined);\n\n      assert.equal(\n        positiveMaybe\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .getValue()\n        , 'HELLO WORLD');\n\n      assert.isUndefined(\n        negativeMaybe\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .getValue());\n    });\n\n    /** @test {Fantasy-Land#Maybe#get} */\n    it('test: Maybe.Just/Maybe.Nothing#get()', () => {\n      let positiveMaybe = Maybe.fromNullable('hello')\n        , negativeMaybe = Maybe.fromNullable(undefined);\n\n      assert.equal(\n        positiveMaybe\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .get()\n        , 'HELLO WORLD');\n\n      expect(\n        negativeMaybe\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .get\n      ).to.throw(chai.TypeError, 'Can\\'t extract the value of a Nothing.');\n    });\n\n    /** @test {Fantasy-Land#Maybe#getOrElse} */\n    it('test: Maybe.Just/Maybe.Nothing#getOrElse()', () => {\n      let positiveMaybe = Maybe.fromNullable('hello')\n        , negativeMaybe = Maybe.fromNullable(undefined);\n\n      assert.equal(\n        positiveMaybe\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .getOrElse('Other')\n        , 'HELLO WORLD');\n\n      assert.equal(\n        negativeMaybe\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .getOrElse('Other')\n        , 'Other');\n\n\n    });\n\n    /** @test {Fantasy-Land#Maybe#chain} */\n    it('test: Maybe.Just/Maybe.Nothing#chain()', () => {\n      assert.equal(\n        Maybe.just('hello')\n          .chain(s => Maybe.of(s.toUpperCase()))\n          .getOrElse('Other')\n        , 'HELLO');\n\n      assert.equal(\n        Maybe.nothing()\n          .chain(s => Maybe.of(s.toUpperCase()))\n          .getOrElse('Other')\n        , 'Other');\n    });\n\n    /** @test {Fantasy-Land#Maybe#filter} */\n    it('test: Maybe.Just/Maybe.Nothing#filter()', () => {\n      assert.equal(\n        Maybe.just('hello')\n          .map(s => s.toUpperCase())\n          .filter(s => s === 'HELLO')\n          .getOrElse('Other')\n        , 'HELLO');\n\n      assert.equal(\n        Maybe.nothing()\n          .map(s => s.toUpperCase())\n          .filter(s => s === 'HELLO')\n          .getOrElse('Other')\n        , 'Other');\n    });\n  });\n\n  /** @test {Fantasy-Land#Either} */\n  describe('test: Either', () => {\n\n    /** @test {Fantasy-Land#Maybe#fromNullable} */\n    it('test: Either.fromNullable', () => {\n      let positiveEither = Either.fromNullable('hello')\n        , negativeEither = Either.fromNullable(undefined)\n\n      assert.isTrue(positiveEither.isRight);\n      assert.isFalse(positiveEither.isLeft);\n\n      assert.isFalse(negativeEither.isRight);\n      assert.isTrue(negativeEither.isLeft);\n    });\n\n    /** @test {Fantasy-Land#Either#of} */\n    it('test: Either.of', () => {\n      let positiveEither = Either.of('hello');\n\n      assert.isTrue(positiveEither.isRight);\n      assert.isFalse(positiveEither.isLeft);\n    });\n\n    /** @test {Fantasy-Land#Either#tryCatch} */\n    it('test: Either.tryCatch with falsy value', () => {\n      const expected = 3000;\n      assert.equal(\n        Either.tryCatch(() => JSON.parse('incorrect json'))\n          .map(c => c.port)\n          .getOrElse(expected)\n      , expected);\n    });\n\n    /** @test {Fantasy-Land#Either#tryCatch} */\n    it('test: Either.tryCatch with truthy value', () => {\n      assert.equal(\n        Either.tryCatch(() => JSON.parse('{\"port\": 8888}'))\n          .map(c => c.port)\n          .getOrElse(3000)\n      , 8888);\n    });\n\n    /** @test {Fantasy-Land#Either#tryCatch} */\n    it('test: double Either.tryCatch', () => {\n      const expected = 3000;\n      assert.equal(\n        Either.tryCatch(() => JSON.parse('incorrect json'))\n          .map(c => Either.tryCatch(JSON.parse('another incorrect json')))\n          .getOrElse(expected)\n      , expected);\n    });\n\n    /** @test {Fantasy-Land#Either#right} */\n    it('test: Either.right', () => {\n      let positiveEither = Either.right('hello');\n\n      assert.isTrue(positiveEither.isRight);\n      assert.isFalse(positiveEither.isLeft);\n    });\n\n    /** @test {Fantasy-Land#Either#left} */\n    it('test: Either.left', () => {\n      let positiveEither = Either.left('hello');\n\n      assert.isFalse(positiveEither.isRight);\n      assert.isTrue(positiveEither.isLeft);\n    });\n\n    /** @test {Fantasy-Land#Either#map} */\n    it('test: Either.Right/Either.Left#map(f)', () => {\n      let positiveEither = Either.fromNullable('hello')\n        , negativeEither = Either.fromNullable(undefined);\n\n      assert.equal(\n        positiveEither\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .toString()\n        , 'Either.Right(HELLO WORLD)');\n\n      assert.equal(\n        negativeEither\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .toString()\n        , 'Either.Left(undefined)');\n    });\n\n    /** @test {Fantasy-Land#Either#getValue} */\n    it('test: Either.Right/Either.Left#getValue()', () => {\n      let positiveEither = Either.fromNullable('hello')\n        , negativeEither = Either.fromNullable(undefined);\n\n      assert.equal(\n        positiveEither\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .getValue()\n        , 'HELLO WORLD');\n\n      assert.isUndefined(\n        negativeEither\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .getValue());\n    });\n\n    /** @test {Fantasy-Land#Either#get} */\n    it('test: Either.Right/Either.Left#get()', () => {\n      let positiveEither = Either.fromNullable('hello')\n        , negativeEither = Either.fromNullable(undefined);\n\n      assert.equal(\n        positiveEither\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .get()\n        , 'HELLO WORLD');\n\n      expect(\n        negativeEither\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .get\n      ).to.throw(chai.TypeError, 'Can\\'t extract the value of a Left.');\n    });\n\n    /** @test {Fantasy-Land#Either#getOrElse} */\n    it('test: Either.Right/Either.Left#getOrElse()', () => {\n      let positiveEither = Either.fromNullable('hello')\n        , negativeEither = Either.fromNullable(undefined);\n\n      assert.equal(\n        positiveEither\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .getOrElse('Other')\n        , 'HELLO WORLD');\n\n      assert.equal(\n        negativeEither\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .getOrElse('Other')\n        , 'Other');\n\n\n    });\n\n    /** @test {Fantasy-Land#Either#chain} */\n    it('test: Either.Right/Either.Left#chain()', () => {\n      assert.equal(\n        Either.right('hello')\n          .chain(s => Either.of(s.toUpperCase()))\n          .getOrElse('Other')\n        , 'HELLO');\n\n      assert.equal(\n        Either.left()\n          .chain(s => Either.of(s.toUpperCase()))\n          .getOrElse('Other')\n        , 'Other');\n    });\n\n    /** @test {Fantasy-Land#Either#filter} */\n    it('test: Either.Right/Either.Left#filter()', () => {\n      assert.equal(\n        Either.right('hello')\n          .map(s => s.toUpperCase())\n          .filter(s => s === 'HELLO')\n          .getOrElse('Other')\n        , 'HELLO');\n\n      assert.equal(\n        Either.left()\n          .map(s => s.toUpperCase())\n          .filter(s => s === 'HELLO')\n          .getOrElse('Other')\n        , 'Other');\n    });\n\n    /** @test {Fantasy-Land#Either#getOrElseThrow} */\n    it('test: Either.Rigth/Either.Left#getOrElseThrow(err)', () => {\n      let positiveEither = Either.fromNullable('hello')\n        , negativeEither = Either.fromNullable(undefined);\n\n      assert.equal(\n        positiveEither\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .getOrElseThrow('some error message')\n        , 'HELLO WORLD');\n\n      expect(() =>\n        negativeEither\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .getOrElseThrow('some error message')\n      ).to.throw(chai.Error, 'some error message');\n\n    });\n\n    /** @test {Fantasy-Land#Either#orElse} */\n    it('test: Either.Rigth/Either.Left#orElse(f)', () => {\n      let positiveEither = Either.fromNullable('hello')\n        , negativeEither = Either.fromNullable(undefined);\n\n      assert.equal(\n        positiveEither\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .orElse(() => Either.right(3))\n          .get()\n        , 'HELLO WORLD');\n\n      assert.equal(\n        negativeEither\n          .map(s => `${s} world`)\n          .map(s => s.toUpperCase())\n          .orElse(() => Either.right(3))\n          .get()\n        , 3);\n    });\n  });\n\n  describe('test: Setoid', () => {\n    it('test: .toSetoid(eqFn) with positive case', () => {\n      const comparePeopleFn = (p, p2) => p.id === p2.id;\n      const PersonSetoid = toSetoid(comparePeopleFn);\n      const person1 = { id: 1, name: 'Oleh' };\n      const person2 = { id: 1, name: 'Oleh' };\n\n      assert.isTrue(\n        PersonSetoid(person1)\n          .equals(\n            PersonSetoid(person2))\n      );\n\n      assert.isTrue(\n        PersonSetoid(person2)\n          .equals(\n            PersonSetoid(person1))\n      );\n    });\n\n    it('test: .toSetoid(eqFn) with negative case', () => {\n      const comparePeopleFn = (p, p2) => p.id === p2.id;\n      const PersonSetoid = toSetoid(comparePeopleFn);\n      const person1 = { id: 1, name: 'Oleh' }\n      const person2 = { id: 2, name: 'Oleh' }\n\n      assert.isFalse(\n        PersonSetoid(person1)\n          .equals(\n            PersonSetoid(person2))\n      );\n\n      assert.isFalse(\n        PersonSetoid(person2)\n          .equals(\n            PersonSetoid(person1))\n      );\n    });\n\n    it('test: .isSetoid(obj)', () => {\n      const comparePeopleFn = (p, p2) => p.id === p2.id;\n      const PersonSetoid = toSetoid(comparePeopleFn);\n      const person1 = { id: 1, name: 'Oleh' }\n      const person2 = {\n        id: 2,\n        name: 'Oleh',\n        equals: p => true\n      };\n\n      assert.isTrue(isSetoid(PersonSetoid(person1)));\n      assert.isFalse(isSetoid(person1));\n      assert.isFalse(isSetoid(person2));\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/specs/fantasy-land.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "describe54",
    "testId": 54,
    "memberof": "specs/fantasy-land.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54",
    "access": null,
    "description": "Fantasy Land Library Tests",
    "lineNumber": 12,
    "testTargets": [
      "Fantasy-Land"
    ]
  },
  {
    "__docId__": 335,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "specs/fantasy-land.spec.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.it55",
    "access": null,
    "description": "test: Functor",
    "lineNumber": 15,
    "testTargets": [
      "Fantasy-Land#Functor"
    ]
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "specs/fantasy-land.spec.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.it56",
    "access": null,
    "description": "test: Apply",
    "lineNumber": 33,
    "testTargets": [
      "Fantasy-Land#Apply"
    ]
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "specs/fantasy-land.spec.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.it57",
    "access": null,
    "description": "test: Applicative",
    "lineNumber": 57,
    "testTargets": [
      "*"
    ]
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "specs/fantasy-land.spec.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.it58",
    "access": null,
    "description": "test: Monad",
    "lineNumber": 81,
    "testTargets": [
      "Fantasy-Land#Monad"
    ]
  },
  {
    "__docId__": 339,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "specs/fantasy-land.spec.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.it59",
    "access": null,
    "description": "test: LazyFunctor",
    "lineNumber": 129,
    "testTargets": [
      "Fantasy-Land#LazyFunctor"
    ]
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "describe60",
    "testId": 60,
    "memberof": "specs/fantasy-land.spec.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe60",
    "access": null,
    "description": "test: Maybe",
    "lineNumber": 161,
    "testTargets": [
      "Fantasy-Land#Maybe"
    ]
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe60.it61",
    "access": null,
    "description": "test: Maybe.fromNullable",
    "lineNumber": 164,
    "testTargets": [
      "Fantasy-Land#Maybe#fromNullable"
    ]
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe60.it62",
    "access": null,
    "description": "test: Maybe.of",
    "lineNumber": 176,
    "testTargets": [
      "Fantasy-Land#Maybe#of"
    ]
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe60.it63",
    "access": null,
    "description": "test: Maybe.just",
    "lineNumber": 184,
    "testTargets": [
      "Fantasy-Land#Maybe#just"
    ]
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe60.it64",
    "access": null,
    "description": "test: Maybe.nothing",
    "lineNumber": 192,
    "testTargets": [
      "Fantasy-Land#Maybe#nothing"
    ]
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe60.it65",
    "access": null,
    "description": "test: Maybe.Just/Maybe.Nothing#map(f)",
    "lineNumber": 200,
    "testTargets": [
      "Fantasy-Land#Maybe#map"
    ]
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe60.it66",
    "access": null,
    "description": "test: Maybe.Just/Maybe.Nothing#getValue()",
    "lineNumber": 220,
    "testTargets": [
      "Fantasy-Land#Maybe#getValue"
    ]
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe60.it67",
    "access": null,
    "description": "test: Maybe.Just/Maybe.Nothing#get()",
    "lineNumber": 239,
    "testTargets": [
      "Fantasy-Land#Maybe#get"
    ]
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe60.it68",
    "access": null,
    "description": "test: Maybe.Just/Maybe.Nothing#getOrElse()",
    "lineNumber": 259,
    "testTargets": [
      "Fantasy-Land#Maybe#getOrElse"
    ]
  },
  {
    "__docId__": 349,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe60.it69",
    "access": null,
    "description": "test: Maybe.Just/Maybe.Nothing#chain()",
    "lineNumber": 281,
    "testTargets": [
      "Fantasy-Land#Maybe#chain"
    ]
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe60.it70",
    "access": null,
    "description": "test: Maybe.Just/Maybe.Nothing#filter()",
    "lineNumber": 296,
    "testTargets": [
      "Fantasy-Land#Maybe#filter"
    ]
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "describe71",
    "testId": 71,
    "memberof": "specs/fantasy-land.spec.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe71",
    "access": null,
    "description": "test: Either",
    "lineNumber": 314,
    "testTargets": [
      "Fantasy-Land#Either"
    ]
  },
  {
    "__docId__": 352,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe71.it72",
    "access": null,
    "description": "test: Either.fromNullable",
    "lineNumber": 317,
    "testTargets": [
      "Fantasy-Land#Maybe#fromNullable"
    ]
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe71.it73",
    "access": null,
    "description": "test: Either.of",
    "lineNumber": 329,
    "testTargets": [
      "Fantasy-Land#Either#of"
    ]
  },
  {
    "__docId__": 354,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe71.it74",
    "access": null,
    "description": "test: Either.tryCatch with falsy value",
    "lineNumber": 337,
    "testTargets": [
      "Fantasy-Land#Either#tryCatch"
    ]
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe71.it75",
    "access": null,
    "description": "test: Either.tryCatch with truthy value",
    "lineNumber": 347,
    "testTargets": [
      "Fantasy-Land#Either#tryCatch"
    ]
  },
  {
    "__docId__": 356,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe71.it76",
    "access": null,
    "description": "test: double Either.tryCatch",
    "lineNumber": 356,
    "testTargets": [
      "Fantasy-Land#Either#tryCatch"
    ]
  },
  {
    "__docId__": 357,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe71.it77",
    "access": null,
    "description": "test: Either.right",
    "lineNumber": 366,
    "testTargets": [
      "Fantasy-Land#Either#right"
    ]
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe71.it78",
    "access": null,
    "description": "test: Either.left",
    "lineNumber": 374,
    "testTargets": [
      "Fantasy-Land#Either#left"
    ]
  },
  {
    "__docId__": 359,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe71.it79",
    "access": null,
    "description": "test: Either.Right/Either.Left#map(f)",
    "lineNumber": 382,
    "testTargets": [
      "Fantasy-Land#Either#map"
    ]
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe71.it80",
    "access": null,
    "description": "test: Either.Right/Either.Left#getValue()",
    "lineNumber": 402,
    "testTargets": [
      "Fantasy-Land#Either#getValue"
    ]
  },
  {
    "__docId__": 361,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe71.it81",
    "access": null,
    "description": "test: Either.Right/Either.Left#get()",
    "lineNumber": 421,
    "testTargets": [
      "Fantasy-Land#Either#get"
    ]
  },
  {
    "__docId__": 362,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe71.it82",
    "access": null,
    "description": "test: Either.Right/Either.Left#getOrElse()",
    "lineNumber": 441,
    "testTargets": [
      "Fantasy-Land#Either#getOrElse"
    ]
  },
  {
    "__docId__": 363,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe71.it83",
    "access": null,
    "description": "test: Either.Right/Either.Left#chain()",
    "lineNumber": 463,
    "testTargets": [
      "Fantasy-Land#Either#chain"
    ]
  },
  {
    "__docId__": 364,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe71.it84",
    "access": null,
    "description": "test: Either.Right/Either.Left#filter()",
    "lineNumber": 478,
    "testTargets": [
      "Fantasy-Land#Either#filter"
    ]
  },
  {
    "__docId__": 365,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe71.it85",
    "access": null,
    "description": "test: Either.Rigth/Either.Left#getOrElseThrow(err)",
    "lineNumber": 495,
    "testTargets": [
      "Fantasy-Land#Either#getOrElseThrow"
    ]
  },
  {
    "__docId__": 366,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe71.it86",
    "access": null,
    "description": "test: Either.Rigth/Either.Left#orElse(f)",
    "lineNumber": 516,
    "testTargets": [
      "Fantasy-Land#Either#orElse"
    ]
  },
  {
    "__docId__": 367,
    "kind": "test",
    "name": "describe87",
    "testId": 87,
    "memberof": "specs/fantasy-land.spec.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe87",
    "access": null,
    "description": "test: Setoid",
    "lineNumber": 538
  },
  {
    "__docId__": 368,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe87.it88",
    "access": null,
    "description": "test: .toSetoid(eqFn) with positive case",
    "lineNumber": 539
  },
  {
    "__docId__": 369,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe87.it89",
    "access": null,
    "description": "test: .toSetoid(eqFn) with negative case",
    "lineNumber": 558
  },
  {
    "__docId__": 370,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "specs/fantasy-land.spec.js~describe54.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "specs/fantasy-land.spec.js~describe54.describe87.it90",
    "access": null,
    "description": "test: .isSetoid(obj)",
    "lineNumber": 577
  },
  {
    "__docId__": 371,
    "kind": "testFile",
    "name": "specs/function-combinators.spec.js",
    "content": "import { assert, expect, chai } from 'chai';\n\nimport * as FncLib from '../src/Function-Combinators';\nimport { compose } from '../src/Function';\nimport * as MthLib from '../src/Math';\n\n\n/** @test {Function-Combinators} */\ndescribe('Function Combinators Library Tests', () => {\n\n  /** @test {Function-Combinators#identity} */\n  it('test: .identity(value) (I combinator)', () => {\n    assert.equal(FncLib.identity(2), 2);\n  });\n\n  /** @test {Function-Combinators#always} */\n  it('test: .always(value)', () => {\n    assert.typeOf(FncLib.always(2), 'function');\n    assert.instanceOf(FncLib.always(2), Function);\n    assert.equal(FncLib.always(2)(), 2);\n  });\n\n  /** @test {Function-Combinators#flip} */\n  it('test: .flip(fn)', () => {\n    const concat2Words = w1 => w2 => `${w1} ${w2}`;\n    assert.equal(\n      FncLib.flip(concat2Words)('world')('hello'),\n      'hello world'\n    );\n  });\n\n  /** @test {Function-Combinators#thrush} */\n  it('test: .thrush(x)', () => {\n    const addWorld = w => `${w} world`;\n    assert.equal(\n      FncLib.thrush('hello')(addWorld),\n      'hello world'\n    );\n  });\n\n  /** @test {Function-Combinators#duplication} */\n  it('test: .duplication(fn)', () => {\n    const add = x => y => x + y;\n\n    assert.equal(FncLib.duplication(add)(7), 14);\n  });\n\n  /** @test {Function-Combinators#fork} */\n  it('test: .fork(join, fn1, fn2)', () => {\n    const calc = FncLib.fork(MthLib.multiply, x => x + x, FncLib.identity);\n    assert.equal(calc(2), 8);\n  });\n\n  /** @test {Function-Combinators#seq} */\n  it('test: .seq(...fns)', () => {\n    let result = 0\n      , addToResult = x => result += x;\n\n    assert.equal(result, 0);\n    FncLib.seq(addToResult, addToResult)(4);\n    assert.equal(result, 8);\n  });\n\n  /** @test {Function-Combinators#alt} */\n  it('test: .alt(fn1, fn2)', () => {\n    const calc = FncLib.alt(FncLib.identity, x => x + 1);\n    assert.equal(calc(0), 1);\n    assert.equal(calc(2), 2);\n  });\n\n  /** @test {Function-Combinators#tap} */\n  it('test: .tap(fn)', () => {\n    let sayHelloTo = name => `Hello ${name}`\n      , toUpperCase = str => str.toUpperCase()\n      , addDollarSign  = str => `$${str}$`\n      , chainMiddleResult = ''\n      , tapHandler = data => chainMiddleResult = data\n      , sayHelloInUpperCase = compose(addDollarSign, sayHelloTo, FncLib.tap(tapHandler), toUpperCase);\n\n    assert.equal(sayHelloInUpperCase('oleh'), '$Hello OLEH$');\n    assert.equal(chainMiddleResult, 'OLEH');\n  });\n});\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/specs/function-combinators.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 372,
    "kind": "test",
    "name": "describe91",
    "testId": 91,
    "memberof": "specs/function-combinators.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "specs/function-combinators.spec.js~describe91",
    "access": null,
    "description": "Function Combinators Library Tests",
    "lineNumber": 9,
    "testTargets": [
      "Function-Combinators"
    ]
  },
  {
    "__docId__": 373,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "specs/function-combinators.spec.js~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "specs/function-combinators.spec.js~describe91.it92",
    "access": null,
    "description": "test: .identity(value) (I combinator)",
    "lineNumber": 12,
    "testTargets": [
      "Function-Combinators#identity"
    ]
  },
  {
    "__docId__": 374,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "specs/function-combinators.spec.js~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "specs/function-combinators.spec.js~describe91.it93",
    "access": null,
    "description": "test: .always(value)",
    "lineNumber": 17,
    "testTargets": [
      "Function-Combinators#always"
    ]
  },
  {
    "__docId__": 375,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "specs/function-combinators.spec.js~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "specs/function-combinators.spec.js~describe91.it94",
    "access": null,
    "description": "test: .flip(fn)",
    "lineNumber": 24,
    "testTargets": [
      "Function-Combinators#flip"
    ]
  },
  {
    "__docId__": 376,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "specs/function-combinators.spec.js~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "specs/function-combinators.spec.js~describe91.it95",
    "access": null,
    "description": "test: .thrush(x)",
    "lineNumber": 33,
    "testTargets": [
      "Function-Combinators#thrush"
    ]
  },
  {
    "__docId__": 377,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "specs/function-combinators.spec.js~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "specs/function-combinators.spec.js~describe91.it96",
    "access": null,
    "description": "test: .duplication(fn)",
    "lineNumber": 42,
    "testTargets": [
      "Function-Combinators#duplication"
    ]
  },
  {
    "__docId__": 378,
    "kind": "test",
    "name": "it97",
    "testId": 97,
    "memberof": "specs/function-combinators.spec.js~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "specs/function-combinators.spec.js~describe91.it97",
    "access": null,
    "description": "test: .fork(join, fn1, fn2)",
    "lineNumber": 49,
    "testTargets": [
      "Function-Combinators#fork"
    ]
  },
  {
    "__docId__": 379,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "specs/function-combinators.spec.js~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "specs/function-combinators.spec.js~describe91.it98",
    "access": null,
    "description": "test: .seq(...fns)",
    "lineNumber": 55,
    "testTargets": [
      "Function-Combinators#seq"
    ]
  },
  {
    "__docId__": 380,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "specs/function-combinators.spec.js~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "specs/function-combinators.spec.js~describe91.it99",
    "access": null,
    "description": "test: .alt(fn1, fn2)",
    "lineNumber": 65,
    "testTargets": [
      "Function-Combinators#alt"
    ]
  },
  {
    "__docId__": 381,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "specs/function-combinators.spec.js~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "specs/function-combinators.spec.js~describe91.it100",
    "access": null,
    "description": "test: .tap(fn)",
    "lineNumber": 72,
    "testTargets": [
      "Function-Combinators#tap"
    ]
  },
  {
    "__docId__": 382,
    "kind": "testFile",
    "name": "specs/function.spec.js",
    "content": "import { assert, expect, chai } from 'chai';\n\nimport * as FnLib from '../src/Function';\n\n\n/** @test {Function} */\ndescribe('Function Library Tests', () => {\n\n  /** @test {Function#curry} */\n  it('test: .curry(fn)', () => {\n    let add = (a, b, c) => a + b + c\n      , curried = FnLib.curry(add);\n\n    assert.equal(curried(8)(11)(7), 26);\n    assert.equal(curried(8, 11)(7), 26);\n    assert.equal(curried(8)(11, 7), 26);\n    assert.equal(curried(8, 11, 7), 26);\n  });\n\n  /** @test {Function#partial} */\n  it('test: .partial(fn)', () => {\n    const greet = (greeting, name) => `${greeting} ${name}`\n      , sayHelloTo = FnLib.partial(greet, 'hello');\n\n    assert.equal(sayHelloTo('fred'), 'hello fred');\n\n    const greetFred = FnLib.partial(greet, undefined, 'fred');\n    assert.equal(greetFred('hi'), 'hi fred');\n  });\n\n  /** @test {Function#compose} */\n  it('test: .compose(...fns)', () => {\n    const sayHelloTo = name => `Hello ${name}`\n        , toUpperCase = str => str.toUpperCase()\n        , addDollarSign  = str => `$${str}$`\n        , sayHelloInUpperCase = FnLib.compose(addDollarSign, sayHelloTo, toUpperCase);\n\n    assert.equal(sayHelloInUpperCase('oleh'), '$Hello OLEH$');\n  });\n\n  /** @test {Function#pipe} */\n  it('test: .pipe(...fns)', () => {\n    let sayHelloTo = name => `Hello ${name}`\n      , toUpperCase = str => str.toUpperCase()\n      , addDollarSign  = str => `$${str}$`\n      , sayHelloInUpperCase = FnLib.pipe(toUpperCase, sayHelloTo, addDollarSign);\n\n    assert.equal(sayHelloInUpperCase('oleh'), '$Hello OLEH$');\n  });\n\n  /** @test {Function#once} */\n  it('test: .once(fn)', () => {\n    let dollarAccount = 0\n      , payCb = () => dollarAccount += 100\n      , doPayment = FnLib.once(payCb);\n\n    assert.equal(dollarAccount, 0);\n\n    doPayment();\n    assert.equal(dollarAccount, 100);\n\n    doPayment();\n    assert.notEqual(dollarAccount, 200);\n    assert.equal(dollarAccount, 100);\n  });\n\n  /** @test {Function#unary} */\n  it('test: .unary(fn)', () => {\n    expect([1, 2, 3].map(a => a * a)).to.deep.equal([1, 4, 9]);\n    expect([1, 2, 3].map(parseInt)).to.deep.equal([1, NaN, NaN]);\n    expect([1, 2, 3].map(FnLib.unary(parseInt))).to.deep.equal([1, 2, 3]);\n  });\n\n  /** @test {Function#memoize} */\n  it('test: .memoize(fn)', () => {\n    let invokeCounter = 0\n      , invokeIncrement = (num) => {\n          invokeCounter++;\n          return num * num;\n        }\n      , memoizedInvokeIncrement = FnLib.memoize(invokeIncrement);\n\n      assert.equal(invokeCounter, 0);\n\n      assert.equal(memoizedInvokeIncrement(3), 9);\n      assert.equal(invokeCounter, 1);\n\n      assert.equal(memoizedInvokeIncrement(3), 9);\n      assert.notEqual(invokeCounter, 2);\n      assert.equal(invokeCounter, 1);\n  });\n\n  /** @test {Function#rearg} */\n  it('test: .rearg(fn, order) ', () => {\n    let rearged = FnLib.rearg((a, b, c) => {\n      return [a,b,c]\n    }, [2, 0, 1]);\n\n    assert.deepEqual(\n      rearged('y', 'z', 'x'),\n      ['x', 'y', 'z']);\n  });\n\n  /** @test {Function#after} */\n  it('test: .after(count, fn)', () => {\n    let wasInvoked = false\n      , invokeSpy = () => wasInvoked = true\n      , invokeAfter2Calls = FnLib.after(2, invokeSpy);\n\n    invokeAfter2Calls();\n    assert.isFalse(wasInvoked);\n\n    invokeAfter2Calls();\n    assert.isTrue(wasInvoked);\n  });\n\n  /** @test {Function#orCurry} */\n  it('test: .orCurry(fn, args)', () => {\n    function add3Nums(x, y, z) {\n      return FnLib.orCurry(\n        function(x, y, z) {\n          return x + y + z;\n        }\n      , arguments);\n    };\n\n    assert.equal(add3Nums()(1)()(2)()(3), 6);\n    assert.equal(add3Nums(1)(2)(3), 6);\n    assert.equal(add3Nums(1, 2)(3), 6);\n    assert.equal(add3Nums(1)(2, 3), 6);\n    assert.equal(add3Nums(1, 2, 3), 6);\n  });\n});\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/specs/function.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 383,
    "kind": "test",
    "name": "describe101",
    "testId": 101,
    "memberof": "specs/function.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "specs/function.spec.js~describe101",
    "access": null,
    "description": "Function Library Tests",
    "lineNumber": 7,
    "testTargets": [
      "Function"
    ]
  },
  {
    "__docId__": 384,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "specs/function.spec.js~describe101",
    "testDepth": 1,
    "static": true,
    "longname": "specs/function.spec.js~describe101.it102",
    "access": null,
    "description": "test: .curry(fn)",
    "lineNumber": 10,
    "testTargets": [
      "Function#curry"
    ]
  },
  {
    "__docId__": 385,
    "kind": "test",
    "name": "it103",
    "testId": 103,
    "memberof": "specs/function.spec.js~describe101",
    "testDepth": 1,
    "static": true,
    "longname": "specs/function.spec.js~describe101.it103",
    "access": null,
    "description": "test: .partial(fn)",
    "lineNumber": 21,
    "testTargets": [
      "Function#partial"
    ]
  },
  {
    "__docId__": 386,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "specs/function.spec.js~describe101",
    "testDepth": 1,
    "static": true,
    "longname": "specs/function.spec.js~describe101.it104",
    "access": null,
    "description": "test: .compose(...fns)",
    "lineNumber": 32,
    "testTargets": [
      "Function#compose"
    ]
  },
  {
    "__docId__": 387,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "specs/function.spec.js~describe101",
    "testDepth": 1,
    "static": true,
    "longname": "specs/function.spec.js~describe101.it105",
    "access": null,
    "description": "test: .pipe(...fns)",
    "lineNumber": 42,
    "testTargets": [
      "Function#pipe"
    ]
  },
  {
    "__docId__": 388,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "specs/function.spec.js~describe101",
    "testDepth": 1,
    "static": true,
    "longname": "specs/function.spec.js~describe101.it106",
    "access": null,
    "description": "test: .once(fn)",
    "lineNumber": 52,
    "testTargets": [
      "Function#once"
    ]
  },
  {
    "__docId__": 389,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "specs/function.spec.js~describe101",
    "testDepth": 1,
    "static": true,
    "longname": "specs/function.spec.js~describe101.it107",
    "access": null,
    "description": "test: .unary(fn)",
    "lineNumber": 68,
    "testTargets": [
      "Function#unary"
    ]
  },
  {
    "__docId__": 390,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "specs/function.spec.js~describe101",
    "testDepth": 1,
    "static": true,
    "longname": "specs/function.spec.js~describe101.it108",
    "access": null,
    "description": "test: .memoize(fn)",
    "lineNumber": 75,
    "testTargets": [
      "Function#memoize"
    ]
  },
  {
    "__docId__": 391,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "specs/function.spec.js~describe101",
    "testDepth": 1,
    "static": true,
    "longname": "specs/function.spec.js~describe101.it109",
    "access": null,
    "description": "test: .rearg(fn, order) ",
    "lineNumber": 94,
    "testTargets": [
      "Function#rearg"
    ]
  },
  {
    "__docId__": 392,
    "kind": "test",
    "name": "it110",
    "testId": 110,
    "memberof": "specs/function.spec.js~describe101",
    "testDepth": 1,
    "static": true,
    "longname": "specs/function.spec.js~describe101.it110",
    "access": null,
    "description": "test: .after(count, fn)",
    "lineNumber": 105,
    "testTargets": [
      "Function#after"
    ]
  },
  {
    "__docId__": 393,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "specs/function.spec.js~describe101",
    "testDepth": 1,
    "static": true,
    "longname": "specs/function.spec.js~describe101.it111",
    "access": null,
    "description": "test: .orCurry(fn, args)",
    "lineNumber": 118,
    "testTargets": [
      "Function#orCurry"
    ]
  },
  {
    "__docId__": 394,
    "kind": "testFile",
    "name": "specs/lens.spec.js",
    "content": "import { assert } from 'chai';\n\nimport { prop, lensIndex, lensProp, assoc, assocPath,\n  path, pathEq, pathOr, pathSatisfies } from '../src/Lens';\nimport { IncorrectArgsTypeError } from '../src/Error/incorrect-args-type-error';\n\n\n/** @test {Lens} */\ndescribe('Lens Library Tests', () => {\n\n  /** @test {Lens#prop} */\n  it('test: prop(propName, source)', () => {\n    let user = { name: 'Oleh' };\n    assert.equal('Oleh', prop('name', user));\n  });\n\n  /** @test {Lens#prop} */\n  it('test: prop(propName, source) with inner object', () => {\n    let user = { name: { first: 'Oleh' } };\n    assert.notEqual({ first: 'Oleh' }, prop('name', user));\n    assert.equal('Oleh', prop('name', user).first);\n  });\n\n  /** @test {Lens#prop} */\n  it('test: prop(propName, source) with wrong first argument', () => {\n    assert.throw(() => prop(1, {}), IncorrectArgsTypeError, 'Incorrect arguments were passed');\n  });\n\n  /** @test {Lens#prop} */\n  it('test: prop(propName, source) with wrong second argument', () => {\n    assert.throw(() => prop('some', []), IncorrectArgsTypeError, 'Incorrect arguments were passed');\n  });\n\n  /** @test {Lens#prop} */\n  it('test: prop(propName, source) with undefined first argument', () => {\n    assert.throw(() => prop(undefined, 2), IncorrectArgsTypeError, 'Incorrect arguments were passed');\n  });\n\n  /** @test {Lens#prop} */\n  it('test: prop(propName, source) with undefined second argument', () => {\n    assert.throw(() => prop('hello', undefined), IncorrectArgsTypeError, 'Incorrect arguments were passed');\n  });\n\n  /** @test {Lens#lensIndex} */\n  it('test: lensIndex(index, source)', () => {\n    let names = ['Oleh', 'John'];\n    assert.equal('Oleh', lensIndex(0, names));\n  });\n\n  /** @test {Lens#lensIndex} */\n  it('test: lensIndex(index, source) with inner object', () => {\n    let expected = { name: { first: 'Oleh' } };\n    let names = [expected];\n    assert.notEqual(expected, lensIndex(0, names));\n    assert.equal(expected.name.first, lensIndex(0, names).name.first);\n  });\n\n  /** @test {Lens#lensIndex} */\n  it('test: lensIndex(index, source) with wrong first argument', () => {\n    assert.throw(() => lensIndex('propName', []), IncorrectArgsTypeError, 'Incorrect arguments were passed');\n  });\n\n  /** @test {Lens#lensIndex} */\n  it('test: lensIndex(index, source) with wrong second argument', () => {\n    assert.throw(() => prop(1, {}), IncorrectArgsTypeError, 'Incorrect arguments were passed');\n  });\n\n  /** @test {Lens#lensIndex} */\n  it('test: lensIndex(index, source) with undefined first argument', () => {\n    assert.throw(() => lensIndex(undefined, []), IncorrectArgsTypeError, 'Incorrect arguments were passed');\n  });\n\n  /** @test {Lens#lensIndex} */\n  it('test: lensIndex(index, source) with undefined second argument', () => {\n    assert.throw(() => lensIndex(1, undefined), IncorrectArgsTypeError, 'Incorrect arguments were passed');\n  });\n\n  /** @test {Lens#lensProp} */\n  it('test: lensProp(propName)', () => {\n    let user1 = { name: 'John' }\n      , user2 = { name: 'Eric' }\n      , nameLens = lensProp('name');\n    assert.equal('John', nameLens(user1));\n    assert.equal('Eric', nameLens(user2));\n  });\n\n  /** @test {Lens#lensProp} */\n  it('test: lensProp(propName) with wrong first argument', () => {\n    assert.throw(() => lensProp(1), IncorrectArgsTypeError, 'Incorrect arguments were passed');\n  });\n\n  /** @test {Lens#lensProp} */\n  it('test: lensProp(propName) with wrong second argument', () => {\n    assert.throw(() => lensProp('some')(2), IncorrectArgsTypeError, 'Incorrect arguments were passed');\n  });\n\n  /** @test {Lens#lensProp} */\n  it('test: lensProp(propName) with undefined first argument', () => {\n    assert.throw(() => lensProp(undefined), IncorrectArgsTypeError, 'Incorrect arguments were passed');\n  });\n\n  /** @test {Lens#lensProp} */\n  it('test: lensProp(propName) with undefined first argument', () => {\n    assert.throw(() => lensProp('hello')(undefined), IncorrectArgsTypeError, 'Incorrect arguments were passed');\n  });\n\n  /** @test {Lens#assoc} */\n  it('test: assoc(propName, valueToBeSet, source)', () => {\n    let user = { name: 'John' }\n      , updatedUser = assoc('name', 'Eric', user);\n    assert.equal('Eric', updatedUser.name);\n    assert.equal('John', user.name);\n    assert.notEqual(user, updatedUser);\n  });\n\n  /** @test {Lens#assoc} */\n  it('test: assoc(propName, valueToBeSet, source) with inner object', () => {\n    let user = { name: { first: 'John' } }\n      , updatedUser =  assoc('name', { first: 'Eric' }, user)\n\n    assert.notEqual(user.name, updatedUser.name);\n    assert.equal('John', user.name.first);\n    assert.equal('Eric', updatedUser.name.first);\n  });\n\n  /** @test {Lens#assoc} */\n  it('test: assoc(propName, valueToBeSet, source) with wrong first argument', () => {\n    assert.throw(() => assoc(1, {}, {}), IncorrectArgsTypeError, 'Incorrect arguments were passed');\n  });\n\n  /** @test {Lens#assoc} */\n  it('test: assoc(propName, valueToBeSet, source) with wrong third argument', () => {\n    assert.throw(() => assoc('some', {}, 'not object'), IncorrectArgsTypeError, 'Incorrect arguments were passed');\n  });\n\n  /** @test {Lens#assoc} */\n  it('test: assoc(propName, valueToBeSet, source) with undefined first argument', () => {\n    assert.throw(() => assoc(undefined, 2, {}), IncorrectArgsTypeError, 'Incorrect arguments were passed');\n  });\n\n  /** @test {Lens#assoc} */\n  it('test: assoc(propName, valueToBeSet, source) with undefined third argument', () => {\n    assert.throw(() => prop('hello', 3, undefined), IncorrectArgsTypeError, 'Incorrect arguments were passed');\n  });\n\n  /** @test {Lens#assocPath} */\n  it('test: assocPath(path, valueToBeSet, source)', () => {\n    let user = {name: 'Oleh'}\n      , result1 = assocPath(['a', 1, 'b', 'c'], 'hello', user)\n      , result2 = assocPath(['a', 1, 'b', 'c', 0], 'world', user)\n      , result3 = assocPath(['a', 1, 3, 'b', 'c', 0, 'r'], 'yeah', user);\n\n    assert.equal(result1.a[1].b.c, 'hello');\n    assert.equal(result2.a[1].b.c[0], 'world');\n    assert.equal(result3.a[1][3].b.c[0].r, 'yeah');\n    assert.notEqual(result1, user);\n    assert.notEqual(result2, user);\n    assert.notEqual(result3, user);\n  });\n\n  /** @test {Lens#assocPath} */\n  it('test: assocPath(path, valueToBeSet, source) with array', () => {\n    let user = [{name: 'John'}, {name: 'Jimi'}]\n      , result = assocPath([1, 1, 'b', 'd', 1, 'c'], 'hello', user);\n\n    assert.equal(result[1][1].b.d[1].c, 'hello');\n\n    // should not override old values\n    assert.equal(result[0].name, 'John');\n\n  });\n\n  /** @test {Lens#assocPath} */\n  it('test: assocPath(path, valueToBeSet, source) should not override old props', () => {\n    let user = {\n      d: { r: [ 1, { b:2 } ] },\n      a: [\n        [ { b:2 } ],\n        [ { b: { c: [{ r: 'ddd' } ] } }, { b: { c: [ { r: 'bbb' } ] } }, { b: { c: [ { r: 'aaa' } ] } } ]\n      ]\n    }\n      , result = assocPath(['a', 1, 2, 'b', 'c', 0, 'r'], 'yeah', user);\n\n    // should not override old object\n    assert.equal(user.a[1][2].b.c[0].r, 'aaa');\n    assert.equal(user.a[1][1].b.c[0].r, 'bbb');\n    assert.equal(user.a[1][0].b.c[0].r, 'ddd');\n    assert.equal(user.d.r[1].b, 2);\n\n    // should override only one propperty\n    assert.equal(result.a[1][2].b.c[0].r, 'yeah');\n\n    // rest should stay the same as in source\n    assert.equal(result.a[1][1].b.c[0].r, 'bbb');\n    assert.equal(result.a[1][0].b.c[0].r, 'ddd');\n    assert.equal(result.d.r[1].b, 2);\n\n    // full identity\n    assert.notEqual(JSON.stringify(user), JSON.stringify(result));\n\n    result = assocPath(['a', 1, 2, 'b', 'c', 0, 'r'], 'aaa', user);\n\n    assert.equal(JSON.stringify(user), JSON.stringify(result));\n    assert.deepEqual(user, result);\n  });\n\n  /** @test {Lens#path} */\n  it('test: path(p, source)', () => {\n    let user = { name: 'John', address: { email: 'some@email.com' }}\n      , result = path(['address', 'email'], user);\n    assert.equal(result, 'some@email.com');\n    assert.isUndefined(path(['address', 'email', 'notExisting'], user));\n  });\n\n  /** @test {Lens#pathEq} */\n  it('test: pathEq(path, source, value)', () => {\n    let user = { name: 'John', address: { email: 'some@email.com' }}\n      , result1 = pathEq(['address', 'email'], user, 'not email')\n      , result2 = pathEq(['address', 'email'], user, 'some@email.com');\n    assert.isFalse(result1);\n    assert.isTrue(result2, 'some@email.com');\n  });\n\n  /** @test {Lens#pathOr} */\n  it('test: pathOr(path, source, orValue)', () => {\n    let user = { name: 'John', address: { email: 'some@email.com' }};\n    assert.equal(pathOr(['address', 'email'], user, 'N/A'), 'some@email.com');\n    assert.equal(pathOr(['address', 'email', 'notExisting'], user, 'N/A'), 'N/A');\n  });\n\n  /** @test {Lens#pathSatisfies} */\n  it('test: pathSatisfies(path, source, satisfyFn)', () => {\n    let user = { name: 'John', address: { email: 'some@email.com' }};\n    assert.equal(pathSatisfies(['address', 'email'], user, p => p.toUpperCase()), 'SOME@EMAIL.COM');\n  });\n});\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/specs/lens.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 395,
    "kind": "test",
    "name": "describe112",
    "testId": 112,
    "memberof": "specs/lens.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "specs/lens.spec.js~describe112",
    "access": null,
    "description": "Lens Library Tests",
    "lineNumber": 9,
    "testTargets": [
      "Lens"
    ]
  },
  {
    "__docId__": 396,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it113",
    "access": null,
    "description": "test: prop(propName, source)",
    "lineNumber": 12,
    "testTargets": [
      "Lens#prop"
    ]
  },
  {
    "__docId__": 397,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it114",
    "access": null,
    "description": "test: prop(propName, source) with inner object",
    "lineNumber": 18,
    "testTargets": [
      "Lens#prop"
    ]
  },
  {
    "__docId__": 398,
    "kind": "test",
    "name": "it115",
    "testId": 115,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it115",
    "access": null,
    "description": "test: prop(propName, source) with wrong first argument",
    "lineNumber": 25,
    "testTargets": [
      "Lens#prop"
    ]
  },
  {
    "__docId__": 399,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it116",
    "access": null,
    "description": "test: prop(propName, source) with wrong second argument",
    "lineNumber": 30,
    "testTargets": [
      "Lens#prop"
    ]
  },
  {
    "__docId__": 400,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it117",
    "access": null,
    "description": "test: prop(propName, source) with undefined first argument",
    "lineNumber": 35,
    "testTargets": [
      "Lens#prop"
    ]
  },
  {
    "__docId__": 401,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it118",
    "access": null,
    "description": "test: prop(propName, source) with undefined second argument",
    "lineNumber": 40,
    "testTargets": [
      "Lens#prop"
    ]
  },
  {
    "__docId__": 402,
    "kind": "test",
    "name": "it119",
    "testId": 119,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it119",
    "access": null,
    "description": "test: lensIndex(index, source)",
    "lineNumber": 45,
    "testTargets": [
      "Lens#lensIndex"
    ]
  },
  {
    "__docId__": 403,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it120",
    "access": null,
    "description": "test: lensIndex(index, source) with inner object",
    "lineNumber": 51,
    "testTargets": [
      "Lens#lensIndex"
    ]
  },
  {
    "__docId__": 404,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it121",
    "access": null,
    "description": "test: lensIndex(index, source) with wrong first argument",
    "lineNumber": 59,
    "testTargets": [
      "Lens#lensIndex"
    ]
  },
  {
    "__docId__": 405,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it122",
    "access": null,
    "description": "test: lensIndex(index, source) with wrong second argument",
    "lineNumber": 64,
    "testTargets": [
      "Lens#lensIndex"
    ]
  },
  {
    "__docId__": 406,
    "kind": "test",
    "name": "it123",
    "testId": 123,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it123",
    "access": null,
    "description": "test: lensIndex(index, source) with undefined first argument",
    "lineNumber": 69,
    "testTargets": [
      "Lens#lensIndex"
    ]
  },
  {
    "__docId__": 407,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it124",
    "access": null,
    "description": "test: lensIndex(index, source) with undefined second argument",
    "lineNumber": 74,
    "testTargets": [
      "Lens#lensIndex"
    ]
  },
  {
    "__docId__": 408,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it125",
    "access": null,
    "description": "test: lensProp(propName)",
    "lineNumber": 79,
    "testTargets": [
      "Lens#lensProp"
    ]
  },
  {
    "__docId__": 409,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it126",
    "access": null,
    "description": "test: lensProp(propName) with wrong first argument",
    "lineNumber": 88,
    "testTargets": [
      "Lens#lensProp"
    ]
  },
  {
    "__docId__": 410,
    "kind": "test",
    "name": "it127",
    "testId": 127,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it127",
    "access": null,
    "description": "test: lensProp(propName) with wrong second argument",
    "lineNumber": 93,
    "testTargets": [
      "Lens#lensProp"
    ]
  },
  {
    "__docId__": 411,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it128",
    "access": null,
    "description": "test: lensProp(propName) with undefined first argument",
    "lineNumber": 98,
    "testTargets": [
      "Lens#lensProp"
    ]
  },
  {
    "__docId__": 412,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it129",
    "access": null,
    "description": "test: lensProp(propName) with undefined first argument",
    "lineNumber": 103,
    "testTargets": [
      "Lens#lensProp"
    ]
  },
  {
    "__docId__": 413,
    "kind": "test",
    "name": "it130",
    "testId": 130,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it130",
    "access": null,
    "description": "test: assoc(propName, valueToBeSet, source)",
    "lineNumber": 108,
    "testTargets": [
      "Lens#assoc"
    ]
  },
  {
    "__docId__": 414,
    "kind": "test",
    "name": "it131",
    "testId": 131,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it131",
    "access": null,
    "description": "test: assoc(propName, valueToBeSet, source) with inner object",
    "lineNumber": 117,
    "testTargets": [
      "Lens#assoc"
    ]
  },
  {
    "__docId__": 415,
    "kind": "test",
    "name": "it132",
    "testId": 132,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it132",
    "access": null,
    "description": "test: assoc(propName, valueToBeSet, source) with wrong first argument",
    "lineNumber": 127,
    "testTargets": [
      "Lens#assoc"
    ]
  },
  {
    "__docId__": 416,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it133",
    "access": null,
    "description": "test: assoc(propName, valueToBeSet, source) with wrong third argument",
    "lineNumber": 132,
    "testTargets": [
      "Lens#assoc"
    ]
  },
  {
    "__docId__": 417,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it134",
    "access": null,
    "description": "test: assoc(propName, valueToBeSet, source) with undefined first argument",
    "lineNumber": 137,
    "testTargets": [
      "Lens#assoc"
    ]
  },
  {
    "__docId__": 418,
    "kind": "test",
    "name": "it135",
    "testId": 135,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it135",
    "access": null,
    "description": "test: assoc(propName, valueToBeSet, source) with undefined third argument",
    "lineNumber": 142,
    "testTargets": [
      "Lens#assoc"
    ]
  },
  {
    "__docId__": 419,
    "kind": "test",
    "name": "it136",
    "testId": 136,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it136",
    "access": null,
    "description": "test: assocPath(path, valueToBeSet, source)",
    "lineNumber": 147,
    "testTargets": [
      "Lens#assocPath"
    ]
  },
  {
    "__docId__": 420,
    "kind": "test",
    "name": "it137",
    "testId": 137,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it137",
    "access": null,
    "description": "test: assocPath(path, valueToBeSet, source) with array",
    "lineNumber": 162,
    "testTargets": [
      "Lens#assocPath"
    ]
  },
  {
    "__docId__": 421,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it138",
    "access": null,
    "description": "test: assocPath(path, valueToBeSet, source) should not override old props",
    "lineNumber": 174,
    "testTargets": [
      "Lens#assocPath"
    ]
  },
  {
    "__docId__": 422,
    "kind": "test",
    "name": "it139",
    "testId": 139,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it139",
    "access": null,
    "description": "test: path(p, source)",
    "lineNumber": 208,
    "testTargets": [
      "Lens#path"
    ]
  },
  {
    "__docId__": 423,
    "kind": "test",
    "name": "it140",
    "testId": 140,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it140",
    "access": null,
    "description": "test: pathEq(path, source, value)",
    "lineNumber": 216,
    "testTargets": [
      "Lens#pathEq"
    ]
  },
  {
    "__docId__": 424,
    "kind": "test",
    "name": "it141",
    "testId": 141,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it141",
    "access": null,
    "description": "test: pathOr(path, source, orValue)",
    "lineNumber": 225,
    "testTargets": [
      "Lens#pathOr"
    ]
  },
  {
    "__docId__": 425,
    "kind": "test",
    "name": "it142",
    "testId": 142,
    "memberof": "specs/lens.spec.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "specs/lens.spec.js~describe112.it142",
    "access": null,
    "description": "test: pathSatisfies(path, source, satisfyFn)",
    "lineNumber": 232,
    "testTargets": [
      "Lens#pathSatisfies"
    ]
  },
  {
    "__docId__": 426,
    "kind": "testFile",
    "name": "specs/math.spec.js",
    "content": "import { assert, expect } from 'chai';\n\nimport * as MthLib from '../src/Math';\n\n\n/** @test {Math} */\ndescribe('Math Library Tests', () => {\n\n  /** @test {Math#compareDecimalNumbers} */\n  it('test: .compareDecimalNumbers(number1, number2)', () => {\n    var a = 0.1 + 0.2\n      , b = 0.3;\n\n    assert.notEqual(a, b);\n    assert.isTrue(MthLib.compareDecimalNumbers(a, b));\n  });\n\n  /** @test {Math#add} */\n  it('test: .add(augend, ...addendList)', () => {\n    assert.equal(MthLib.add(), 0);\n    assert.equal(MthLib.add(1,2), 3);\n    assert.equal(MthLib.add(1,2,3,4), 10);\n    assert.equal(MthLib.add(1,2,3,4,5), 15);\n  });\n\n  /** @test {Math#subtract} */\n  it('test: .subtract(minuend, ...subtrahendList)', () => {\n    assert.equal(MthLib.subtract(), 0);\n    assert.equal(MthLib.subtract(2,1), 1);\n    assert.equal(MthLib.subtract(1,2,3,4), -8);\n    assert.equal(MthLib.subtract(5,1,1,1,1), 1);\n  });\n\n  /** @test {Math#multiply} */\n  it('test: .multiply(multiplier, ...multiplicandList)', () => {\n    assert.equal(MthLib.multiply(), 0);\n    assert.equal(MthLib.multiply(1,2), 2);\n    assert.equal(MthLib.multiply(1,2,3,4), 24);\n    assert.equal(MthLib.multiply(1,2,3,4,5), 120);\n  });\n\n  /** @test {Math#divide} */\n  it('test: .divide(dividend, ...divisorList)', () => {\n    assert.equal(MthLib.divide(), 0);\n    assert.equal(MthLib.divide(4,2), 2);\n    assert.equal(MthLib.divide(16,4,2), 2);\n    assert.equal(MthLib.divide(32,2,4,2), 2);\n  });\n\n  /** @test {Math#getRandomInt} */\n  it('test: .getRandomInt(number)', () => {\n    expect(MthLib.getRandomInt(5)).to.be.within(0, 5);\n    expect(MthLib.getRandomInt(15)).to.be.within(0, 15);\n    expect(MthLib.getRandomInt(30)).to.be.within(0, 30);\n  });\n\n  /** @test {Math#getRandomIntFromTo} */\n  it('test: .getRandomIntFromTo(number1, number2)', () => {\n    expect(MthLib.getRandomIntFromTo(10,15)).to.be.within(10, 15);\n    expect(MthLib.getRandomIntFromTo(50,75)).to.be.within(50, 75);\n    expect(MthLib.getRandomIntFromTo(100,200)).to.be.within(100, 200);\n  });\n});\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/specs/math.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 427,
    "kind": "test",
    "name": "describe143",
    "testId": 143,
    "memberof": "specs/math.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "specs/math.spec.js~describe143",
    "access": null,
    "description": "Math Library Tests",
    "lineNumber": 7,
    "testTargets": [
      "Math"
    ]
  },
  {
    "__docId__": 428,
    "kind": "test",
    "name": "it144",
    "testId": 144,
    "memberof": "specs/math.spec.js~describe143",
    "testDepth": 1,
    "static": true,
    "longname": "specs/math.spec.js~describe143.it144",
    "access": null,
    "description": "test: .compareDecimalNumbers(number1, number2)",
    "lineNumber": 10,
    "testTargets": [
      "Math#compareDecimalNumbers"
    ]
  },
  {
    "__docId__": 429,
    "kind": "test",
    "name": "it145",
    "testId": 145,
    "memberof": "specs/math.spec.js~describe143",
    "testDepth": 1,
    "static": true,
    "longname": "specs/math.spec.js~describe143.it145",
    "access": null,
    "description": "test: .add(augend, ...addendList)",
    "lineNumber": 19,
    "testTargets": [
      "Math#add"
    ]
  },
  {
    "__docId__": 430,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "specs/math.spec.js~describe143",
    "testDepth": 1,
    "static": true,
    "longname": "specs/math.spec.js~describe143.it146",
    "access": null,
    "description": "test: .subtract(minuend, ...subtrahendList)",
    "lineNumber": 27,
    "testTargets": [
      "Math#subtract"
    ]
  },
  {
    "__docId__": 431,
    "kind": "test",
    "name": "it147",
    "testId": 147,
    "memberof": "specs/math.spec.js~describe143",
    "testDepth": 1,
    "static": true,
    "longname": "specs/math.spec.js~describe143.it147",
    "access": null,
    "description": "test: .multiply(multiplier, ...multiplicandList)",
    "lineNumber": 35,
    "testTargets": [
      "Math#multiply"
    ]
  },
  {
    "__docId__": 432,
    "kind": "test",
    "name": "it148",
    "testId": 148,
    "memberof": "specs/math.spec.js~describe143",
    "testDepth": 1,
    "static": true,
    "longname": "specs/math.spec.js~describe143.it148",
    "access": null,
    "description": "test: .divide(dividend, ...divisorList)",
    "lineNumber": 43,
    "testTargets": [
      "Math#divide"
    ]
  },
  {
    "__docId__": 433,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "specs/math.spec.js~describe143",
    "testDepth": 1,
    "static": true,
    "longname": "specs/math.spec.js~describe143.it149",
    "access": null,
    "description": "test: .getRandomInt(number)",
    "lineNumber": 51,
    "testTargets": [
      "Math#getRandomInt"
    ]
  },
  {
    "__docId__": 434,
    "kind": "test",
    "name": "it150",
    "testId": 150,
    "memberof": "specs/math.spec.js~describe143",
    "testDepth": 1,
    "static": true,
    "longname": "specs/math.spec.js~describe143.it150",
    "access": null,
    "description": "test: .getRandomIntFromTo(number1, number2)",
    "lineNumber": 58,
    "testTargets": [
      "Math#getRandomIntFromTo"
    ]
  },
  {
    "__docId__": 435,
    "kind": "testFile",
    "name": "specs/object.spec.js",
    "content": "import chai, { assert, expect } from 'chai';\n\nimport * as ObjLib from '../src/Object';\n\n\n/** @test {Object} */\ndescribe('Object Library Tests', () => {\n\n    /** @test {Object#deepFreeze} */\n    it('test: .deepFreeze(obj)', () => {\n      let obj = {\n        internal: {\n          b: 'Hello'\n        }\n      };\n\n      ObjLib.deepFreeze(obj);\n\n      expect(() => {\n        obj.internal.a = 'some value';\n      }).to.throw(chai.TypeError, /Cannot add property a, object is not extensible/);\n\n      expect(() => {\n        obj.internal.b = 'Hi';\n      }).to.throw(chai.TypeError, /Cannot assign to read only property \\'b\\' of object \\'#<Object>\\'/);\n\n    });\n\n    /** @test {Object#cloneObject} */\n    it('test: .cloneObject(objectToClone)', () => {\n      let obj = {}\n        , obj2 = obj;\n\n      assert.equal(obj, obj2);\n      assert.notEqual(obj, ObjLib.cloneObject(obj));\n    });\n\n    /** @test {Object#deepClone} */\n    it('test: .deepClone(objectToDeepClone)', () => {\n      let obj = { a: { b: { c: [ { name: 'Oleh' } ] } } };\n\n      let copy = ObjLib.deepClone(obj);\n      assert.equal(obj.a.b.c[0].name, copy.a.b.c[0].name);\n      assert.notEqual(obj.a.b, copy.a.b);\n      assert.notEqual(obj.a.b.c, copy.a.b.c);\n      assert.deepEqual(obj, copy);\n\n      copy.a.b.c[0].name = 'Updated Name';\n      assert.notEqual(obj.a.b.c[0].name, 'Updated Name');\n      assert.equal(obj.a.b.c[0].name, 'Oleh');\n\n\n    });\n\n    /** @test {Object#pick} */\n    it('test: .pick(source, ...pickArray)', () => {\n      let user = {\n        name: 'Oleh',\n        age: 29,\n        profession: 'dev'\n      };\n\n      expect(ObjLib.pick(user, 'name', 'age')).to.deep.equal({name: 'Oleh', age: 29});\n    });\n\n    /** @test {Object#omit} */\n    it('test: .omit(source, ...omitArray)', () => {\n      let user = {\n        name: 'Oleh',\n        age: 29,\n        profession: 'dev'\n      };\n\n      expect(ObjLib.omit(user, 'name', 'age')).to.deep.equal({profession: 'dev'});\n    });\n\n    /** @test {Object#safeGet} */\n    it('test: .safeGet(obj, ...props)', () => {\n      let user1 = {name: 'Oleh', address: {zip: 123}}\n        , user2 = {name: 'Oleh'};\n\n      assert.equal(ObjLib.safeGet(user1, 'address', 'zip'), 123);\n      assert.isUndefined(ObjLib.safeGet(user2, 'address', 'zip'));\n    });\n\n    /** @test {Object#safeGetOr} */\n    it('test: .safeGetOr(obj, orValue, ...props)', () => {\n      let user1 = {name: 'Oleh', address: {zip: 123}};\n\n      assert.equal(ObjLib.safeGetOr(user1, 'no zip available', 'address', 'zip'), 123);\n      assert.equal(ObjLib.safeGetOr(user1, 'no zip available', 'address', 'zip', 'previous'), 'no zip available');\n    });\n\n    /** @test {Object#safeGet} */\n    it('test: .safeGet(obj, ...props) with array', () => {\n      let array =\n        [\n          [ [ 23, 1 ] ],\n          [1],\n          { name: ['John', 'Liza'] }\n        ];\n      assert.equal(ObjLib.safeGet(array, 0, 0, 0), 23);\n      assert.equal(ObjLib.safeGet(array, 2, 'name', 1), 'Liza');\n      assert.isUndefined(ObjLib.safeGet(array, 3, 1));\n    });\n\n    /** @test {Object#safeGetOr} */\n    it('test: .safeGetOr(obj, orValue, ...props) with array', () => {\n      let array =\n        [\n          [ [ 23, 1 ] ],\n          [1],\n          { name: ['John', 'Liza'] }\n        ];\n      assert.equal(ObjLib.safeGetOr(array, 'no value', 0, 0, 0), 23);\n      assert.equal(ObjLib.safeGetOr(array, 'no value', 0, 0, 0, 10), 'no value');\n    });\n\n    /** @test {Object#getWithProps} */\n    it('test: .getWithProps(obj, ...props)', () => {\n      let user1 = {name: 'Oleh', address: {zip: 123}}\n        , user2 = {name: 'Oleh'}\n        , getZip = ObjLib.getWithProps('address', 'zip');\n\n      assert.equal(getZip(user1), 123);\n      assert.isUndefined(getZip(user2));\n    });\n\n    /** @test {Object#getWithCtx} */\n    it('test: .getWithCtx(obj, ...props)', () => {\n      let user1 = {name: 'Oleh', address: {zip: 123}}\n        , user2 = {name: 'Oleh'}\n        , getFromUser1 = ObjLib.getWithCtx(user1)\n        , getFromUser2 = ObjLib.getWithCtx(user2);\n\n      assert.equal(getFromUser1('address', 'zip'), 123);\n      assert.isUndefined(getFromUser2('address', 'zip'));\n    });\n\n    /** @test {Object#objectProjection} */\n    it('test: .objectProjection(obj, cb, skipCb = (...args) => args) ', () => {\n      assert.deepEqual(\n        ObjLib.objectProjection({a: 3, b: 7, c: () => {}}, (k, v) => `${k}=${v}`),\n        ['a=3', 'b=7', 'c=function c() {}']);\n\n      assert.deepEqual(\n        ObjLib.objectProjection({a: 3, b: 7, c: () => {}}, (k, v) => `${k}=${v}`, (k, v) => typeof v !== 'function'),\n        [ 'a=3', 'b=7' ]);\n    });\n\n    /** @test {Object#conformsTo} */\n    it('test: conformsTo(object, predicateSetModel)', () => {\n      let given = { b: 1, a: 'Hello' }\n        , actual1 = ObjLib.conformsTo(given, { b: n => n === 1, a: n => n === 'Hello' })\n        , actual2 = ObjLib.conformsTo(given, { b: n => n === 1, a: n => n === 'NOT-Hello' });\n\n      assert.isTrue(actual1);\n      assert.isFalse(actual2);\n    });\n\n    /** @test {Object@deepEquals} */\n    it('deepEquals(first, second)', () => {\n      assert.isTrue(ObjLib.deepEquals(\n        [\n          { id: 1, firstName: 'Jon', lastName: 'Snow', gender: 'm', age: 14, location: 'Winterfell' },\n          { id: 2, firstName: 'Eddard', lastName: 'Stark', gender: 'm', age: 35, location: 'Winterfell' },\n          { id: 3, firstName: 'Catelyn', lastName: 'Stark', gender: 'f', age: 33, location: 'Winterfell' },\n          { id: 4, firstName: 'Roose', lastName: 'Bolton', gender: 'm', age: 40, location: 'Dreadfort' },\n          { id: 5, firstName: 'Ramsay', lastName: 'Snow', gender: 'm', age: 15, location: 'Dreadfort' }\n        ],\n        [\n          { id: 1, firstName: 'Jon', lastName: 'Snow', gender: 'm', age: 14, location: 'Winterfell' },\n          { id: 2, firstName: 'Eddard', lastName: 'Stark', gender: 'm', age: 35, location: 'Winterfell' },\n          { id: 3, firstName: 'Catelyn', lastName: 'Stark', gender: 'f', age: 33, location: 'Winterfell' },\n          { id: 4, firstName: 'Roose', lastName: 'Bolton', gender: 'm', age: 40, location: 'Dreadfort' },\n          { id: 5, firstName: 'Ramsay', lastName: 'Snow', gender: 'm', age: 15, location: 'Dreadfort' }\n        ]\n      ));\n\n      assert.isFalse(ObjLib.deepEquals(\n        [\n          { id: 1, firstName: 'Jon', lastName: 'Snow', gender: 'm', age: 14, location: 'Winterfell' },\n          { id: 2, firstName: 'Eddard', lastName: 'Stark', gender: 'm', age: 35, location: 'Winterfell' },\n          { id: 3, firstName: 'Catelyn', lastName: 'Stark', gender: 'f', age: 33, location: 'Winterfell' },\n          { id: 4, firstName: 'Roose', lastName: 'Bolton', gender: 'm', age: 40, location: 'Dreadfort' },\n          { id: 5, firstName: 'Ramsay', lastName: 'Snow', gender: 'm', age: 15, location: 'Dreadfort' }\n        ],\n        [\n          { id: 1, firstName: 'Jon', lastName: 'Snow', gender: 'm', age: 14, location: 'Winterfell' },\n          { id: 2, firstName: 'Eddard', lastName: 'Stark', gender: 'm', age: 35, location: 'Winterfell' },\n          { id: 3, firstName: 'Catelyn', lastName: 'Stark', gender: 'f', age: 33, location: 'Winterfell' },\n          { id: 4, firstName: 'Roose', lastName: 'Bolton', gender: 'm', age: 40, location: 'Dreadfort' },\n          { id: 5, firstName: 'Ramsay. Not same here!', lastName: 'Snow', gender: 'm', age: 15, location: 'Dreadfort' }\n        ]\n      ));\n    });\n});\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/specs/object.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 436,
    "kind": "test",
    "name": "describe151",
    "testId": 151,
    "memberof": "specs/object.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "specs/object.spec.js~describe151",
    "access": null,
    "description": "Object Library Tests",
    "lineNumber": 7,
    "testTargets": [
      "Object"
    ]
  },
  {
    "__docId__": 437,
    "kind": "test",
    "name": "it152",
    "testId": 152,
    "memberof": "specs/object.spec.js~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "specs/object.spec.js~describe151.it152",
    "access": null,
    "description": "test: .deepFreeze(obj)",
    "lineNumber": 10,
    "testTargets": [
      "Object#deepFreeze"
    ]
  },
  {
    "__docId__": 438,
    "kind": "test",
    "name": "it153",
    "testId": 153,
    "memberof": "specs/object.spec.js~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "specs/object.spec.js~describe151.it153",
    "access": null,
    "description": "test: .cloneObject(objectToClone)",
    "lineNumber": 30,
    "testTargets": [
      "Object#cloneObject"
    ]
  },
  {
    "__docId__": 439,
    "kind": "test",
    "name": "it154",
    "testId": 154,
    "memberof": "specs/object.spec.js~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "specs/object.spec.js~describe151.it154",
    "access": null,
    "description": "test: .deepClone(objectToDeepClone)",
    "lineNumber": 39,
    "testTargets": [
      "Object#deepClone"
    ]
  },
  {
    "__docId__": 440,
    "kind": "test",
    "name": "it155",
    "testId": 155,
    "memberof": "specs/object.spec.js~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "specs/object.spec.js~describe151.it155",
    "access": null,
    "description": "test: .pick(source, ...pickArray)",
    "lineNumber": 56,
    "testTargets": [
      "Object#pick"
    ]
  },
  {
    "__docId__": 441,
    "kind": "test",
    "name": "it156",
    "testId": 156,
    "memberof": "specs/object.spec.js~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "specs/object.spec.js~describe151.it156",
    "access": null,
    "description": "test: .omit(source, ...omitArray)",
    "lineNumber": 67,
    "testTargets": [
      "Object#omit"
    ]
  },
  {
    "__docId__": 442,
    "kind": "test",
    "name": "it157",
    "testId": 157,
    "memberof": "specs/object.spec.js~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "specs/object.spec.js~describe151.it157",
    "access": null,
    "description": "test: .safeGet(obj, ...props)",
    "lineNumber": 78,
    "testTargets": [
      "Object#safeGet"
    ]
  },
  {
    "__docId__": 443,
    "kind": "test",
    "name": "it158",
    "testId": 158,
    "memberof": "specs/object.spec.js~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "specs/object.spec.js~describe151.it158",
    "access": null,
    "description": "test: .safeGetOr(obj, orValue, ...props)",
    "lineNumber": 87,
    "testTargets": [
      "Object#safeGetOr"
    ]
  },
  {
    "__docId__": 444,
    "kind": "test",
    "name": "it159",
    "testId": 159,
    "memberof": "specs/object.spec.js~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "specs/object.spec.js~describe151.it159",
    "access": null,
    "description": "test: .safeGet(obj, ...props) with array",
    "lineNumber": 95,
    "testTargets": [
      "Object#safeGet"
    ]
  },
  {
    "__docId__": 445,
    "kind": "test",
    "name": "it160",
    "testId": 160,
    "memberof": "specs/object.spec.js~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "specs/object.spec.js~describe151.it160",
    "access": null,
    "description": "test: .safeGetOr(obj, orValue, ...props) with array",
    "lineNumber": 108,
    "testTargets": [
      "Object#safeGetOr"
    ]
  },
  {
    "__docId__": 446,
    "kind": "test",
    "name": "it161",
    "testId": 161,
    "memberof": "specs/object.spec.js~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "specs/object.spec.js~describe151.it161",
    "access": null,
    "description": "test: .getWithProps(obj, ...props)",
    "lineNumber": 120,
    "testTargets": [
      "Object#getWithProps"
    ]
  },
  {
    "__docId__": 447,
    "kind": "test",
    "name": "it162",
    "testId": 162,
    "memberof": "specs/object.spec.js~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "specs/object.spec.js~describe151.it162",
    "access": null,
    "description": "test: .getWithCtx(obj, ...props)",
    "lineNumber": 130,
    "testTargets": [
      "Object#getWithCtx"
    ]
  },
  {
    "__docId__": 448,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "specs/object.spec.js~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "specs/object.spec.js~describe151.it163",
    "access": null,
    "description": "test: .objectProjection(obj, cb, skipCb = (...args) => args) ",
    "lineNumber": 141,
    "testTargets": [
      "Object#objectProjection"
    ]
  },
  {
    "__docId__": 449,
    "kind": "test",
    "name": "it164",
    "testId": 164,
    "memberof": "specs/object.spec.js~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "specs/object.spec.js~describe151.it164",
    "access": null,
    "description": "test: conformsTo(object, predicateSetModel)",
    "lineNumber": 152,
    "testTargets": [
      "Object#conformsTo"
    ]
  },
  {
    "__docId__": 450,
    "kind": "test",
    "name": "it165",
    "testId": 165,
    "memberof": "specs/object.spec.js~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "specs/object.spec.js~describe151.it165",
    "access": null,
    "description": "deepEquals(first, second)",
    "lineNumber": 162,
    "testTargets": [
      "*"
    ]
  },
  {
    "__docId__": 451,
    "kind": "testFile",
    "name": "specs/predicate-combinator.spec.js",
    "content": "import { assert, expect } from 'chai';\n\nimport { or, and, not, notOr } from '../src/Predicate-Combinator';\n\n\n/** @test {Predicate-Combinator} */\ndescribe('Predicate Combinator Library Tests', () => {\n\n  /** @test {Predicate-Combinator#or} */\n  it('test: .or(...predicates) - with number', () => {\n    const negative = number => number < 0\n        , positive = number => number > 0\n        , notZero = or(negative, positive);\n\n    assert.isFalse(notZero(0));\n    assert.isTrue(notZero(-3));\n    assert.isTrue(notZero(3));\n  });\n\n  /** @test {Predicate-Combinator#or} */\n  it('test: .or(...predicates) - with array', () => {\n    const data = [1,4,0,1,2,0]\n        , negative = number => number < 0\n        , positive = number => number > 0\n        , notZero = or(negative, positive);\n\n    expect(data.filter(notZero)).to.deep.equal([1,4,1,2]);\n    assert.isTrue(data.some(notZero));\n    assert.isFalse(data.every(notZero));\n  });\n\n  /** @test {Predicate-Combinator#not} */\n  it('test: .not(...predicates) - with number', () => {\n    const negative = number => number < 0\n        , positive = number => number > 0\n        , isZero = not(negative, positive);\n\n    assert.isTrue(isZero(0));\n    assert.isFalse(isZero(-3));\n    assert.isFalse(isZero(3));\n  });\n\n  /** @test {Predicate-Combinator#not} */\n  it('test: .not(...predicates) - with array', () => {\n    const data = [1,4,0,1,2,0]\n        , negative = number => number < 0\n        , positive = number => number > 0\n        , isZero = not(negative, positive);\n\n    expect(data.filter(isZero)).to.deep.equal([0,0]);\n    assert.isTrue(data.some(isZero));\n    assert.isFalse(data.every(isZero));\n  });\n\n  /** @test {Predicate-Combinator#and} */\n  it('test: .and(...predicates) - with string', () => {\n    const isGreeting = str => str.indexOf('Hello') > -1\n        , hasWorld = str => str.indexOf('World') > -1\n        , isHelloWorld = and(isGreeting, hasWorld);\n\n    assert.isTrue(isHelloWorld('Hello World'));\n    assert.isFalse(isHelloWorld('Hello'));\n    assert.isFalse(isHelloWorld('World'));\n    assert.isFalse(isHelloWorld('Not a Greeting'));\n  });\n\n  /** @test {Predicate-Combinator#and} */\n  it('test: .and(...predicates) - with array', () => {\n    const data = ['Hello', 'World', 'Hello World', 'Not Greeting']\n        , isGreeting = str => str.indexOf('Hello') > -1\n        , hasWorld = str => str.indexOf('World') > -1\n        , isHelloWorld = and(isGreeting, hasWorld);\n\n\n    expect(data.filter(isHelloWorld)).to.deep.equal(['Hello World']);\n    assert.isTrue(data.some(isHelloWorld));\n    assert.isFalse(data.every(isHelloWorld));\n  });\n\n  /** @test {Predicate-Combinator#notOr} */\n  it('test: .notOr(...predicates)', () => {\n    const isGreeting = str => str.indexOf('Hello') > -1\n        , hasWorld = str => str.indexOf('World') > -1;\n\n    assert.isFalse(notOr(isGreeting, hasWorld)('Hello'));\n    assert.isFalse(notOr(isGreeting, hasWorld)('World'));\n    assert.isTrue(notOr(isGreeting, hasWorld)('Else'));\n  });\n});\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/specs/predicate-combinator.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 452,
    "kind": "test",
    "name": "describe166",
    "testId": 166,
    "memberof": "specs/predicate-combinator.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "specs/predicate-combinator.spec.js~describe166",
    "access": null,
    "description": "Predicate Combinator Library Tests",
    "lineNumber": 7,
    "testTargets": [
      "Predicate-Combinator"
    ]
  },
  {
    "__docId__": 453,
    "kind": "test",
    "name": "it167",
    "testId": 167,
    "memberof": "specs/predicate-combinator.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "specs/predicate-combinator.spec.js~describe166.it167",
    "access": null,
    "description": "test: .or(...predicates) - with number",
    "lineNumber": 10,
    "testTargets": [
      "Predicate-Combinator#or"
    ]
  },
  {
    "__docId__": 454,
    "kind": "test",
    "name": "it168",
    "testId": 168,
    "memberof": "specs/predicate-combinator.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "specs/predicate-combinator.spec.js~describe166.it168",
    "access": null,
    "description": "test: .or(...predicates) - with array",
    "lineNumber": 21,
    "testTargets": [
      "Predicate-Combinator#or"
    ]
  },
  {
    "__docId__": 455,
    "kind": "test",
    "name": "it169",
    "testId": 169,
    "memberof": "specs/predicate-combinator.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "specs/predicate-combinator.spec.js~describe166.it169",
    "access": null,
    "description": "test: .not(...predicates) - with number",
    "lineNumber": 33,
    "testTargets": [
      "Predicate-Combinator#not"
    ]
  },
  {
    "__docId__": 456,
    "kind": "test",
    "name": "it170",
    "testId": 170,
    "memberof": "specs/predicate-combinator.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "specs/predicate-combinator.spec.js~describe166.it170",
    "access": null,
    "description": "test: .not(...predicates) - with array",
    "lineNumber": 44,
    "testTargets": [
      "Predicate-Combinator#not"
    ]
  },
  {
    "__docId__": 457,
    "kind": "test",
    "name": "it171",
    "testId": 171,
    "memberof": "specs/predicate-combinator.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "specs/predicate-combinator.spec.js~describe166.it171",
    "access": null,
    "description": "test: .and(...predicates) - with string",
    "lineNumber": 56,
    "testTargets": [
      "Predicate-Combinator#and"
    ]
  },
  {
    "__docId__": 458,
    "kind": "test",
    "name": "it172",
    "testId": 172,
    "memberof": "specs/predicate-combinator.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "specs/predicate-combinator.spec.js~describe166.it172",
    "access": null,
    "description": "test: .and(...predicates) - with array",
    "lineNumber": 68,
    "testTargets": [
      "Predicate-Combinator#and"
    ]
  },
  {
    "__docId__": 459,
    "kind": "test",
    "name": "it173",
    "testId": 173,
    "memberof": "specs/predicate-combinator.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "specs/predicate-combinator.spec.js~describe166.it173",
    "access": null,
    "description": "test: .notOr(...predicates)",
    "lineNumber": 81,
    "testTargets": [
      "Predicate-Combinator#notOr"
    ]
  },
  {
    "__docId__": 460,
    "kind": "testFile",
    "name": "specs/predicate.spec.js",
    "content": "import { assert } from 'chai';\n\nimport * as PcLib from '../src/Predicate-Combinator';\nimport * as PrdLib from '../src/Predicate';\n\n/** @test {Predicate} */\ndescribe('Predicate Library Tests', () => {\n\n  /** @test {Predicate#lt} */\n  it('test: .lt(number)', () => {\n    let lessThen100 = PrdLib.lt(100)\n      , truthlyResult = [1,2,37]\n      , falsyResult = [101, 100, 303];\n\n    assert.isTrue(truthlyResult.every(lessThen100));\n    assert.isFalse(falsyResult.every(lessThen100));\n  });\n\n  /** @test {Predicate#gt} */\n  it('test: .gt(number)', () => {\n    let greaterThan100 = PrdLib.gt(100)\n      , falsyResult = [1,2,37]\n      , truthlyResult = [101,200,303];\n\n    assert.isTrue(truthlyResult.every(greaterThan100));\n    assert.isFalse(falsyResult.every(greaterThan100));\n  });\n\n  /** @test {Predicate#range} */\n  it('test: .range(number1, number2)', () => {\n    let inRangeOf1and100 = PrdLib.range(1, 100)\n      , truthlyResult = [2,3]\n      , falsyResult = [101,200];\n\n      assert.isTrue(truthlyResult.every(inRangeOf1and100));\n      assert.isFalse(falsyResult.every(inRangeOf1and100));\n  });\n\n  /** @test {Predicate#lte} */\n  it('test: .lte(number)', () => {\n    let lessThen100Including = PrdLib.lte(100)\n      , truthlyResult = [1, 2, 100]\n      , falsyResult = [99, 100, 101];\n\n    assert.isTrue(truthlyResult.every(lessThen100Including));\n    assert.isFalse(falsyResult.every(lessThen100Including));\n  });\n\n  /** @test {Predicate#gte} */\n  it('test: .gte(number)', () => {\n    let greaterThan100Including = PrdLib.gte(100)\n      , falsyResult = [1,2,37]\n      , truthlyResult = [100,101,200,303];\n\n    assert.isTrue(truthlyResult.every(greaterThan100Including));\n    assert.isFalse(falsyResult.every(greaterThan100Including));\n  });\n\n  /** @test {Predicate#rangeEqual} */\n  it('test: .rangeEqual(number1, number2)', () => {\n    let inRangeOf1and100Including = PrdLib.rangeEqual(1, 100)\n      , truthlyResult = [1,100]\n      , falsyResult = [101,200];\n\n      assert.isTrue(truthlyResult.every(inRangeOf1and100Including));\n      assert.isFalse(falsyResult.every(inRangeOf1and100Including));\n  });\n\n  /** @test {Predicate#lte} */\n  it('test: .lt(number) combined with gt(number)', () => {\n    let inRangeOf = PcLib.or(\n      PrdLib.lt(-20),\n      PcLib.and(PrdLib.gt(5), PrdLib.lt(10)));\n\n    assert.isTrue(inRangeOf(7));\n    assert.isTrue(inRangeOf(-40));\n    assert.isFalse(inRangeOf(-6));\n    assert.isFalse(inRangeOf(11));\n  });\n\n  /** @test {Predicate#eq} */\n  it('test: .eq(elem1)', () => {\n    assert.isTrue(PrdLib.eq(1)(1));\n    assert.isFalse(PrdLib.eq(1)(2));\n    assert.isTrue(PrdLib.eq('hello')('hello'));\n    assert.isFalse(PrdLib.eq('hello')('hello2'));\n    assert.isFalse(PrdLib.eq({ greeting: 'hello' })({ greeting: 'hello' }));\n  });\n\n  /** @test {Predicate#notEq} */\n  it('test: .notEq(elem1)', () => {\n    assert.isFalse(PrdLib.notEq(1)(1));\n    assert.isTrue(PrdLib.notEq(1)(2));\n    assert.isFalse(PrdLib.notEq('hello')('hello'));\n    assert.isTrue(PrdLib.notEq('hello')('hello2'));\n    assert.isTrue(PrdLib.notEq({ greeting: 'hello' })({ greeting: 'hello' }));\n  });\n});\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/specs/predicate.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 461,
    "kind": "test",
    "name": "describe174",
    "testId": 174,
    "memberof": "specs/predicate.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "specs/predicate.spec.js~describe174",
    "access": null,
    "description": "Predicate Library Tests",
    "lineNumber": 7,
    "testTargets": [
      "Predicate"
    ]
  },
  {
    "__docId__": 462,
    "kind": "test",
    "name": "it175",
    "testId": 175,
    "memberof": "specs/predicate.spec.js~describe174",
    "testDepth": 1,
    "static": true,
    "longname": "specs/predicate.spec.js~describe174.it175",
    "access": null,
    "description": "test: .lt(number)",
    "lineNumber": 10,
    "testTargets": [
      "Predicate#lt"
    ]
  },
  {
    "__docId__": 463,
    "kind": "test",
    "name": "it176",
    "testId": 176,
    "memberof": "specs/predicate.spec.js~describe174",
    "testDepth": 1,
    "static": true,
    "longname": "specs/predicate.spec.js~describe174.it176",
    "access": null,
    "description": "test: .gt(number)",
    "lineNumber": 20,
    "testTargets": [
      "Predicate#gt"
    ]
  },
  {
    "__docId__": 464,
    "kind": "test",
    "name": "it177",
    "testId": 177,
    "memberof": "specs/predicate.spec.js~describe174",
    "testDepth": 1,
    "static": true,
    "longname": "specs/predicate.spec.js~describe174.it177",
    "access": null,
    "description": "test: .range(number1, number2)",
    "lineNumber": 30,
    "testTargets": [
      "Predicate#range"
    ]
  },
  {
    "__docId__": 465,
    "kind": "test",
    "name": "it178",
    "testId": 178,
    "memberof": "specs/predicate.spec.js~describe174",
    "testDepth": 1,
    "static": true,
    "longname": "specs/predicate.spec.js~describe174.it178",
    "access": null,
    "description": "test: .lte(number)",
    "lineNumber": 40,
    "testTargets": [
      "Predicate#lte"
    ]
  },
  {
    "__docId__": 466,
    "kind": "test",
    "name": "it179",
    "testId": 179,
    "memberof": "specs/predicate.spec.js~describe174",
    "testDepth": 1,
    "static": true,
    "longname": "specs/predicate.spec.js~describe174.it179",
    "access": null,
    "description": "test: .gte(number)",
    "lineNumber": 50,
    "testTargets": [
      "Predicate#gte"
    ]
  },
  {
    "__docId__": 467,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "specs/predicate.spec.js~describe174",
    "testDepth": 1,
    "static": true,
    "longname": "specs/predicate.spec.js~describe174.it180",
    "access": null,
    "description": "test: .rangeEqual(number1, number2)",
    "lineNumber": 60,
    "testTargets": [
      "Predicate#rangeEqual"
    ]
  },
  {
    "__docId__": 468,
    "kind": "test",
    "name": "it181",
    "testId": 181,
    "memberof": "specs/predicate.spec.js~describe174",
    "testDepth": 1,
    "static": true,
    "longname": "specs/predicate.spec.js~describe174.it181",
    "access": null,
    "description": "test: .lt(number) combined with gt(number)",
    "lineNumber": 70,
    "testTargets": [
      "Predicate#lte"
    ]
  },
  {
    "__docId__": 469,
    "kind": "test",
    "name": "it182",
    "testId": 182,
    "memberof": "specs/predicate.spec.js~describe174",
    "testDepth": 1,
    "static": true,
    "longname": "specs/predicate.spec.js~describe174.it182",
    "access": null,
    "description": "test: .eq(elem1)",
    "lineNumber": 82,
    "testTargets": [
      "Predicate#eq"
    ]
  },
  {
    "__docId__": 470,
    "kind": "test",
    "name": "it183",
    "testId": 183,
    "memberof": "specs/predicate.spec.js~describe174",
    "testDepth": 1,
    "static": true,
    "longname": "specs/predicate.spec.js~describe174.it183",
    "access": null,
    "description": "test: .notEq(elem1)",
    "lineNumber": 91,
    "testTargets": [
      "Predicate#notEq"
    ]
  },
  {
    "__docId__": 471,
    "kind": "testFile",
    "name": "specs/string.spec.js",
    "content": "import { assert, expect } from 'chai';\n\nimport * as StrLib from '../src/String';\n\n\n/** @test {String} */\ndescribe('String Library Tests', () => {\n\n    /** @test {String#buildResource} */\n    it('test: .buildResource(src, ...args)', () => {\n      assert.equal(StrLib.buildResource('Hello{0}World{1}All{2}', '$', '%', '@'), 'Hello$World%All@');\n      assert.equal(StrLib.buildResource(undefined, '$', '%', '@'), '');\n      assert.equal(StrLib.buildResource(), '');\n    });\n\n    /** @test {String#replaceAll} */\n    it('test: .replaceAll(replaceable, from, to)', () => {\n      assert.equal(StrLib.replaceAll('Hello$ World$', '$', '!'), 'Hello! World!');\n      assert.equal(StrLib.replaceAll('Hello World', '$', '!'), 'Hello World');\n    });\n\n    /** @test {String#replaceAllDifferences} */\n    it('test: .replaceAllDifferences(replaceable, fromList, to)', () => {\n      assert.equal(StrLib.replaceAllDifferences('#Hello$ World%', ['#', '$', '%'], ''), 'Hello World');\n      assert.equal(StrLib.replaceAllDifferences('Hello World', ['#', '$', '%'], ''), 'Hello World');\n    });\n\n    /** @test {String#includes} */\n    it('test: .includes(source, includement)', () => {\n      assert.isTrue(StrLib.includes('Hello World', 'Hello'));\n      assert.isFalse(StrLib.includes('Hello World', 'Hi'));\n    });\n\n    /** @test {String#trim} */\n    it('test: .trim(strSource)', () => {\n      assert.equal(StrLib.trim('  Hello World     '), 'Hello World');\n      assert.equal(StrLib.trim('Hello World    '), 'Hello World');\n      assert.equal(StrLib.trim('  Hello World'), 'Hello World');\n    });\n\n    /** @test {String#equalsIgnoreCase} */\n    it('test: .equalsIgnoreCase(str1, str2)', () => {\n      assert.isTrue(StrLib.equalsIgnoreCase('hello world', 'HELLO WORLD'));\n      assert.isTrue(StrLib.equalsIgnoreCase('hello world', 'Hello World'));\n    });\n\n    /** @test {String#upperFirst} */\n    it('test: .upperFirst(str = \"\")', () => {\n      assert.equal(StrLib.upperFirst('oleh'), 'Oleh');\n      assert.equal(StrLib.upperFirst('OLEH'), 'OLEH');\n    });\n\n    /** @test {String#getFirstUpperLetter} */\n    it('test: .getFirstUpperLetter(strValue)', () => {\n      assert.equal(StrLib.getFirstUpperLetter('a2rAB'), 'A');\n    });\n\n    /** @test {String#getLastUpperLetter} */\n    it('test: .getLastUpperLetter(strValue)', () => {\n      assert.equal(StrLib.getLastUpperLetter('a2rAB'), 'B');\n    });\n\n    /** @test {String#getFirstLowerLetter} */\n    it('test: .getFirstLowerLetter(strValue)', () => {\n      assert.equal(StrLib.getFirstLowerLetter('a2rAB'), 'a');\n    });\n\n    /** @test {String#getFirstLowerLetter} */\n    it('test: .getLastLowerLetter(strValue)', () => {\n      assert.equal(StrLib.getLastLowerLetter('a2rAB'), 'r');\n    });\n\n    /** @test {String#words} */\n    it('test: .words(strValue)', () => {\n      expect(StrLib.words('Foo  Bar')).to.deep.equal(['Foo', 'Bar']);\n      expect(StrLib.words('fooBar')).to.deep.equal(['foo', 'Bar']);\n      expect(StrLib.words('__FOO_BAR__')).to.deep.equal(['FOO', 'BAR']);\n    });\n\n    /** @test {String#snakeCase} */\n    it('test: .snakeCase(str)', () => {\n      assert.equal(StrLib.snakeCase('Foo  Bar'), 'foo_bar');\n      assert.equal(StrLib.snakeCase('fooBar'), 'foo_bar');\n      assert.equal(StrLib.snakeCase('__FOO_BAR__'), 'foo_bar');\n    });\n\n    /** @test {String#kebabCase} */\n    it('test: .kebabCase(str) ', () => {\n      assert.equal(StrLib.kebabCase('Foo  Bar'), 'foo-bar');\n      assert.equal(StrLib.kebabCase('fooBar'), 'foo-bar');\n      assert.equal(StrLib.kebabCase('__FOO_BAR__'), 'foo-bar');\n    });\n\n    /** @test {String#camelCase} */\n    it('test: .camelCase(str)', () => {\n      assert.equal(StrLib.camelCase('Foo  Bar'), 'fooBar');\n      assert.equal(StrLib.camelCase('fooBar'), 'fooBar');\n      assert.equal(StrLib.camelCase('__FOO_BAR__'), 'fooBar');\n    });\n});\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/specs/string.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 472,
    "kind": "test",
    "name": "describe184",
    "testId": 184,
    "memberof": "specs/string.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "specs/string.spec.js~describe184",
    "access": null,
    "description": "String Library Tests",
    "lineNumber": 7,
    "testTargets": [
      "String"
    ]
  },
  {
    "__docId__": 473,
    "kind": "test",
    "name": "it185",
    "testId": 185,
    "memberof": "specs/string.spec.js~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "specs/string.spec.js~describe184.it185",
    "access": null,
    "description": "test: .buildResource(src, ...args)",
    "lineNumber": 10,
    "testTargets": [
      "String#buildResource"
    ]
  },
  {
    "__docId__": 474,
    "kind": "test",
    "name": "it186",
    "testId": 186,
    "memberof": "specs/string.spec.js~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "specs/string.spec.js~describe184.it186",
    "access": null,
    "description": "test: .replaceAll(replaceable, from, to)",
    "lineNumber": 17,
    "testTargets": [
      "String#replaceAll"
    ]
  },
  {
    "__docId__": 475,
    "kind": "test",
    "name": "it187",
    "testId": 187,
    "memberof": "specs/string.spec.js~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "specs/string.spec.js~describe184.it187",
    "access": null,
    "description": "test: .replaceAllDifferences(replaceable, fromList, to)",
    "lineNumber": 23,
    "testTargets": [
      "String#replaceAllDifferences"
    ]
  },
  {
    "__docId__": 476,
    "kind": "test",
    "name": "it188",
    "testId": 188,
    "memberof": "specs/string.spec.js~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "specs/string.spec.js~describe184.it188",
    "access": null,
    "description": "test: .includes(source, includement)",
    "lineNumber": 29,
    "testTargets": [
      "String#includes"
    ]
  },
  {
    "__docId__": 477,
    "kind": "test",
    "name": "it189",
    "testId": 189,
    "memberof": "specs/string.spec.js~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "specs/string.spec.js~describe184.it189",
    "access": null,
    "description": "test: .trim(strSource)",
    "lineNumber": 35,
    "testTargets": [
      "String#trim"
    ]
  },
  {
    "__docId__": 478,
    "kind": "test",
    "name": "it190",
    "testId": 190,
    "memberof": "specs/string.spec.js~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "specs/string.spec.js~describe184.it190",
    "access": null,
    "description": "test: .equalsIgnoreCase(str1, str2)",
    "lineNumber": 42,
    "testTargets": [
      "String#equalsIgnoreCase"
    ]
  },
  {
    "__docId__": 479,
    "kind": "test",
    "name": "it191",
    "testId": 191,
    "memberof": "specs/string.spec.js~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "specs/string.spec.js~describe184.it191",
    "access": null,
    "description": "test: .upperFirst(str = \"\")",
    "lineNumber": 48,
    "testTargets": [
      "String#upperFirst"
    ]
  },
  {
    "__docId__": 480,
    "kind": "test",
    "name": "it192",
    "testId": 192,
    "memberof": "specs/string.spec.js~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "specs/string.spec.js~describe184.it192",
    "access": null,
    "description": "test: .getFirstUpperLetter(strValue)",
    "lineNumber": 54,
    "testTargets": [
      "String#getFirstUpperLetter"
    ]
  },
  {
    "__docId__": 481,
    "kind": "test",
    "name": "it193",
    "testId": 193,
    "memberof": "specs/string.spec.js~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "specs/string.spec.js~describe184.it193",
    "access": null,
    "description": "test: .getLastUpperLetter(strValue)",
    "lineNumber": 59,
    "testTargets": [
      "String#getLastUpperLetter"
    ]
  },
  {
    "__docId__": 482,
    "kind": "test",
    "name": "it194",
    "testId": 194,
    "memberof": "specs/string.spec.js~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "specs/string.spec.js~describe184.it194",
    "access": null,
    "description": "test: .getFirstLowerLetter(strValue)",
    "lineNumber": 64,
    "testTargets": [
      "String#getFirstLowerLetter"
    ]
  },
  {
    "__docId__": 483,
    "kind": "test",
    "name": "it195",
    "testId": 195,
    "memberof": "specs/string.spec.js~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "specs/string.spec.js~describe184.it195",
    "access": null,
    "description": "test: .getLastLowerLetter(strValue)",
    "lineNumber": 69,
    "testTargets": [
      "String#getFirstLowerLetter"
    ]
  },
  {
    "__docId__": 484,
    "kind": "test",
    "name": "it196",
    "testId": 196,
    "memberof": "specs/string.spec.js~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "specs/string.spec.js~describe184.it196",
    "access": null,
    "description": "test: .words(strValue)",
    "lineNumber": 74,
    "testTargets": [
      "String#words"
    ]
  },
  {
    "__docId__": 485,
    "kind": "test",
    "name": "it197",
    "testId": 197,
    "memberof": "specs/string.spec.js~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "specs/string.spec.js~describe184.it197",
    "access": null,
    "description": "test: .snakeCase(str)",
    "lineNumber": 81,
    "testTargets": [
      "String#snakeCase"
    ]
  },
  {
    "__docId__": 486,
    "kind": "test",
    "name": "it198",
    "testId": 198,
    "memberof": "specs/string.spec.js~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "specs/string.spec.js~describe184.it198",
    "access": null,
    "description": "test: .kebabCase(str) ",
    "lineNumber": 88,
    "testTargets": [
      "String#kebabCase"
    ]
  },
  {
    "__docId__": 487,
    "kind": "test",
    "name": "it199",
    "testId": 199,
    "memberof": "specs/string.spec.js~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "specs/string.spec.js~describe184.it199",
    "access": null,
    "description": "test: .camelCase(str)",
    "lineNumber": 95,
    "testTargets": [
      "String#camelCase"
    ]
  },
  {
    "__docId__": 488,
    "kind": "testFile",
    "name": "specs/type.spec.js",
    "content": "import * as chai from 'chai';\nimport { assert, expect } from 'chai';\n\nimport * as TypeLib from '../src/Type';\nimport * as TypeConstants from '../src/Constants/types';\n\n\n/** @test {Type} */\ndescribe('Type Library Tests', () => {\n\n  /** @test {Type#isNull} */\n  it('test: .isNull(value)', () => {\n    assert.isTrue(TypeLib.isNull(null));\n\n    assert.isFalse(TypeLib.isNull(undefined));\n    assert.isFalse(TypeLib.isNull(0));\n    assert.isFalse(TypeLib.isNull(-0));\n    assert.isFalse(TypeLib.isNull(''));\n    assert.isFalse(TypeLib.isNull(false));\n    assert.isFalse(TypeLib.isNull({}));\n    assert.isFalse(TypeLib.isNull([]));\n    assert.isFalse(TypeLib.isNull(NaN));\n    assert.isFalse(TypeLib.isNull(Infinity));\n    assert.isFalse(TypeLib.isNull(-Infinity));\n    assert.isFalse(TypeLib.isNull(Symbol('test:')));\n    assert.isFalse(TypeLib.isNull(Function.prototype));\n  });\n\n  /** @test {Type#isNotNull} */\n  it('test: .isNotNull(value)', () => {\n    assert.isFalse(TypeLib.isNotNull(null));\n\n    assert.isTrue(TypeLib.isNotNull(undefined));\n    assert.isTrue(TypeLib.isNotNull(0));\n    assert.isTrue(TypeLib.isNotNull(-0));\n    assert.isTrue(TypeLib.isNotNull(''));\n    assert.isTrue(TypeLib.isNotNull(false));\n    assert.isTrue(TypeLib.isNotNull({}));\n    assert.isTrue(TypeLib.isNotNull([]));\n    assert.isTrue(TypeLib.isNotNull(NaN));\n    assert.isTrue(TypeLib.isNotNull(Infinity));\n    assert.isTrue(TypeLib.isNotNull(-Infinity));\n    assert.isTrue(TypeLib.isNotNull(Symbol('test:')));\n    assert.isTrue(TypeLib.isNotNull(Function.prototype));\n  });\n\n  /** @test {Type#isNaN} */\n  it('test: .isNaN(number)', () => {\n    assert.isTrue(TypeLib.isNaN(NaN));\n\n    assert.isFalse(TypeLib.isNaN(null));\n    assert.isFalse(TypeLib.isNaN(undefined));\n    assert.isFalse(TypeLib.isNaN(0));\n    assert.isFalse(TypeLib.isNaN(-0));\n    assert.isFalse(TypeLib.isNaN(''));\n    assert.isFalse(TypeLib.isNaN(false));\n    assert.isFalse(TypeLib.isNaN({}));\n    assert.isFalse(TypeLib.isNaN([]));\n    assert.isFalse(TypeLib.isNaN(Infinity));\n    assert.isFalse(TypeLib.isNaN(-Infinity));\n    assert.isFalse(TypeLib.isNaN(Symbol('test:')));\n    assert.isFalse(TypeLib.isNaN(Function.prototype));\n  });\n\n  /** @test {Type#isNotNaN} */\n  it('test: .isNotNaN(number)', () => {\n    assert.isFalse(TypeLib.isNotNaN(NaN));\n\n    assert.isTrue(TypeLib.isNotNaN(null));\n    assert.isTrue(TypeLib.isNotNaN(undefined));\n    assert.isTrue(TypeLib.isNotNaN(0));\n    assert.isTrue(TypeLib.isNotNaN(-0));\n    assert.isTrue(TypeLib.isNotNaN(''));\n    assert.isTrue(TypeLib.isNotNaN(false));\n    assert.isTrue(TypeLib.isNotNaN({}));\n    assert.isTrue(TypeLib.isNotNaN([]));\n    assert.isTrue(TypeLib.isNotNaN(Infinity));\n    assert.isTrue(TypeLib.isNotNaN(-Infinity));\n    assert.isTrue(TypeLib.isNotNaN(Symbol('test:')));\n    assert.isTrue(TypeLib.isNotNaN(Function.prototype));\n  });\n\n  /** @test {Type#isNegativeZero} */\n  it('test: .isNegativeZero(number)', () => {\n    assert.isTrue(TypeLib.isNegativeZero(-0));\n\n    assert.isFalse(TypeLib.isNegativeZero(0));\n    assert.isFalse(TypeLib.isNegativeZero(7));\n    assert.isFalse(TypeLib.isNegativeZero(-7));\n    assert.isFalse(TypeLib.isNegativeZero(NaN));\n    assert.isFalse(TypeLib.isNegativeZero(Infinity));\n    assert.isFalse(TypeLib.isNegativeZero(-Infinity));\n  });\n\n  /** @test {Type#isNotNegativeZero} */\n  it('test: .isNotNegativeZero(number)', () => {\n    assert.isFalse(TypeLib.isNotNegativeZero(-0));\n\n    assert.isTrue(TypeLib.isNotNegativeZero(0));\n    assert.isTrue(TypeLib.isNotNegativeZero(7));\n    assert.isTrue(TypeLib.isNotNegativeZero(-7));\n    assert.isTrue(TypeLib.isNotNegativeZero(NaN));\n    assert.isTrue(TypeLib.isNotNegativeZero(Infinity));\n    assert.isTrue(TypeLib.isNotNegativeZero(-Infinity));\n  });\n\n  /** @test {Type#isArray} */\n  it('test: .isArray(value)', () => {\n    assert.isTrue(TypeLib.isArray([]));\n\n    assert.isFalse(TypeLib.isArray(null));\n    assert.isFalse(TypeLib.isArray(undefined));\n    assert.isFalse(TypeLib.isArray(0));\n    assert.isFalse(TypeLib.isArray(-0));\n    assert.isFalse(TypeLib.isArray(''));\n    assert.isFalse(TypeLib.isArray(false));\n    assert.isFalse(TypeLib.isArray({}));\n    assert.isFalse(TypeLib.isArray(NaN));\n    assert.isFalse(TypeLib.isArray(Infinity));\n    assert.isFalse(TypeLib.isArray(-Infinity));\n    assert.isFalse(TypeLib.isArray(Symbol('test:')));\n    assert.isFalse(TypeLib.isArray(Function.prototype));\n  });\n\n  /** @test {Type#isNotArray} */\n  it('test: .isNotArray(value)', () => {\n    assert.isFalse(TypeLib.isNotArray([]));\n\n    assert.isTrue(TypeLib.isNotArray(null));\n    assert.isTrue(TypeLib.isNotArray(undefined));\n    assert.isTrue(TypeLib.isNotArray(0));\n    assert.isTrue(TypeLib.isNotArray(-0));\n    assert.isTrue(TypeLib.isNotArray(''));\n    assert.isTrue(TypeLib.isNotArray(false));\n    assert.isTrue(TypeLib.isNotArray({}));\n    assert.isTrue(TypeLib.isNotArray(NaN));\n    assert.isTrue(TypeLib.isNotArray(Infinity));\n    assert.isTrue(TypeLib.isNotArray(-Infinity));\n    assert.isTrue(TypeLib.isNotArray(Symbol('test:')));\n    assert.isTrue(TypeLib.isNotArray(Function.prototype));\n  });\n\n  /** @test {Type#isNumber} */\n  it('test: .isNumber(value)', () => {\n    assert.isTrue(TypeLib.isNumber(0));\n    assert.isTrue(TypeLib.isNumber(-0));\n    assert.isTrue(TypeLib.isNumber(NaN));\n    assert.isTrue(TypeLib.isNumber(Infinity));\n    assert.isTrue(TypeLib.isNumber(-Infinity));\n\n    assert.isFalse(TypeLib.isNumber([]));\n    assert.isFalse(TypeLib.isNumber(null));\n    assert.isFalse(TypeLib.isNumber(undefined));\n    assert.isFalse(TypeLib.isNumber(''));\n    assert.isFalse(TypeLib.isNumber(false));\n    assert.isFalse(TypeLib.isNumber({}));\n    assert.isFalse(TypeLib.isNumber(Symbol('test:')));\n    assert.isFalse(TypeLib.isNumber(Function.prototype));\n  });\n\n  /** @test {Type#isNotNumber} */\n  it('test: .isNotNumber(value)', () => {\n    assert.isFalse(TypeLib.isNotNumber(0));\n    assert.isFalse(TypeLib.isNotNumber(-0));\n    assert.isFalse(TypeLib.isNotNumber(NaN));\n    assert.isFalse(TypeLib.isNotNumber(Infinity));\n    assert.isFalse(TypeLib.isNotNumber(-Infinity));\n\n    assert.isTrue(TypeLib.isNotNumber([]));\n    assert.isTrue(TypeLib.isNotNumber(null));\n    assert.isTrue(TypeLib.isNotNumber(undefined));\n    assert.isTrue(TypeLib.isNotNumber(''));\n    assert.isTrue(TypeLib.isNotNumber(false));\n    assert.isTrue(TypeLib.isNotNumber({}));\n    assert.isTrue(TypeLib.isNotNumber(Symbol('test:')));\n    assert.isTrue(TypeLib.isNotNumber(Function.prototype));\n  });\n\n  /** @test {Type#isUndefined} */\n  it('test: .isUndefined(value)', () => {\n    assert.isTrue(TypeLib.isUndefined(undefined));\n\n    assert.isFalse(TypeLib.isUndefined(0));\n    assert.isFalse(TypeLib.isUndefined(-0));\n    assert.isFalse(TypeLib.isUndefined(NaN));\n    assert.isFalse(TypeLib.isUndefined(Infinity));\n    assert.isFalse(TypeLib.isUndefined(-Infinity));\n    assert.isFalse(TypeLib.isUndefined([]));\n    assert.isFalse(TypeLib.isUndefined(null));\n    assert.isFalse(TypeLib.isUndefined(''));\n    assert.isFalse(TypeLib.isUndefined(false));\n    assert.isFalse(TypeLib.isUndefined(/[\\[\\]']+/g));\n    assert.isFalse(TypeLib.isUndefined({}));\n    assert.isFalse(TypeLib.isUndefined(Symbol('test:')));\n    assert.isFalse(TypeLib.isUndefined(Function.prototype));\n  });\n\n  /** @test {Type#isNotUndefined} */\n  it('test: .isNotUndefined(value)', () => {\n    assert.isFalse(TypeLib.isNotUndefined(undefined));\n\n    assert.isTrue(TypeLib.isNotUndefined(0));\n    assert.isTrue(TypeLib.isNotUndefined(-0));\n    assert.isTrue(TypeLib.isNotUndefined(NaN));\n    assert.isTrue(TypeLib.isNotUndefined(Infinity));\n    assert.isTrue(TypeLib.isNotUndefined(-Infinity));\n    assert.isTrue(TypeLib.isNotUndefined([]));\n    assert.isTrue(TypeLib.isNotUndefined(null));\n    assert.isTrue(TypeLib.isNotUndefined(''));\n    assert.isTrue(TypeLib.isNotUndefined(false));\n    assert.isTrue(TypeLib.isNotUndefined(/[\\[\\]']+/g));\n    assert.isTrue(TypeLib.isNotUndefined({}));\n    assert.isTrue(TypeLib.isNotUndefined(Symbol('test:')));\n    assert.isTrue(TypeLib.isNotUndefined(Function.prototype));\n  });\n\n  /** @test {Type#isDate} */\n  it('test: .isDate(value)', () => {\n    assert.isTrue(TypeLib.isDate(new Date()));\n\n    assert.isFalse(TypeLib.isDate(undefined));\n    assert.isFalse(TypeLib.isDate(0));\n    assert.isFalse(TypeLib.isDate(-0));\n    assert.isFalse(TypeLib.isDate(NaN));\n    assert.isFalse(TypeLib.isDate(Infinity));\n    assert.isFalse(TypeLib.isDate(-Infinity));\n    assert.isFalse(TypeLib.isDate([]));\n    assert.isFalse(TypeLib.isDate(null));\n    assert.isFalse(TypeLib.isDate(''));\n    assert.isFalse(TypeLib.isDate(false));\n    assert.isFalse(TypeLib.isDate(/[\\[\\]']+/g));\n    assert.isFalse(TypeLib.isDate({}));\n    assert.isFalse(TypeLib.isDate(Symbol('test:')));\n    assert.isFalse(TypeLib.isDate(Function.prototype));\n  });\n\n  /** @test {Type#isNotDate} */\n  it('test: .isNotDate(value)', () => {\n    assert.isFalse(TypeLib.isNotDate(new Date()));\n\n    assert.isTrue(TypeLib.isNotDate(undefined));\n    assert.isTrue(TypeLib.isNotDate(0));\n    assert.isTrue(TypeLib.isNotDate(-0));\n    assert.isTrue(TypeLib.isNotDate(NaN));\n    assert.isTrue(TypeLib.isNotDate(Infinity));\n    assert.isTrue(TypeLib.isNotDate(-Infinity));\n    assert.isTrue(TypeLib.isNotDate([]));\n    assert.isTrue(TypeLib.isNotDate(null));\n    assert.isTrue(TypeLib.isNotDate(''));\n    assert.isTrue(TypeLib.isNotDate(false));\n    assert.isTrue(TypeLib.isNotDate(/[\\[\\]']+/g));\n    assert.isTrue(TypeLib.isNotDate({}));\n    assert.isTrue(TypeLib.isNotDate(Symbol('test:')));\n    assert.isTrue(TypeLib.isNotDate(Function.prototype));\n  });\n\n  /** @test {Type#isObject} */\n  it('test: .isObject(value)', () => {\n    assert.isTrue(TypeLib.isObject({}));\n    assert.isTrue(TypeLib.isObject(new Object()));\n\n    assert.isFalse(TypeLib.isObject(new Date()));\n    assert.isFalse(TypeLib.isObject(undefined));\n    assert.isFalse(TypeLib.isObject(0));\n    assert.isFalse(TypeLib.isObject(-0));\n    assert.isFalse(TypeLib.isObject(NaN));\n    assert.isFalse(TypeLib.isObject(Infinity));\n    assert.isFalse(TypeLib.isObject(-Infinity));\n    assert.isFalse(TypeLib.isObject([]));\n    assert.isFalse(TypeLib.isObject(null));\n    assert.isFalse(TypeLib.isObject(''));\n    assert.isFalse(TypeLib.isObject(false));\n    assert.isFalse(TypeLib.isObject(/[\\[\\]']+/g));\n    assert.isFalse(TypeLib.isObject(Symbol('test:')));\n    assert.isFalse(TypeLib.isObject(Function.prototype));\n  });\n\n  /** @test {Type#isNotObject} */\n  it('test: .isNotObject(value)', () => {\n    assert.isFalse(TypeLib.isNotObject({}));\n    assert.isFalse(TypeLib.isNotObject(new Object()));\n\n    assert.isTrue(TypeLib.isNotObject(new Date()));\n    assert.isTrue(TypeLib.isNotObject(undefined));\n    assert.isTrue(TypeLib.isNotObject(0));\n    assert.isTrue(TypeLib.isNotObject(-0));\n    assert.isTrue(TypeLib.isNotObject(NaN));\n    assert.isTrue(TypeLib.isNotObject(Infinity));\n    assert.isTrue(TypeLib.isNotObject(-Infinity));\n    assert.isTrue(TypeLib.isNotObject([]));\n    assert.isTrue(TypeLib.isNotObject(null));\n    assert.isTrue(TypeLib.isNotObject(''));\n    assert.isTrue(TypeLib.isNotObject(false));\n    assert.isTrue(TypeLib.isNotObject(/[\\[\\]']+/g));\n    assert.isTrue(TypeLib.isNotObject(Symbol('test:')));\n    assert.isTrue(TypeLib.isNotObject(Function.prototype));\n  });\n\n  /** @test {Type#isBoolean} */\n  it('test: .isBoolean(value)', () => {\n    assert.isTrue(TypeLib.isBoolean(false));\n    assert.isTrue(TypeLib.isBoolean(new Boolean(false)));\n\n    assert.isFalse(TypeLib.isBoolean({}));\n    assert.isFalse(TypeLib.isBoolean(new Object()));\n    assert.isFalse(TypeLib.isBoolean(new Date()));\n    assert.isFalse(TypeLib.isBoolean(undefined));\n    assert.isFalse(TypeLib.isBoolean(0));\n    assert.isFalse(TypeLib.isBoolean(-0));\n    assert.isFalse(TypeLib.isBoolean(NaN));\n    assert.isFalse(TypeLib.isBoolean(Infinity));\n    assert.isFalse(TypeLib.isBoolean(-Infinity));\n    assert.isFalse(TypeLib.isBoolean([]));\n    assert.isFalse(TypeLib.isBoolean(null));\n    assert.isFalse(TypeLib.isBoolean(''));\n    assert.isFalse(TypeLib.isBoolean(/[\\[\\]']+/g));\n    assert.isFalse(TypeLib.isBoolean(Symbol('test:')));\n    assert.isFalse(TypeLib.isBoolean(Function.prototype));\n  });\n\n  /** @test {Type#isNotBoolean} */\n  it('test: .isNotBoolean(value)', () => {\n    assert.isFalse(TypeLib.isNotBoolean(false));\n    assert.isFalse(TypeLib.isNotBoolean(new Boolean(false)));\n\n    assert.isTrue(TypeLib.isNotBoolean({}));\n    assert.isTrue(TypeLib.isNotBoolean(new Object()));\n    assert.isTrue(TypeLib.isNotBoolean(new Date()));\n    assert.isTrue(TypeLib.isNotBoolean(undefined));\n    assert.isTrue(TypeLib.isNotBoolean(0));\n    assert.isTrue(TypeLib.isNotBoolean(-0));\n    assert.isTrue(TypeLib.isNotBoolean(NaN));\n    assert.isTrue(TypeLib.isNotBoolean(Infinity));\n    assert.isTrue(TypeLib.isNotBoolean(-Infinity));\n    assert.isTrue(TypeLib.isNotBoolean([]));\n    assert.isTrue(TypeLib.isNotBoolean(null));\n    assert.isTrue(TypeLib.isNotBoolean(''));\n    assert.isTrue(TypeLib.isNotBoolean(/[\\[\\]']+/g));\n    assert.isTrue(TypeLib.isNotBoolean(Symbol('test:')));\n    assert.isTrue(TypeLib.isNotBoolean(Function.prototype));\n  });\n\n  /** @test {Type#isSymbol} */\n  it('test: .isSymbol(value)', () => {\n    assert.isTrue(TypeLib.isSymbol(Symbol('test:')));\n\n    assert.isFalse(TypeLib.isSymbol(false));\n    assert.isFalse(TypeLib.isSymbol(new Boolean(false)));\n    assert.isFalse(TypeLib.isSymbol({}));\n    assert.isFalse(TypeLib.isSymbol(new Object()));\n    assert.isFalse(TypeLib.isSymbol(new Date()));\n    assert.isFalse(TypeLib.isSymbol(undefined));\n    assert.isFalse(TypeLib.isSymbol(0));\n    assert.isFalse(TypeLib.isSymbol(-0));\n    assert.isFalse(TypeLib.isSymbol(NaN));\n    assert.isFalse(TypeLib.isSymbol(Infinity));\n    assert.isFalse(TypeLib.isSymbol(-Infinity));\n    assert.isFalse(TypeLib.isSymbol([]));\n    assert.isFalse(TypeLib.isSymbol(null));\n    assert.isFalse(TypeLib.isSymbol(''));\n    assert.isFalse(TypeLib.isSymbol(/[\\[\\]']+/g));\n    assert.isFalse(TypeLib.isSymbol(Function.prototype));\n  });\n\n  /** @test {Type#isNotSymbol} */\n  it('test: .isNotSymbol(value)', () => {\n    assert.isFalse(TypeLib.isNotSymbol(Symbol('test:')));\n\n    assert.isTrue(TypeLib.isNotSymbol(false));\n    assert.isTrue(TypeLib.isNotSymbol(new Boolean(false)));\n    assert.isTrue(TypeLib.isNotSymbol({}));\n    assert.isTrue(TypeLib.isNotSymbol(new Object()));\n    assert.isTrue(TypeLib.isNotSymbol(new Date()));\n    assert.isTrue(TypeLib.isNotSymbol(undefined));\n    assert.isTrue(TypeLib.isNotSymbol(0));\n    assert.isTrue(TypeLib.isNotSymbol(-0));\n    assert.isTrue(TypeLib.isNotSymbol(NaN));\n    assert.isTrue(TypeLib.isNotSymbol(Infinity));\n    assert.isTrue(TypeLib.isNotSymbol(-Infinity));\n    assert.isTrue(TypeLib.isNotSymbol([]));\n    assert.isTrue(TypeLib.isNotSymbol(null));\n    assert.isTrue(TypeLib.isNotSymbol(''));\n    assert.isTrue(TypeLib.isNotSymbol(/[\\[\\]']+/g));\n    assert.isTrue(TypeLib.isNotSymbol(Function.prototype));\n  });\n\n  /** @test {Type#isString} */\n  it('test: .isString(value)', () => {\n    assert.isTrue(TypeLib.isString(''));\n    assert.isTrue(TypeLib.isString(new String()));\n\n    assert.isFalse(TypeLib.isString(false));\n    assert.isFalse(TypeLib.isString(new Boolean(false)));\n    assert.isFalse(TypeLib.isString({}));\n    assert.isFalse(TypeLib.isString(new Object()));\n    assert.isFalse(TypeLib.isString(new Date()));\n    assert.isFalse(TypeLib.isString(undefined));\n    assert.isFalse(TypeLib.isString(0));\n    assert.isFalse(TypeLib.isString(-0));\n    assert.isFalse(TypeLib.isString(NaN));\n    assert.isFalse(TypeLib.isString(Infinity));\n    assert.isFalse(TypeLib.isString(-Infinity));\n    assert.isFalse(TypeLib.isString([]));\n    assert.isFalse(TypeLib.isString(null));\n    assert.isFalse(TypeLib.isString(/[\\[\\]']+/g));\n    assert.isFalse(TypeLib.isString(Symbol('test:')));\n    assert.isFalse(TypeLib.isString(Function.prototype));\n  });\n\n  /** @test {Type#isNotString} */\n  it('test: .isNotString(value)', () => {\n    assert.isFalse(TypeLib.isNotString(''));\n    assert.isFalse(TypeLib.isNotString(new String()));\n\n    assert.isTrue(TypeLib.isNotString(false));\n    assert.isTrue(TypeLib.isNotString(new Boolean(false)));\n    assert.isTrue(TypeLib.isNotString({}));\n    assert.isTrue(TypeLib.isNotString(new Object()));\n    assert.isTrue(TypeLib.isNotString(new Date()));\n    assert.isTrue(TypeLib.isNotString(undefined));\n    assert.isTrue(TypeLib.isNotString(0));\n    assert.isTrue(TypeLib.isNotString(-0));\n    assert.isTrue(TypeLib.isNotString(NaN));\n    assert.isTrue(TypeLib.isNotString(Infinity));\n    assert.isTrue(TypeLib.isNotString(-Infinity));\n    assert.isTrue(TypeLib.isNotString([]));\n    assert.isTrue(TypeLib.isNotString(null));\n    assert.isTrue(TypeLib.isNotString(/[\\[\\]']+/g));\n    assert.isTrue(TypeLib.isNotString(Symbol('test:')));\n    assert.isTrue(TypeLib.isNotString(Function.prototype));\n  });\n\n  /** @test {Type#isRegExp} */\n  it('test: .isRegExp(value)', () => {\n    assert.isTrue(TypeLib.isRegExp(/[\\[\\]']+/g));\n    assert.isTrue(TypeLib.isRegExp(new RegExp()));\n\n    assert.isFalse(TypeLib.isRegExp(undefined));\n    assert.isFalse(TypeLib.isRegExp(0));\n    assert.isFalse(TypeLib.isRegExp(-0));\n    assert.isFalse(TypeLib.isRegExp(NaN));\n    assert.isFalse(TypeLib.isRegExp(Infinity));\n    assert.isFalse(TypeLib.isRegExp(-Infinity));\n    assert.isFalse(TypeLib.isRegExp([]));\n    assert.isFalse(TypeLib.isRegExp(null));\n    assert.isFalse(TypeLib.isRegExp(''));\n    assert.isFalse(TypeLib.isRegExp(false));\n    assert.isFalse(TypeLib.isRegExp({}));\n    assert.isFalse(TypeLib.isRegExp(Symbol('test:')));\n    assert.isFalse(TypeLib.isRegExp(Function.prototype));\n  });\n\n  /** @test {Type#isNotRegExp} */\n  it('test: .isNotRegExp(value)', () => {\n    assert.isFalse(TypeLib.isNotRegExp(/[\\[\\]']+/g));\n    assert.isFalse(TypeLib.isNotRegExp(new RegExp()));\n\n    assert.isTrue(TypeLib.isNotRegExp(undefined));\n    assert.isTrue(TypeLib.isNotRegExp(0));\n    assert.isTrue(TypeLib.isNotRegExp(-0));\n    assert.isTrue(TypeLib.isNotRegExp(NaN));\n    assert.isTrue(TypeLib.isNotRegExp(Infinity));\n    assert.isTrue(TypeLib.isNotRegExp(-Infinity));\n    assert.isTrue(TypeLib.isNotRegExp([]));\n    assert.isTrue(TypeLib.isNotRegExp(null));\n    assert.isTrue(TypeLib.isNotRegExp(''));\n    assert.isTrue(TypeLib.isNotRegExp(false));\n    assert.isTrue(TypeLib.isNotRegExp({}));\n    assert.isTrue(TypeLib.isNotRegExp(Symbol('test:')));\n    assert.isTrue(TypeLib.isNotRegExp(Function.prototype));\n  });\n\n  /** @test {Type#isFunction} */\n  it('test: .isFunction(value)', () => {\n    assert.isTrue(TypeLib.isFunction(Function.prototype));\n    assert.isTrue(TypeLib.isFunction(() => { }));\n\n    assert.isFalse(TypeLib.isFunction(/[\\[\\]']+/g));\n    assert.isFalse(TypeLib.isFunction(new RegExp()));\n    assert.isFalse(TypeLib.isFunction(undefined));\n    assert.isFalse(TypeLib.isFunction(0));\n    assert.isFalse(TypeLib.isFunction(-0));\n    assert.isFalse(TypeLib.isFunction(NaN));\n    assert.isFalse(TypeLib.isFunction(Infinity));\n    assert.isFalse(TypeLib.isFunction(-Infinity));\n    assert.isFalse(TypeLib.isFunction([]));\n    assert.isFalse(TypeLib.isFunction(null));\n    assert.isFalse(TypeLib.isFunction(''));\n    assert.isFalse(TypeLib.isFunction(false));\n    assert.isFalse(TypeLib.isFunction({}));\n    assert.isFalse(TypeLib.isFunction(Symbol('test:')));\n  });\n\n  /** @test {Type#isNotFunction} */\n  it('test: .isNotFunction(value)', () => {\n    assert.isFalse(TypeLib.isNotFunction(Function.prototype));\n    assert.isFalse(TypeLib.isNotFunction(() => { }));\n\n    assert.isTrue(TypeLib.isNotFunction(/[\\[\\]']+/g));\n    assert.isTrue(TypeLib.isNotFunction(new RegExp()));\n    assert.isTrue(TypeLib.isNotFunction(undefined));\n    assert.isTrue(TypeLib.isNotFunction(0));\n    assert.isTrue(TypeLib.isNotFunction(-0));\n    assert.isTrue(TypeLib.isNotFunction(NaN));\n    assert.isTrue(TypeLib.isNotFunction(Infinity));\n    assert.isTrue(TypeLib.isNotFunction(-Infinity));\n    assert.isTrue(TypeLib.isNotFunction([]));\n    assert.isTrue(TypeLib.isNotFunction(null));\n    assert.isTrue(TypeLib.isNotFunction(''));\n    assert.isTrue(TypeLib.isNotFunction(false));\n    assert.isTrue(TypeLib.isNotFunction({}));\n    assert.isTrue(TypeLib.isNotFunction(Symbol('test:')));\n  });\n\n  /** @test {Type#isPrimitive} */\n  it('test: .isPrimitive(value)', () => {\n    assert.isTrue(TypeLib.isPrimitive(0));\n    assert.isTrue(TypeLib.isPrimitive(-0));\n    assert.isTrue(TypeLib.isPrimitive(null));\n    assert.isTrue(TypeLib.isPrimitive(''));\n    assert.isTrue(TypeLib.isPrimitive(false));\n    assert.isTrue(TypeLib.isPrimitive(undefined));\n    assert.isTrue(TypeLib.isPrimitive(NaN));\n    assert.isTrue(TypeLib.isPrimitive(Infinity));\n    assert.isTrue(TypeLib.isPrimitive(-Infinity));\n\n    assert.isFalse(TypeLib.isPrimitive(Function.prototype));\n    assert.isFalse(TypeLib.isPrimitive(() => { }));\n    assert.isFalse(TypeLib.isPrimitive(/[\\[\\]']+/g));\n    assert.isFalse(TypeLib.isPrimitive(new RegExp()));\n    assert.isFalse(TypeLib.isPrimitive([]));\n    assert.isFalse(TypeLib.isPrimitive({}));\n    assert.isFalse(TypeLib.isPrimitive(Symbol('test:')));\n  });\n\n  /** @test {Type#isNotPrimitive} */\n  it('test: .isNotPrimitive(value)', () => {\n    assert.isFalse(TypeLib.isNotPrimitive(0));\n    assert.isFalse(TypeLib.isNotPrimitive(-0));\n    assert.isFalse(TypeLib.isNotPrimitive(null));\n    assert.isFalse(TypeLib.isNotPrimitive(''));\n    assert.isFalse(TypeLib.isNotPrimitive(false));\n    assert.isFalse(TypeLib.isNotPrimitive(undefined));\n    assert.isFalse(TypeLib.isNotPrimitive(NaN));\n    assert.isFalse(TypeLib.isNotPrimitive(Infinity));\n    assert.isFalse(TypeLib.isNotPrimitive(-Infinity));\n\n    assert.isTrue(TypeLib.isNotPrimitive(Function.prototype));\n    assert.isTrue(TypeLib.isNotPrimitive(() => { }));\n    assert.isTrue(TypeLib.isNotPrimitive(/[\\[\\]']+/g));\n    assert.isTrue(TypeLib.isNotPrimitive(new RegExp()));\n    assert.isTrue(TypeLib.isNotPrimitive([]));\n    assert.isTrue(TypeLib.isNotPrimitive({}));\n    assert.isTrue(TypeLib.isNotPrimitive(Symbol('test:')));\n  });\n\n  /** @test {Type#getType} */\n  it('test: .getType(value)', () => {\n    assert.equal(TypeLib.getType([]), TypeConstants.ARRAY);\n    assert.equal(TypeLib.getType(new Array(1, 2, 3)), TypeConstants.ARRAY);\n\n    assert.equal(TypeLib.getType(Symbol('desc')), TypeConstants.SYMBOL);\n\n    assert.equal(TypeLib.getType(1), TypeConstants.NUMBER);\n    assert.equal(TypeLib.getType(new Number(1)), TypeConstants.NUMBER);\n    assert.equal(TypeLib.getType(NaN), TypeConstants.NUMBER);\n    assert.equal(TypeLib.getType(Infinity), TypeConstants.NUMBER);\n    assert.equal(TypeLib.getType(-Infinity), TypeConstants.NUMBER);\n\n    assert.equal(TypeLib.getType(true), TypeConstants.BOOLEAN);\n    assert.equal(TypeLib.getType(new Boolean(false)), TypeConstants.BOOLEAN);\n\n    function Person(name) {\n      this.name = name;\n    }\n    var person = new Person('Oleh');\n    assert.equal(TypeLib.getType(person), TypeConstants.OBJECT);\n    assert.equal(TypeLib.getType({}), TypeConstants.OBJECT);\n    assert.equal(TypeLib.getType(new Object()), TypeConstants.OBJECT);\n\n    assert.equal(TypeLib.getType(() => { }), TypeConstants.FUNCTION);\n\n    assert.equal(TypeLib.getType(null), TypeConstants.NULL);\n    assert.equal(TypeLib.getType(undefined), TypeConstants.UNDEFINED);\n\n    assert.equal(TypeLib.getType(new Date()), TypeConstants.DATE);\n\n    assert.equal(TypeLib.getType(/[\\[\\]']+/g), TypeConstants.REG_EXP);\n    assert.equal(TypeLib.getType(new RegExp()), TypeConstants.REG_EXP);\n  });\n\n  /** @test {Type#toBe} */\n  it('test: .toBe(expectation)', () => {\n    let isUndefined = TypeLib.toBe(undefined)\n      , isNumber3 = TypeLib.toBe(3)\n      , isNaN = TypeLib.toBe(NaN)\n\n    assert.isTrue(isUndefined(undefined));\n    assert.isFalse(isUndefined({}));\n\n    assert.isTrue(isNumber3(3));\n    assert.isFalse(isNumber3(2));\n\n    assert.isTrue(isNaN(NaN));\n    assert.isFalse(isNaN(2));\n  });\n\n\n  /** @test {Type#notToBe} */\n  it('test: .notToBe(expectation)', () => {\n    let isNotUndefined = TypeLib.notToBe(undefined)\n      , isNotNumber3 = TypeLib.notToBe(3)\n      , isNotNaN = TypeLib.notToBe(NaN)\n\n    assert.isFalse(isNotUndefined(undefined));\n    assert.isTrue(isNotUndefined({}));\n\n    assert.isFalse(isNotNumber3(3));\n    assert.isTrue(isNotNumber3(2));\n\n    assert.isFalse(isNotNaN(NaN));\n    assert.isTrue(isNotNaN(2));\n  });\n\n  /** @test {Type#getTypeByClass} */\n  it('test: .getTypeByClass(clazz)', () => {\n    assert.equal(TypeLib.getTypeByClass(String), TypeConstants.STRING);\n    assert.equal(TypeLib.getTypeByClass(RegExp), TypeConstants.REG_EXP);\n    assert.equal(TypeLib.getTypeByClass(Object), TypeConstants.OBJECT);\n    assert.equal(TypeLib.getTypeByClass(Function), TypeConstants.FUNCTION);\n    assert.equal(TypeLib.getTypeByClass(Date), TypeConstants.DATE);\n    assert.equal(TypeLib.getTypeByClass(Boolean), TypeConstants.BOOLEAN);\n    assert.equal(TypeLib.getTypeByClass(Number), TypeConstants.NUMBER);\n    assert.equal(TypeLib.getTypeByClass(Array), TypeConstants.ARRAY);\n    assert.equal(TypeLib.getTypeByClass(Symbol), TypeConstants.SYMBOL);\n\n    class Person {}\n    assert.equal(TypeLib.getTypeByClass(Person), 'person')\n  });\n\n  /** @test {Type#typeCheck} */\n  it('test .typeCheck(clazz, actualType) positive', () => {\n    assert.isString(TypeLib.typeCheck(String, ''));\n    assert.typeOf(TypeLib.typeCheck(RegExp, /ab+c/), 'regexp');\n    assert.isObject(TypeLib.typeCheck(Object, {}));\n    assert.isFunction(TypeLib.typeCheck(Function, () => {}));\n    assert.instanceOf(TypeLib.typeCheck(Date, new Date()), Date);\n    assert.isBoolean(TypeLib.typeCheck(Boolean, true));\n    assert.isNumber(TypeLib.typeCheck(Number, 333));\n    assert.isArray(TypeLib.typeCheck(Array, []));\n    assert.typeOf(TypeLib.typeCheck(Symbol, Symbol('desc')), 'symbol');\n  });\n\n  /** @test {Type#typeCheck} */\n  it('test .typeCheck(clazz, actualType) negative', () => {\n    expect(() => {\n      TypeLib.typeCheck(String, 777);\n    }).to.throw(chai.TypeError, 'Type mismatch. Expected [string] but found [number]');\n  });\n});\n",
    "static": true,
    "longname": "/Users/obaranovskyi/obaranovskyi/repositories/github/js-helpers/specs/type.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 489,
    "kind": "test",
    "name": "describe200",
    "testId": 200,
    "memberof": "specs/type.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "specs/type.spec.js~describe200",
    "access": null,
    "description": "Type Library Tests",
    "lineNumber": 9,
    "testTargets": [
      "Type"
    ]
  },
  {
    "__docId__": 490,
    "kind": "test",
    "name": "it201",
    "testId": 201,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it201",
    "access": null,
    "description": "test: .isNull(value)",
    "lineNumber": 12,
    "testTargets": [
      "Type#isNull"
    ]
  },
  {
    "__docId__": 491,
    "kind": "test",
    "name": "it202",
    "testId": 202,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it202",
    "access": null,
    "description": "test: .isNotNull(value)",
    "lineNumber": 30,
    "testTargets": [
      "Type#isNotNull"
    ]
  },
  {
    "__docId__": 492,
    "kind": "test",
    "name": "it203",
    "testId": 203,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it203",
    "access": null,
    "description": "test: .isNaN(number)",
    "lineNumber": 48,
    "testTargets": [
      "Type#isNaN"
    ]
  },
  {
    "__docId__": 493,
    "kind": "test",
    "name": "it204",
    "testId": 204,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it204",
    "access": null,
    "description": "test: .isNotNaN(number)",
    "lineNumber": 66,
    "testTargets": [
      "Type#isNotNaN"
    ]
  },
  {
    "__docId__": 494,
    "kind": "test",
    "name": "it205",
    "testId": 205,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it205",
    "access": null,
    "description": "test: .isNegativeZero(number)",
    "lineNumber": 84,
    "testTargets": [
      "Type#isNegativeZero"
    ]
  },
  {
    "__docId__": 495,
    "kind": "test",
    "name": "it206",
    "testId": 206,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it206",
    "access": null,
    "description": "test: .isNotNegativeZero(number)",
    "lineNumber": 96,
    "testTargets": [
      "Type#isNotNegativeZero"
    ]
  },
  {
    "__docId__": 496,
    "kind": "test",
    "name": "it207",
    "testId": 207,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it207",
    "access": null,
    "description": "test: .isArray(value)",
    "lineNumber": 108,
    "testTargets": [
      "Type#isArray"
    ]
  },
  {
    "__docId__": 497,
    "kind": "test",
    "name": "it208",
    "testId": 208,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it208",
    "access": null,
    "description": "test: .isNotArray(value)",
    "lineNumber": 126,
    "testTargets": [
      "Type#isNotArray"
    ]
  },
  {
    "__docId__": 498,
    "kind": "test",
    "name": "it209",
    "testId": 209,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it209",
    "access": null,
    "description": "test: .isNumber(value)",
    "lineNumber": 144,
    "testTargets": [
      "Type#isNumber"
    ]
  },
  {
    "__docId__": 499,
    "kind": "test",
    "name": "it210",
    "testId": 210,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it210",
    "access": null,
    "description": "test: .isNotNumber(value)",
    "lineNumber": 162,
    "testTargets": [
      "Type#isNotNumber"
    ]
  },
  {
    "__docId__": 500,
    "kind": "test",
    "name": "it211",
    "testId": 211,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it211",
    "access": null,
    "description": "test: .isUndefined(value)",
    "lineNumber": 180,
    "testTargets": [
      "Type#isUndefined"
    ]
  },
  {
    "__docId__": 501,
    "kind": "test",
    "name": "it212",
    "testId": 212,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it212",
    "access": null,
    "description": "test: .isNotUndefined(value)",
    "lineNumber": 199,
    "testTargets": [
      "Type#isNotUndefined"
    ]
  },
  {
    "__docId__": 502,
    "kind": "test",
    "name": "it213",
    "testId": 213,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it213",
    "access": null,
    "description": "test: .isDate(value)",
    "lineNumber": 218,
    "testTargets": [
      "Type#isDate"
    ]
  },
  {
    "__docId__": 503,
    "kind": "test",
    "name": "it214",
    "testId": 214,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it214",
    "access": null,
    "description": "test: .isNotDate(value)",
    "lineNumber": 238,
    "testTargets": [
      "Type#isNotDate"
    ]
  },
  {
    "__docId__": 504,
    "kind": "test",
    "name": "it215",
    "testId": 215,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it215",
    "access": null,
    "description": "test: .isObject(value)",
    "lineNumber": 258,
    "testTargets": [
      "Type#isObject"
    ]
  },
  {
    "__docId__": 505,
    "kind": "test",
    "name": "it216",
    "testId": 216,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it216",
    "access": null,
    "description": "test: .isNotObject(value)",
    "lineNumber": 279,
    "testTargets": [
      "Type#isNotObject"
    ]
  },
  {
    "__docId__": 506,
    "kind": "test",
    "name": "it217",
    "testId": 217,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it217",
    "access": null,
    "description": "test: .isBoolean(value)",
    "lineNumber": 300,
    "testTargets": [
      "Type#isBoolean"
    ]
  },
  {
    "__docId__": 507,
    "kind": "test",
    "name": "it218",
    "testId": 218,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it218",
    "access": null,
    "description": "test: .isNotBoolean(value)",
    "lineNumber": 322,
    "testTargets": [
      "Type#isNotBoolean"
    ]
  },
  {
    "__docId__": 508,
    "kind": "test",
    "name": "it219",
    "testId": 219,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it219",
    "access": null,
    "description": "test: .isSymbol(value)",
    "lineNumber": 344,
    "testTargets": [
      "Type#isSymbol"
    ]
  },
  {
    "__docId__": 509,
    "kind": "test",
    "name": "it220",
    "testId": 220,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it220",
    "access": null,
    "description": "test: .isNotSymbol(value)",
    "lineNumber": 366,
    "testTargets": [
      "Type#isNotSymbol"
    ]
  },
  {
    "__docId__": 510,
    "kind": "test",
    "name": "it221",
    "testId": 221,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it221",
    "access": null,
    "description": "test: .isString(value)",
    "lineNumber": 388,
    "testTargets": [
      "Type#isString"
    ]
  },
  {
    "__docId__": 511,
    "kind": "test",
    "name": "it222",
    "testId": 222,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it222",
    "access": null,
    "description": "test: .isNotString(value)",
    "lineNumber": 411,
    "testTargets": [
      "Type#isNotString"
    ]
  },
  {
    "__docId__": 512,
    "kind": "test",
    "name": "it223",
    "testId": 223,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it223",
    "access": null,
    "description": "test: .isRegExp(value)",
    "lineNumber": 434,
    "testTargets": [
      "Type#isRegExp"
    ]
  },
  {
    "__docId__": 513,
    "kind": "test",
    "name": "it224",
    "testId": 224,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it224",
    "access": null,
    "description": "test: .isNotRegExp(value)",
    "lineNumber": 454,
    "testTargets": [
      "Type#isNotRegExp"
    ]
  },
  {
    "__docId__": 514,
    "kind": "test",
    "name": "it225",
    "testId": 225,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it225",
    "access": null,
    "description": "test: .isFunction(value)",
    "lineNumber": 474,
    "testTargets": [
      "Type#isFunction"
    ]
  },
  {
    "__docId__": 515,
    "kind": "test",
    "name": "it226",
    "testId": 226,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it226",
    "access": null,
    "description": "test: .isNotFunction(value)",
    "lineNumber": 495,
    "testTargets": [
      "Type#isNotFunction"
    ]
  },
  {
    "__docId__": 516,
    "kind": "test",
    "name": "it227",
    "testId": 227,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it227",
    "access": null,
    "description": "test: .isPrimitive(value)",
    "lineNumber": 516,
    "testTargets": [
      "Type#isPrimitive"
    ]
  },
  {
    "__docId__": 517,
    "kind": "test",
    "name": "it228",
    "testId": 228,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it228",
    "access": null,
    "description": "test: .isNotPrimitive(value)",
    "lineNumber": 537,
    "testTargets": [
      "Type#isNotPrimitive"
    ]
  },
  {
    "__docId__": 518,
    "kind": "test",
    "name": "it229",
    "testId": 229,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it229",
    "access": null,
    "description": "test: .getType(value)",
    "lineNumber": 558,
    "testTargets": [
      "Type#getType"
    ]
  },
  {
    "__docId__": 519,
    "kind": "test",
    "name": "it230",
    "testId": 230,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it230",
    "access": null,
    "description": "test: .toBe(expectation)",
    "lineNumber": 593,
    "testTargets": [
      "Type#toBe"
    ]
  },
  {
    "__docId__": 520,
    "kind": "test",
    "name": "it231",
    "testId": 231,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it231",
    "access": null,
    "description": "test: .notToBe(expectation)",
    "lineNumber": 610,
    "testTargets": [
      "Type#notToBe"
    ]
  },
  {
    "__docId__": 521,
    "kind": "test",
    "name": "it232",
    "testId": 232,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it232",
    "access": null,
    "description": "test: .getTypeByClass(clazz)",
    "lineNumber": 626,
    "testTargets": [
      "Type#getTypeByClass"
    ]
  },
  {
    "__docId__": 522,
    "kind": "test",
    "name": "it233",
    "testId": 233,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it233",
    "access": null,
    "description": "test .typeCheck(clazz, actualType) positive",
    "lineNumber": 642,
    "testTargets": [
      "Type#typeCheck"
    ]
  },
  {
    "__docId__": 523,
    "kind": "test",
    "name": "it234",
    "testId": 234,
    "memberof": "specs/type.spec.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "specs/type.spec.js~describe200.it234",
    "access": null,
    "description": "test .typeCheck(clazz, actualType) negative",
    "lineNumber": 655,
    "testTargets": [
      "Type#typeCheck"
    ]
  }
]